{
  "hash": "b656dd6e42024fbaa8a246829a62e022",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Assignment 4:  Question duplicates'\nsubtitle: \"Sequence Models\"\ncategories: \n  - NLP \n  - Coursera \n  - Lab\n  - Sequence Models\njupyter: python3\nexecute: \n    error: true\n---\n\n\n\n\n![course banner](/images/Course-Logo-3-3.webp){.column-margin .nolightbox} \n\n::: {.callout}\n## Honor code alert\n\nDue to the Coursera Honor Code, I cannot provide the solutions to the assignments. \n\n- This notebook is the original notebook provided by the course\n- It is setup to run without stopping for errors. \n- It is also likely to be out of date as the course has had some updates since I took it.\n- Although I aced the course this assignment was the most time consuming.\n- Good luck with the assignment it should make we a better programmer.\n- It is also a good idea to go over it a few times until we can do it easily.\n:::\n\nWelcome to the fourth assignment of course 3. In this assignment you will explore Siamese networks applied to natural language processing. You will further explore the fundamentals of Trax and you will be able to implement a more complicated structure using it. By completing this assignment, you will learn how to implement models with different architectures. \n\n## Outline\n\n- [Overview](#0)\n- [Part 1: Importing the Data](#1)\n    - [1.1 Loading in the data](#1.1)\n    - [1.2 Converting a question to a tensor](#1.2)\n    - [1.3 Understanding the iterator](#1.3)\n        - [Exercise 01](#ex01)\n- [Part 2: Defining the Siamese model](#2)\n    - [2.1 Understanding Siamese Network](#2.1)\n        - [Exercise 02](#ex02)\n    - [2.2 Hard  Negative Mining](#2.2)\n        - [Exercise 03](#ex03)\n- [Part 3: Training](#3)\n    - [3.1 Training the model](#3.1)\n        - [Exercise 04](#ex04)\n- [Part 4: Evaluation](#4)\n    - [4.1 Evaluating your siamese network](#4.1)\n    - [4.2 Classify](#4.2)\n        - [Exercise 05](#ex05)\n- [Part 5: Testing with your own questions](#5)\n    - [Exercise 06](#ex06)\n- [On Siamese networks](#6)\n\n\n### Overview {#0}\n\nIn this assignment, concretely you will: \n\n- Learn about Siamese networks\n- Understand how the triplet loss works\n- Understand how to evaluate accuracy\n- Use cosine similarity between the model's outputted vectors\n- Use the data generator to get batches of questions\n- Predict using your own model\n\nBy now, you are familiar with trax and know how to make use of classes to define your model. We will start this homework by asking you to preprocess the data the same way you did in the previous assignments. After processing the data you will build a classifier that will allow you to identify whether to questions are the same or not. \n\n![meme](img/meme.png){style=\"width:550px;height:300px;\"}\n\n\n\nYou will process the data first and then pad in a similar way you have done in the previous assignment. Your model will take in the two question embeddings, run them through an LSTM, and then compare the outputs of the two sub networks using cosine similarity. Before taking a deep dive into the model, start by importing the data set.\n\n\n<a name='1'></a>\n\n# Part 1: Importing the Data\n\n<a name='1.1'></a>\n\n### 1.1 Loading in the data\n\nYou will be using the Quora question answer dataset to build a model that could identify similar questions. This is a useful task because you don't want to have several versions of the same question posted. Several times when teaching I end up responding to similar questions on piazza, or on other community forums. This data set has been labeled for you. Run the cell below to import some of the packages you will be using. \n\n::: {#e58272b6 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport nltk\nimport trax\nfrom trax import layers as tl\nfrom trax.supervised import training\nfrom trax.fastmath import numpy as fastnp\nimport numpy as np\nimport pandas as pd\nimport random as rnd\n\n# set random seeds\nfrom trax import fastmath\nseed=34\nrng = fastmath.random.get_prng(seed)\n#trax.supervised.trainer_lib.init_random_number_generators(34)\nrnd.seed(seed)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n2025-02-07 11:04:04.532866: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1738919044.548480   57666 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1738919044.553001   57666 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n```\n:::\n:::\n\n\n**Notice that for this assignment Trax's numpy is referred to as `fastnp`, while regular numpy is referred to as `np`.**\n\nYou will now load in the data set. We have done some preprocessing for you. If you have taken the deeplearning specialization, this is a slightly different training method than the one you have seen there. If you have not, then don't worry about it, we will explain everything. \n\n::: {#447733f3 .cell execution_count=2}\n``` {.python .cell-code}\ndata = pd.read_csv(\"questions.csv\")\nN=len(data)\nprint('Number of question pairs: ', N)\ndata.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">FileNotFoundError</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> data <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pd</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_csv</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">questions.csv</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> N<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(0,135,0)\">len</span>(data)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Number of question pairs: </span><span style=\"color:rgb(175,0,0)\">'</span>, N)\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1026</span>, in <span class=\"ansi-cyan-fg\">read_csv</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1013</span> kwds_defaults <span style=\"color:rgb(98,98,98)\">=</span> _refine_defaults_read(\n<span class=\"ansi-green-fg ansi-bold\">   1014</span>     dialect,\n<span class=\"ansi-green-fg ansi-bold\">   1015</span>     delimiter,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1022</span>     dtype_backend<span style=\"color:rgb(98,98,98)\">=</span>dtype_backend,\n<span class=\"ansi-green-fg ansi-bold\">   1023</span> )\n<span class=\"ansi-green-fg ansi-bold\">   1024</span> kwds<span style=\"color:rgb(98,98,98)\">.</span>update(kwds_defaults)\n<span class=\"ansi-green-fg\">-&gt; 1026</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">_read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filepath_or_buffer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/pandas/io/parsers/readers.py:620</span>, in <span class=\"ansi-cyan-fg\">_read</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">    617</span> _validate_names(kwds<span style=\"color:rgb(98,98,98)\">.</span>get(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">names</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>))\n<span class=\"ansi-green-fg ansi-bold\">    619</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Create the parser.</span>\n<span class=\"ansi-green-fg\">--&gt; 620</span> parser <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">TextFileReader</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filepath_or_buffer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    622</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> chunksize <span style=\"font-weight:bold;color:rgb(175,0,255)\">or</span> iterator:\n<span class=\"ansi-green-fg ansi-bold\">    623</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> parser\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1620</span>, in <span class=\"ansi-cyan-fg\">TextFileReader.__init__</span><span class=\"ansi-blue-fg\">(self, f, engine, **kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1617</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>options[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">has_index_names</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> kwds[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">has_index_names</span><span style=\"color:rgb(175,0,0)\">\"</span>]\n<span class=\"ansi-green-fg ansi-bold\">   1619</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>handles: IOHandles <span style=\"color:rgb(98,98,98)\">|</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg\">-&gt; 1620</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_engine <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_make_engine</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">f</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">engine</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1880</span>, in <span class=\"ansi-cyan-fg\">TextFileReader._make_engine</span><span class=\"ansi-blue-fg\">(self, f, engine)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1878</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">\"</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> mode:\n<span class=\"ansi-green-fg ansi-bold\">   1879</span>         mode <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">-&gt; 1880</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>handles <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_handle</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">   1881</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">f</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1882</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">mode</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1883</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1884</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">compression</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">compression</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1885</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">memory_map</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">memory_map</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">False</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1886</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">is_text</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">is_text</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1887</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">errors</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">encoding_errors</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">strict</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1888</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">storage_options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">storage_options</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1889</span> <span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1890</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>handles <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">   1891</span> f <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>handles<span style=\"color:rgb(98,98,98)\">.</span>handle\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/pandas/io/common.py:873</span>, in <span class=\"ansi-cyan-fg\">get_handle</span><span class=\"ansi-blue-fg\">(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)</span>\n<span class=\"ansi-green-fg ansi-bold\">    868</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(handle, <span style=\"color:rgb(0,135,0)\">str</span>):\n<span class=\"ansi-green-fg ansi-bold\">    869</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Check whether the filename is to be opened in binary mode.</span>\n<span class=\"ansi-green-fg ansi-bold\">    870</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Binary mode does not support 'encoding' and 'newline'.</span>\n<span class=\"ansi-green-fg ansi-bold\">    871</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> ioargs<span style=\"color:rgb(98,98,98)\">.</span>encoding <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">\"</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> ioargs<span style=\"color:rgb(98,98,98)\">.</span>mode:\n<span class=\"ansi-green-fg ansi-bold\">    872</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># Encoding</span>\n<span class=\"ansi-green-fg\">--&gt; 873</span>         handle <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">open</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    874</span> <span class=\"ansi-yellow-bg\">            </span><span class=\"ansi-yellow-bg\">handle</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    875</span> <span class=\"ansi-yellow-bg\">            </span><span class=\"ansi-yellow-bg\">ioargs</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">mode</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    876</span> <span class=\"ansi-yellow-bg\">            </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">ioargs</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">encoding</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    877</span> <span class=\"ansi-yellow-bg\">            </span><span class=\"ansi-yellow-bg\">errors</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">errors</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    878</span> <span class=\"ansi-yellow-bg\">            </span><span class=\"ansi-yellow-bg\">newline</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    879</span> <span class=\"ansi-yellow-bg\">        </span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    880</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">    881</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># Binary mode</span>\n<span class=\"ansi-green-fg ansi-bold\">    882</span>         handle <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">open</span>(handle, ioargs<span style=\"color:rgb(98,98,98)\">.</span>mode)\n\n<span class=\"ansi-red-fg\">FileNotFoundError</span>: [Errno 2] No such file or directory: 'questions.csv'</pre>\n```\n:::\n\n:::\n:::\n\n\nWe first split the data into a train and test set. The test set will be used later to evaluate our model.\n\n::: {#13568ef1 .cell execution_count=3}\n``` {.python .cell-code}\nN_train = 300000\nN_test  = 10*1024\ndata_train = data[:N_train]\ndata_test  = data[N_train:N_train+N_test]\nprint(\"Train set:\", len(data_train), \"Test set:\", len(data_test))\ndel(data) # remove to free memory\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> N_train <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">300000</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> N_test  <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">10</span><span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">1024</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> data_train <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">data</span>[:N_train]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> data_test  <span style=\"color:rgb(98,98,98)\">=</span> data[N_train:N_train<span style=\"color:rgb(98,98,98)\">+</span>N_test]\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Train set:</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(0,135,0)\">len</span>(data_train), <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Test set:</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(0,135,0)\">len</span>(data_test))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'data' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nAs explained in the lectures, we select only the question pairs that are duplicate to train the model. <br>\nWe build two batches as input for the Siamese network and we assume that question $q1_i$ (question $i$ in the first batch) is a duplicate of $q2_i$ (question $i$ in the second batch), but all other questions in the second batch are not duplicates of $q1_i$.  \nThe test set uses the original pairs of questions and the status describing if the questions are duplicates.\n\n::: {#dcba3d5f .cell execution_count=4}\n``` {.python .cell-code}\ntd_index = (data_train['is_duplicate'] == 1).to_numpy()\ntd_index = [i for i, x in enumerate(td_index) if x] \nprint('number of duplicate questions: ', len(td_index))\nprint('indexes of first ten duplicate questions:', td_index[:10])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> td_index <span style=\"color:rgb(98,98,98)\">=</span> (<span class=\"ansi-yellow-bg\">data_train</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">is_duplicate</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(98,98,98)\">1</span>)<span style=\"color:rgb(98,98,98)\">.</span>to_numpy()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> td_index <span style=\"color:rgb(98,98,98)\">=</span> [i <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i, x <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">enumerate</span>(td_index) <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> x] \n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">number of duplicate questions: </span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(0,135,0)\">len</span>(td_index))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'data_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#27f32c6b .cell execution_count=5}\n``` {.python .cell-code}\nprint(data_train['question1'][5])  #  Example of question duplicates (first one in data)\nprint(data_train['question2'][5])\nprint('is_duplicate: ', data_train['is_duplicate'][5])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">data_train</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">question1</span><span style=\"color:rgb(175,0,0)\">'</span>][<span style=\"color:rgb(98,98,98)\">5</span>])  <span style=\"font-style:italic;color:rgb(95,135,135)\">#  Example of question duplicates (first one in data)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"color:rgb(0,135,0)\">print</span>(data_train[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">question2</span><span style=\"color:rgb(175,0,0)\">'</span>][<span style=\"color:rgb(98,98,98)\">5</span>])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">is_duplicate: </span><span style=\"color:rgb(175,0,0)\">'</span>, data_train[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">is_duplicate</span><span style=\"color:rgb(175,0,0)\">'</span>][<span style=\"color:rgb(98,98,98)\">5</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'data_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#477f391f .cell execution_count=6}\n``` {.python .cell-code}\nQ1_train_words = np.array(data_train['question1'][td_index])\nQ2_train_words = np.array(data_train['question2'][td_index])\n\nQ1_test_words = np.array(data_test['question1'])\nQ2_test_words = np.array(data_test['question2'])\ny_test  = np.array(data_test['is_duplicate'])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> Q1_train_words <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>array(<span class=\"ansi-yellow-bg\">data_train</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">question1</span><span style=\"color:rgb(175,0,0)\">'</span>][td_index])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> Q2_train_words <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>array(data_train[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">question2</span><span style=\"color:rgb(175,0,0)\">'</span>][td_index])\n<span class=\"ansi-green-fg ansi-bold\">      4</span> Q1_test_words <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>array(data_test[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">question1</span><span style=\"color:rgb(175,0,0)\">'</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'data_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nAbove, you have seen that you only took the duplicated questions for training our model. <br>You did so on purpose, because the data generator will produce batches $([q1_1, q1_2, q1_3, ...]$, $[q2_1, q2_2,q2_3, ...])$  where $q1_i$ and $q2_k$ are duplicate if and only if $i = k$.\n\n<br>Let's print to see what your data looks like.\n\n::: {#c43aa161 .cell execution_count=7}\n``` {.python .cell-code}\nprint('TRAINING QUESTIONS:\\n')\nprint('Question 1: ', Q1_train_words[0])\nprint('Question 2: ', Q2_train_words[0], '\\n')\nprint('Question 1: ', Q1_train_words[5])\nprint('Question 2: ', Q2_train_words[5], '\\n')\n\nprint('TESTING QUESTIONS:\\n')\nprint('Question 1: ', Q1_test_words[0])\nprint('Question 2: ', Q2_test_words[0], '\\n')\nprint('is_duplicate =', y_test[0], '\\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTRAINING QUESTIONS:\n\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">TRAINING QUESTIONS:</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Question 1: </span><span style=\"color:rgb(175,0,0)\">'</span>, <span class=\"ansi-yellow-bg\">Q1_train_words</span>[<span style=\"color:rgb(98,98,98)\">0</span>])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Question 2: </span><span style=\"color:rgb(175,0,0)\">'</span>, Q2_train_words[<span style=\"color:rgb(98,98,98)\">0</span>], <span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Question 1: </span><span style=\"color:rgb(175,0,0)\">'</span>, Q1_train_words[<span style=\"color:rgb(98,98,98)\">5</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Q1_train_words' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nYou will now encode each word of the selected duplicate pairs with an index. <br> Given a question, you can then just encode it as a list of numbers.  \n\nFirst you tokenize the questions using `nltk.word_tokenize`. <br>\nYou need a python default dictionary which later, during inference, assigns the values $0$ to all Out Of Vocabulary (OOV) words.<br>\nThen you encode each word of the selected duplicate pairs with an index. Given a question, you can then just encode it as a list of numbers. \n\n::: {#ec6b0ea3 .cell execution_count=8}\n``` {.python .cell-code}\n#create arrays\nQ1_train = np.empty_like(Q1_train_words)\nQ2_train = np.empty_like(Q2_train_words)\n\nQ1_test = np.empty_like(Q1_test_words)\nQ2_test = np.empty_like(Q2_test_words)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#create arrays</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> Q1_train <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>empty_like(<span class=\"ansi-yellow-bg\">Q1_train_words</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> Q2_train <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>empty_like(Q2_train_words)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> Q1_test <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>empty_like(Q1_test_words)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Q1_train_words' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8896456c .cell execution_count=9}\n``` {.python .cell-code}\n# Building the vocabulary with the train set         (this might take a minute)\nfrom collections import defaultdict\n\nvocab = defaultdict(lambda: 0)\nvocab['<PAD>'] = 1\n\nfor idx in range(len(Q1_train_words)):\n    Q1_train[idx] = nltk.word_tokenize(Q1_train_words[idx])\n    Q2_train[idx] = nltk.word_tokenize(Q2_train_words[idx])\n    q = Q1_train[idx] + Q2_train[idx]\n    for word in q:\n        if word not in vocab:\n            vocab[word] = len(vocab) + 1\nprint('The length of the vocabulary is: ', len(vocab))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 7</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> vocab <span style=\"color:rgb(98,98,98)\">=</span> defaultdict(<span style=\"font-weight:bold;color:rgb(0,135,0)\">lambda</span>: <span style=\"color:rgb(98,98,98)\">0</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> vocab[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">&lt;PAD&gt;</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1</span>\n<span class=\"ansi-green-fg\">----&gt; 7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> idx <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">Q1_train_words</span>)):\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     Q1_train[idx] <span style=\"color:rgb(98,98,98)\">=</span> nltk<span style=\"color:rgb(98,98,98)\">.</span>word_tokenize(Q1_train_words[idx])\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     Q2_train[idx] <span style=\"color:rgb(98,98,98)\">=</span> nltk<span style=\"color:rgb(98,98,98)\">.</span>word_tokenize(Q2_train_words[idx])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Q1_train_words' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#31544186 .cell execution_count=10}\n``` {.python .cell-code}\nprint(vocab['<PAD>'])\nprint(vocab['Astrology'])\nprint(vocab['Astronomy'])  #not in vocabulary, returns 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n0\n0\n```\n:::\n:::\n\n\n::: {#4fcb06d5 .cell execution_count=11}\n``` {.python .cell-code}\nfor idx in range(len(Q1_test_words)): \n    Q1_test[idx] = nltk.word_tokenize(Q1_test_words[idx])\n    Q2_test[idx] = nltk.word_tokenize(Q2_test_words[idx])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> idx <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">Q1_test_words</span>)): \n<span class=\"ansi-green-fg ansi-bold\">      2</span>     Q1_test[idx] <span style=\"color:rgb(98,98,98)\">=</span> nltk<span style=\"color:rgb(98,98,98)\">.</span>word_tokenize(Q1_test_words[idx])\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     Q2_test[idx] <span style=\"color:rgb(98,98,98)\">=</span> nltk<span style=\"color:rgb(98,98,98)\">.</span>word_tokenize(Q2_test_words[idx])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Q1_test_words' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7a6a5fe7 .cell execution_count=12}\n``` {.python .cell-code}\nprint('Train set has reduced to: ', len(Q1_train) ) \nprint('Test set length: ', len(Q1_test) ) \n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Train set has reduced to: </span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">Q1_train</span>) ) \n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Test set length: </span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(0,135,0)\">len</span>(Q1_test) ) \n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Q1_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n<a name='1.2'></a>\n\n### 1.2 Converting a question to a tensor\n\nYou will now convert every question to a tensor, or an array of numbers, using your vocabulary built above.\n\n::: {#118e7809 .cell execution_count=13}\n``` {.python .cell-code}\n# Converting questions to array of integers\nfor i in range(len(Q1_train)):\n    Q1_train[i] = [vocab[word] for word in Q1_train[i]]\n    Q2_train[i] = [vocab[word] for word in Q2_train[i]]\n\n        \nfor i in range(len(Q1_test)):\n    Q1_test[i] = [vocab[word] for word in Q1_test[i]]\n    Q2_test[i] = [vocab[word] for word in Q2_test[i]]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Converting questions to array of integers</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">Q1_train</span>)):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     Q1_train[i] <span style=\"color:rgb(98,98,98)\">=</span> [vocab[word] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> word <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> Q1_train[i]]\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     Q2_train[i] <span style=\"color:rgb(98,98,98)\">=</span> [vocab[word] <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> word <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> Q2_train[i]]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Q1_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3f2c04a1 .cell execution_count=14}\n``` {.python .cell-code}\nprint('first question in the train set:\\n')\nprint(Q1_train_words[0], '\\n') \nprint('encoded version:')\nprint(Q1_train[0],'\\n')\n\nprint('first question in the test set:\\n')\nprint(Q1_test_words[0], '\\n')\nprint('encoded version:')\nprint(Q1_test[0]) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfirst question in the train set:\n\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">first question in the train set:</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">Q1_train_words</span>[<span style=\"color:rgb(98,98,98)\">0</span>], <span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">'</span>) \n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">encoded version:</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"color:rgb(0,135,0)\">print</span>(Q1_train[<span style=\"color:rgb(98,98,98)\">0</span>],<span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Q1_train_words' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nYou will now split your train set into a training/validation set so that you can use it to train and evaluate your Siamese model.\n\n::: {#51c3d60f .cell execution_count=15}\n``` {.python .cell-code}\n# Splitting the data\ncut_off = int(len(Q1_train)*.8)\ntrain_Q1, train_Q2 = Q1_train[:cut_off], Q2_train[:cut_off]\nval_Q1, val_Q2 = Q1_train[cut_off: ], Q2_train[cut_off:]\nprint('Number of duplicate questions: ', len(Q1_train))\nprint(\"The length of the training set is:  \", len(train_Q1))\nprint(\"The length of the validation set is: \", len(val_Q1))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Splitting the data</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> cut_off <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">int</span>(<span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">Q1_train</span>)<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">.8</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> train_Q1, train_Q2 <span style=\"color:rgb(98,98,98)\">=</span> Q1_train[:cut_off], Q2_train[:cut_off]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> val_Q1, val_Q2 <span style=\"color:rgb(98,98,98)\">=</span> Q1_train[cut_off: ], Q2_train[cut_off:]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Q1_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n<a name='1.3'></a>\n\n### 1.3 Understanding the iterator \n\nMost of the time in Natural Language Processing, and AI in general we use batches when training our data sets. If you were to use stochastic gradient descent with one example at a time, it will take you forever to build a model. In this example, we show you how you can build a data generator that takes in $Q1$ and $Q2$ and returns a batch of size `batch_size`  in the following format $([q1_1, q1_2, q1_3, ...]$, $[q2_1, q2_2,q2_3, ...])$. The tuple consists of two arrays and each array has `batch_size` questions. Again, $q1_i$ and $q2_i$ are duplicates, but they are not duplicates with any other elements in the batch. \n\n<br>\n\nThe command ```next(data_generator)```returns the next batch. This iterator returns the data in a format that you could directly use in your model when computing the feed-forward of your algorithm. This iterator returns a pair of arrays of questions. \n\n<a name='ex01'></a>\n\n### Exercise 01\n\n**Instructions:**  \nImplement the data generator below. Here are some things you will need. \n\n- While true loop.\n- if `index >= len_Q1`, set the `idx` to $0$.\n- The generator should return shuffled batches of data. To achieve this without modifying the actual question lists, a list containing the indexes of the questions is created. This list can be shuffled and used to get random batches everytime the index is reset.\n- Append elements of $Q1$ and $Q2$ to `input1` and `input2` respectively.\n- if `len(input1) == batch_size`, determine `max_len` as the longest question in `input1` and `input2`. Ceil `max_len` to a power of $2$ (for computation purposes) using the following command:  `max_len = 2**int(np.ceil(np.log2(max_len)))`.\n- Pad every question by `vocab['<PAD>']` until you get the length `max_len`.\n- Use yield to return `input1, input2`. \n- Don't forget to reset `input1, input2`  to empty arrays at the end (data generator resumes from where it last left).\n\n::: {#1a4171df .cell execution_count=16}\n``` {.python .cell-code}\n# UNQ_C1 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: data_generator\ndef data_generator(Q1, Q2, batch_size, pad=1, shuffle=True):\n    \"\"\"Generator function that yields batches of data\n\n    Args:\n        Q1 (list): List of transformed (to tensor) questions.\n        Q2 (list): List of transformed (to tensor) questions.\n        batch_size (int): Number of elements per batch.\n        pad (int, optional): Pad character from the vocab. Defaults to 1.\n        shuffle (bool, optional): If the batches should be randomnized or not. Defaults to True.\n    Yields:\n        tuple: Of the form (input1, input2) with types (numpy.ndarray, numpy.ndarray)\n        NOTE: input1: inputs to your model [q1a, q2a, q3a, ...] i.e. (q1a,q1b) are duplicates\n              input2: targets to your model [q1b, q2b,q3b, ...] i.e. (q1a,q2i) i!=a are not duplicates\n    \"\"\"\n\n    input1 = []\n    input2 = []\n    idx = 0\n    len_q = len(Q1)\n    question_indexes = [*range(len_q)]\n    \n    if shuffle:\n        rnd.shuffle(question_indexes)\n    \n    ### START CODE HERE (Replace instances of 'None' with your code) ###\n    while True:\n        if idx >= len_q:\n            # if idx is greater than or equal to len_q, set idx accordingly \n            # (Hint: look at the instructions above)\n            idx = None\n            # shuffle to get random batches if shuffle is set to True\n            if shuffle:\n                rnd.shuffle(question_indexes)\n        \n        # get questions at the `question_indexes[idx]` position in Q1 and Q2\n        q1 = None\n        q2 = None\n        \n        # increment idx by 1\n        idx += None\n        # append q1\n        input1.append(None)\n        # append q2\n        input2.append(None)\n        if len(input1) == batch_size:\n            # determine max_len as the longest question in input1 & input 2\n            # Hint: use the `max` function. \n            # take max of input1 & input2 and then max out of the two of them.\n            max_len = None\n            # pad to power-of-2 (Hint: look at the instructions above)\n            max_len = None\n            b1 = []\n            b2 = []\n            for q1, q2 in zip(input1, input2):\n                # add [pad] to q1 until it reaches max_len\n                q1 = None\n                # add [pad] to q2 until it reaches max_len\n                q2 = None\n                # append q1\n                b1.append(None)\n                # append q2\n                b2.append(None)\n            # use b1 and b2\n            yield np.array(None), np.array(None)\n    ### END CODE HERE ###\n            # reset the batches\n            input1, input2 = [], []  # reset the batches\n```\n:::\n\n\n::: {#ee6f690b .cell execution_count=17}\n``` {.python .cell-code}\nbatch_size = 2\nres1, res2 = next(data_generator(train_Q1, train_Q2, batch_size))\nprint(\"First questions  : \",'\\n', res1, '\\n')\nprint(\"Second questions : \",'\\n', res2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> batch_size <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">2</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> res1, res2 <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(data_generator(<span class=\"ansi-yellow-bg\">train_Q1</span>, train_Q2, batch_size))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">First questions  : </span><span style=\"color:rgb(175,0,0)\">\"</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">'</span>, res1, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Second questions : </span><span style=\"color:rgb(175,0,0)\">\"</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">'</span>, res2)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_Q1' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Note**: The following expected output is valid only if you run the above test cell **_once_** (first time). The output will change on each execution.\n\nIf you think your implementation is correct and it is not matching the output, make sure to restart the kernel and run all the cells from the top again. \n\n**Expected Output:**\n```CPP\nFirst questions  :  \n [[  30   87   78  134 2132 1981   28   78  594   21    1    1    1    1\n     1    1]\n [  30   55   78 3541 1460   28   56  253   21    1    1    1    1    1\n     1    1]] \n\nSecond questions :  \n [[  30  156   78  134 2132 9508   21    1    1    1    1    1    1    1\n     1    1]\n [  30  156   78 3541 1460  131   56  253   21    1    1    1    1    1\n     1    1]]\n```\nNow that you have your generator, you can just call it and it will return tensors which correspond to your questions in the Quora data set.<br>Now you can go ahead and start building your neural network. \n\n\n<a name='2'></a>\n\n# Part 2: Defining the Siamese model\n\n<a name='2.1'></a>\n\n### 2.1 Understanding Siamese Network \n\nA Siamese network is a neural network which uses the same weights while working in tandem on two different input vectors to compute comparable output vectors.The Siamese network you are about to implement looks like this:\n\n<img src = \"img/siamese.png\" style=\"width:600px;height:300px;\"/>\n\nYou get the question embedding, run it through an LSTM layer, normalize $v_1$ and $v_2$, and finally use a triplet loss (explained below) to get the corresponding cosine similarity for each pair of questions. As usual, you will start by importing the data set. The triplet loss makes use of a baseline (anchor) input that is compared to a positive (truthy) input and a negative (falsy) input. The distance from the baseline (anchor) input to the positive (truthy) input is minimized, and the distance from the baseline (anchor) input to the negative (falsy) input is maximized. In math equations, you are trying to maximize the following.\n\n$$\\mathcal{L}(A, P, N)=\\max \\left(\\|\\mathrm{f}(A)-\\mathrm{f}(P)\\|^{2}-\\|\\mathrm{f}(A)-\\mathrm{f}(N)\\|^{2}+\\alpha, 0\\right)$$\n\n$A$ is the anchor input, for example $q1_1$, $P$ the duplicate input, for example, $q2_1$, and $N$ the negative input (the non duplicate question), for example $q2_2$.<br>\n$\\alpha$ is a margin; you can think about it as a safety net, or by how much you want to push the duplicates from the non duplicates. \n<br>\n\n<a name='ex02'></a>\n\n### Exercise 02\n\n**Instructions:** Implement the `Siamese` function below. You should be using all the objects explained below. \n\nTo implement this model, you will be using `trax`. Concretely, you will be using the following functions.\n\n\n- `tl.Serial`: Combinator that applies layers serially (by function composition) allows you set up the overall structure of the feedforward. [docs](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.combinators.Serial) / [source code](https://github.com/google/trax/blob/1372b903bb66b0daccee19fd0b1fdf44f659330b/trax/layers/combinators.py#L26)\n    - You can pass in the layers as arguments to `Serial`, separated by commas. \n    - For example: `tl.Serial(tl.Embeddings(...), tl.Mean(...), tl.Dense(...), tl.LogSoftmax(...))` \n\n\n-  `tl.Embedding`: Maps discrete tokens to vectors. It will have shape (vocabulary length X dimension of output vectors). The dimension of output vectors (also called d_feature) is the number of elements in the word embedding. [docs](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Embedding) / [source code](https://github.com/google/trax/blob/1372b903bb66b0daccee19fd0b1fdf44f659330b/trax/layers/core.py#L113)\n    - `tl.Embedding(vocab_size, d_feature)`.\n    - `vocab_size` is the number of unique words in the given vocabulary.\n    - `d_feature` is the number of elements in the word embedding (some choices for a word embedding size range from 150 to 300, for example).\n\n\n-  `tl.LSTM` The LSTM layer. It leverages another Trax layer called [`LSTMCell`](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.rnn.LSTMCell). The number of units should be specified and should match the number of elements in the word embedding. [docs](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.rnn.LSTM) / [source code](https://github.com/google/trax/blob/1372b903bb66b0daccee19fd0b1fdf44f659330b/trax/layers/rnn.py#L87)\n    - `tl.LSTM(n_units)` Builds an LSTM layer of n_units.\n    \n    \n- `tl.Mean`: Computes the mean across a desired axis. Mean uses one tensor axis to form groups of values and replaces each group with the mean value of that group. [docs](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Mean) / [source code](https://github.com/google/trax/blob/1372b903bb66b0daccee19fd0b1fdf44f659330b/trax/layers/core.py#L276)\n    - `tl.Mean(axis=1)` mean over columns.\n\n\n- `tl.Fn` Layer with no weights that applies the function f, which should be specified using a lambda syntax. [docs](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.base.Fn) / [source doce](https://github.com/google/trax/blob/70f5364dcaf6ec11aabbd918e5f5e4b0f5bfb995/trax/layers/base.py#L576)\n    - $x$ -> This is used for cosine similarity.\n    - `tl.Fn('Normalize', lambda x: normalize(x))` Returns a layer with no weights that applies the function `f`\n    \n    \n- `tl.parallel`: It is a combinator layer (like `Serial`) that applies a list of layers in parallel to its inputs. [docs](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.combinators.Parallel) / [source code](https://github.com/google/trax/blob/37aba571a89a8ad86be76a569d0ec4a46bdd8642/trax/layers/combinators.py#L152)\n\n::: {#94ba78d8 .cell execution_count=18}\n``` {.python .cell-code}\n# UNQ_C2 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: Siamese\ndef Siamese(vocab_size=len(vocab), d_model=128, mode='train'):\n    \"\"\"Returns a Siamese model.\n\n    Args:\n        vocab_size (int, optional): Length of the vocabulary. Defaults to len(vocab).\n        d_model (int, optional): Depth of the model. Defaults to 128.\n        mode (str, optional): 'train', 'eval' or 'predict', predict mode is for fast inference. Defaults to 'train'.\n\n    Returns:\n        trax.layers.combinators.Parallel: A Siamese model. \n    \"\"\"\n\n    def normalize(x):  # normalizes the vectors to have L2 norm 1\n        return x / fastnp.sqrt(fastnp.sum(x * x, axis=-1, keepdims=True))\n    \n    ### START CODE HERE (Replace instances of 'None' with your code) ###\n    q_processor = tl.Serial(  # Processor will run on Q1 and Q2.\n        None, # Embedding layer\n        None, # LSTM layer\n        None, # Mean over columns\n        None  # Apply normalize function\n    )  # Returns one vector of shape [batch_size, d_model].\n    \n    ### END CODE HERE ###\n    \n    # Run on Q1 and Q2 in parallel.\n    model = tl.Parallel(q_processor, q_processor)\n    return model\n```\n:::\n\n\nSetup the Siamese network model\n\n::: {#6927b5e4 .cell execution_count=19}\n``` {.python .cell-code}\n# check your model\nmodel = Siamese()\nprint(model)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/oren/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/layers/combinators.py:437: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n  if self._mode == 'predict' and self._state[1] is not ():  # pylint: disable=literal-comparison\n/home/oren/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/layers/combinators.py:910: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n  if state[0] is ():  # pylint: disable=literal-comparison\n/home/oren/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/layers/combinators.py:437: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n  if self._mode == 'predict' and self._state[1] is not ():  # pylint: disable=literal-comparison\n/home/oren/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/layers/combinators.py:910: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n  if state[0] is ():  # pylint: disable=literal-comparison\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ValueError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># check your model</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">Siamese</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(model)\n\nCell <span class=\"ansi-green-fg\">In[18], line 19</span>, in <span class=\"ansi-cyan-fg\">Siamese</span><span class=\"ansi-blue-fg\">(vocab_size, d_model, mode)</span>\n<span class=\"ansi-green-fg ansi-bold\">     16</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> x <span style=\"color:rgb(98,98,98)\">/</span> fastnp<span style=\"color:rgb(98,98,98)\">.</span>sqrt(fastnp<span style=\"color:rgb(98,98,98)\">.</span>sum(x <span style=\"color:rgb(98,98,98)\">*</span> x, axis<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>, keepdims<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>))\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">### START CODE HERE (Replace instances of 'None' with your code) ###</span>\n<span class=\"ansi-green-fg\">---&gt; 19</span> q_processor <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">tl</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">Serial</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">  </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># Processor will run on Q1 and Q2.</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># Embedding layer</span>\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># LSTM layer</span>\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># Mean over columns</span>\n<span class=\"ansi-green-fg ansi-bold\">     23</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">  </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># Apply normalize function</span>\n<span class=\"ansi-green-fg ansi-bold\">     24</span> <span class=\"ansi-yellow-bg\">)</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># Returns one vector of shape [batch_size, d_model].</span>\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">### END CODE HERE ###</span>\n<span class=\"ansi-green-fg ansi-bold\">     27</span> \n<span class=\"ansi-green-fg ansi-bold\">     28</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Run on Q1 and Q2 in parallel.</span>\n<span class=\"ansi-green-fg ansi-bold\">     29</span> model <span style=\"color:rgb(98,98,98)\">=</span> tl<span style=\"color:rgb(98,98,98)\">.</span>Parallel(q_processor, q_processor)\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/layers/combinators.py:59</span>, in <span class=\"ansi-cyan-fg\">Serial.__init__</span><span class=\"ansi-blue-fg\">(self, name, sublayers_to_print, *sublayers)</span>\n<span class=\"ansi-green-fg ansi-bold\">     55</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, <span style=\"color:rgb(98,98,98)\">*</span>sublayers, name<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, sublayers_to_print<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>):\n<span class=\"ansi-green-fg ansi-bold\">     56</span>   <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>(\n<span class=\"ansi-green-fg ansi-bold\">     57</span>       name<span style=\"color:rgb(98,98,98)\">=</span>name, sublayers_to_print<span style=\"color:rgb(98,98,98)\">=</span>sublayers_to_print)\n<span class=\"ansi-green-fg\">---&gt; 59</span>   sublayers <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">_ensure_flat</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">sublayers</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     60</span>   <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_sublayers <span style=\"color:rgb(98,98,98)\">=</span> sublayers\n<span class=\"ansi-green-fg ansi-bold\">     61</span>   <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_n_layers <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">len</span>(sublayers)\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/layers/combinators.py:1110</span>, in <span class=\"ansi-cyan-fg\">_ensure_flat</span><span class=\"ansi-blue-fg\">(layers)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1108</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> obj <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> layers:\n<span class=\"ansi-green-fg ansi-bold\">   1109</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(obj, base<span style=\"color:rgb(98,98,98)\">.</span>Layer):\n<span class=\"ansi-green-fg\">-&gt; 1110</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ValueError</span>(\n<span class=\"ansi-green-fg ansi-bold\">   1111</span>         <span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Found nonlayer object (</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>obj<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">) in layers: </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>layers<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">   1112</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> layers\n\n<span class=\"ansi-red-fg\">ValueError</span>: Found nonlayer object (None) in layers: [None, None, None, None]</pre>\n```\n:::\n\n:::\n:::\n\n\n**Expected output:**  \n\n```CPP\nParallel_in2_out2[\n  Serial[\n    Embedding_41699_128\n    LSTM_128\n    Mean\n    Normalize\n  ]\n  Serial[\n    Embedding_41699_128\n    LSTM_128\n    Mean\n    Normalize\n  ]\n]\n```\n\n<a name='2.2'></a>\n\n### 2.2 Hard  Negative Mining\n\n\nYou will now implement the `TripletLoss`.<br>\nAs explained in the lecture, loss is composed of two terms. One term utilizes the mean of all the non duplicates, the second utilizes the *closest negative*. Our loss expression is then:\n \n$$\n\\begin{align}\n \\mathcal{Loss_1(A,P,N)} &=\\max \\left( -cos(A,P)  + mean_{neg} +\\alpha, 0\\right) \\\\\n \\mathcal{Loss_2(A,P,N)} &=\\max \\left( -cos(A,P)  + closest_{neg} +\\alpha, 0\\right) \\\\\n\\mathcal{Loss(A,P,N)} &= mean(Loss_1 + Loss_2) \\\\\n\\end{align}\n$$\n\nFurther, two sets of instructions are provided. The first set provides a brief description of the task. If that set proves insufficient, a more detailed set can be displayed.  \n\n<a name='ex03'></a>\n\n### Exercise 03\n\n**Instructions (Brief):** Here is a list of things you should do: <br>\n\n- As this will be run inside trax, use `fastnp.xyz` when using any `xyz` numpy function\n- Use `fastnp.dot` to calculate the similarity matrix $v_1v_2^T$ of dimension `batch_size` x `batch_size`\n- Take the score of the duplicates on the diagonal `fastnp.diagonal`\n- Use the `trax` functions `fastnp.eye` and `fastnp.maximum` for the identity matrix and the maximum.\n\n<details>    \n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>More Detailed Instructions </b></font>\n</summary>\nWe'll describe the algorithm using a detailed example. Below, V1, V2 are the output of the normalization blocks in our model. Here we will use a batch_size of 4 and a d_model of 3. As explained in lecture, the inputs, Q1, Q2 are arranged so that corresponding inputs are duplicates while non-corresponding entries are not. The outputs will have the same pattern.\n\n<img src = \"img/C3_W4_triploss1.png\" style=\"width:1021px;height:229px;\"/>\n\nThis testcase arranges the outputs, v1,v2, to highlight different scenarios. Here, the first two outputs V1[0], V2[0] match exactly - so the model is generating the same vector for Q1[0] and Q2[0] inputs. The second outputs differ, circled in orange, we set, V2[1] is set to match V2[**2**], simulating a model which is generating very poor results. V1[3] and V2[3] match exactly again while V1[4] and V2[4] are set to be exactly wrong - 180 degrees from each other, circled in blue. \n\nThe first step is to compute the cosine similarity matrix or `score` in the code. As explained in lecture, this is $$V_1 V_2^T$$ This is generated with `fastnp.dot`.\n\n<img src = \"img/C3_W4_triploss2.png\" style=\"width:959px;height:236px;\"/>\n\nThe clever arrangement of inputs creates the data needed for positive *and* negative examples without having to run all pair-wise combinations. Because Q1[n] is a duplicate of only Q2[n], other combinations are explicitly created negative examples or *Hard Negative* examples. The matrix multiplication efficiently produces the cosine similarity of all positive/negative combinations as shown above on the left side of the diagram. 'Positive' are the results of duplicate examples and 'negative' are the results of explicitly created negative examples. The results for our test case are as expected, V1[0]V2[0] match producing '1' while our other 'positive' cases (in green) don't match well, as was arranged. The V2[2] was set to match V1[3] producing a poor match at `score[2,2]` and an undesired 'negative' case of a '1' shown in grey. \n\nWith the similarity matrix (`score`) we can begin to implement the loss equations. First, we can extract $$cos(A,P)$$ by utilizing `fastnp.diagonal`. The goal is to grab all the green entries in the diagram above. This is `positive` in the code.\n\nNext, we will create the *closest_negative*. This is the nonduplicate entry in V2 that is closest (has largest cosine similarity) to an entry in V1. Each row, n, of `score` represents all comparisons of the results of Q1[n] vs Q2[x] within a batch. A specific example in our testcase is row `score[2,:]`. It has the cosine similarity of V1[2] and V2[x]. The *closest_negative*, as was arranged, is V2[2] which has a score of 1. This is the maximum value of the 'negative' entries (blue entries in the diagram).\n\nTo implement this, we need to pick the maximum entry on a row of `score`, ignoring the 'positive'/green entries. To avoid selecting the 'positive'/green entries, we can make them larger negative numbers. Multiply `fastnp.eye(batch_size)` with 2.0 and subtract it out of `scores`. The result is `negative_without_positive`. Now we can use `fastnp.max`, row by row (axis=1), to select the maximum which is `closest_negative`.\n\nNext, we'll create *mean_negative*. As the name suggests, this is the mean of all the 'negative'/blue values in `score` on a row by row basis. We can use `fastnp.eye(batch_size)` and a constant, this time to create a mask with zeros on the diagonal. Element-wise multiply this with `score` to get just the 'negative values. This is `negative_zero_on_duplicate` in the code. Compute the mean by using `fastnp.sum` on `negative_zero_on_duplicate` for `axis=1` and divide it by `(batch_size - 1)` . This is `mean_negative`.\n\nNow, we can compute loss using the two equations above and `fastnp.maximum`. This will form `triplet_loss1` and `triplet_loss2`. \n\n`triple_loss` is the `fastnp.mean` of the sum of the two individual losses.\n\nOnce you have this code matching the expected results, you can clip out the section between ### START CODE HERE and ### END CODE HERE it out and insert it into TripletLoss below.\n</details> \n\n::: {#b7938550 .cell execution_count=20}\n``` {.python .cell-code}\n# UNQ_C3 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: TripletLossFn\ndef TripletLossFn(v1, v2, margin=0.25):\n    \"\"\"Custom Loss function.\n\n    Args:\n        v1 (numpy.ndarray): Array with dimension (batch_size, model_dimension) associated to Q1.\n        v2 (numpy.ndarray): Array with dimension (batch_size, model_dimension) associated to Q2.\n        margin (float, optional): Desired margin. Defaults to 0.25.\n\n    Returns:\n        jax.interpreters.xla.DeviceArray: Triplet Loss.\n    \"\"\"\n    ### START CODE HERE (Replace instances of 'None' with your code) ###\n    \n    # use fastnp to take the dot product of the two batches (don't forget to transpose the second argument)\n    scores = None  # pairwise cosine sim\n    # calculate new batch size\n    batch_size = len(scores)\n    # use fastnp to grab all postive `diagonal` entries in `scores`\n    positive = None  # the positive ones (duplicates)\n    # multiply `fastnp.eye(batch_size)` with 2.0 and subtract it out of `scores`\n    negative_without_positive = None\n    # take the row by row `max` of `negative_without_positive`. \n    # Hint: negative_without_positive.max(axis = [?])  \n    closest_negative = None\n    # subtract `fastnp.eye(batch_size)` out of 1.0 and do element-wise multiplication with `scores`\n    negative_zero_on_duplicate = None\n    # use `fastnp.sum` on `negative_zero_on_duplicate` for `axis=1` and divide it by `(batch_size - 1)` \n    mean_negative = None\n    # compute `fastnp.maximum` among 0.0 and `A`\n    # A = subtract `positive` from `margin` and add `closest_negative` \n    triplet_loss1 = None\n    # compute `fastnp.maximum` among 0.0 and `B`\n    # B = subtract `positive` from `margin` and add `mean_negative`\n    triplet_loss2 = None\n    # add the two losses together and take the `fastnp.mean` of it\n    triplet_loss = None\n    \n    ### END CODE HERE ###\n    \n    return triplet_loss\n```\n:::\n\n\n::: {#7aea77f3 .cell execution_count=21}\n``` {.python .cell-code}\nv1 = np.array([[0.26726124, 0.53452248, 0.80178373],[0.5178918 , 0.57543534, 0.63297887]])\nv2 = np.array([[ 0.26726124,  0.53452248,  0.80178373],[-0.5178918 , -0.57543534, -0.63297887]])\nTripletLossFn(v2,v1)\nprint(\"Triplet Loss:\", TripletLossFn(v2,v1))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> v1 <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>array([[<span style=\"color:rgb(98,98,98)\">0.26726124</span>, <span style=\"color:rgb(98,98,98)\">0.53452248</span>, <span style=\"color:rgb(98,98,98)\">0.80178373</span>],[<span style=\"color:rgb(98,98,98)\">0.5178918</span> , <span style=\"color:rgb(98,98,98)\">0.57543534</span>, <span style=\"color:rgb(98,98,98)\">0.63297887</span>]])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> v2 <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>array([[ <span style=\"color:rgb(98,98,98)\">0.26726124</span>,  <span style=\"color:rgb(98,98,98)\">0.53452248</span>,  <span style=\"color:rgb(98,98,98)\">0.80178373</span>],[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">0.5178918</span> , <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">0.57543534</span>, <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">0.63297887</span>]])\n<span class=\"ansi-green-fg\">----&gt; 3</span> <span class=\"ansi-yellow-bg\">TripletLossFn</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">v2</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\">v1</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Triplet Loss:</span><span style=\"color:rgb(175,0,0)\">\"</span>, TripletLossFn(v2,v1))\n\nCell <span class=\"ansi-green-fg\">In[20], line 19</span>, in <span class=\"ansi-cyan-fg\">TripletLossFn</span><span class=\"ansi-blue-fg\">(v1, v2, margin)</span>\n<span class=\"ansi-green-fg ansi-bold\">     17</span> scores <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># pairwise cosine sim</span>\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># calculate new batch size</span>\n<span class=\"ansi-green-fg\">---&gt; 19</span> batch_size <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">len</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">scores</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># use fastnp to grab all postive `diagonal` entries in `scores`</span>\n<span class=\"ansi-green-fg ansi-bold\">     21</span> positive <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># the positive ones (duplicates)</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: object of type 'NoneType' has no len()</pre>\n```\n:::\n\n:::\n:::\n\n\n**Expected Output:**\n```CPP\nTriplet Loss: 0.5\n```   \n\nTo make a layer out of a function with no trainable variables, use `tl.Fn`.\n\n::: {#6d41fcbd .cell execution_count=22}\n``` {.python .cell-code}\nfrom functools import partial\ndef TripletLoss(margin=0.25):\n    triplet_loss_fn = partial(TripletLossFn, margin=margin)\n    return tl.Fn('TripletLoss', triplet_loss_fn)\n```\n:::\n\n\n<a name='3'></a>\n\n# Part 3: Training\n\nNow you are going to train your model. As usual, you have to define the cost function and the optimizer. You also have to feed in the built model. Before, going into the training, we will use a special data set up. We will define the inputs using the data generator we built above. The lambda function acts as a seed to remember the last batch that was given. Run the cell below to get the question pairs inputs. \n\n::: {#aa68182b .cell execution_count=23}\n``` {.python .cell-code}\nbatch_size = 256\ntrain_generator = data_generator(train_Q1, train_Q2, batch_size, vocab['<PAD>'])\nval_generator = data_generator(val_Q1, val_Q2, batch_size, vocab['<PAD>'])\nprint('train_Q1.shape ', train_Q1.shape)\nprint('val_Q1.shape   ', val_Q1.shape)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[23], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> batch_size <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">256</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> train_generator <span style=\"color:rgb(98,98,98)\">=</span> data_generator(<span class=\"ansi-yellow-bg\">train_Q1</span>, train_Q2, batch_size, vocab[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">&lt;PAD&gt;</span><span style=\"color:rgb(175,0,0)\">'</span>])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> val_generator <span style=\"color:rgb(98,98,98)\">=</span> data_generator(val_Q1, val_Q2, batch_size, vocab[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">&lt;PAD&gt;</span><span style=\"color:rgb(175,0,0)\">'</span>])\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">train_Q1.shape </span><span style=\"color:rgb(175,0,0)\">'</span>, train_Q1<span style=\"color:rgb(98,98,98)\">.</span>shape)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_Q1' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n<a name='3.1'></a>\n\n### 3.1 Training the model\n\nYou will now write a function that takes in your model and trains it. To train your model you have to decide how many times you want to iterate over the entire data set; each iteration is defined as an `epoch`. For each epoch, you have to go over all the data, using your training iterator.\n\n<a name='ex04'></a>\n### Exercise 04\n\n**Instructions:** Implement the `train_model` below to train the neural network above. Here is a list of things you should do, as already shown in lecture 7: \n\n- Create `TrainTask` and `EvalTask`\n- Create the training loop `trax.supervised.training.Loop`\n- Pass in the following depending on the context (train_task or eval_task):\n    - `labeled_data=generator`\n    - `metrics=[TripletLoss()]`,\n    - `loss_layer=TripletLoss()`\n    - `optimizer=trax.optimizers.Adam` with learning rate of 0.01\n    - `lr_schedule=lr_schedule`,\n    - `output_dir=output_dir`\n\n\nYou will be using your triplet loss function with Adam optimizer. Please read the [trax](https://trax-ml.readthedocs.io/en/latest/trax.optimizers.html?highlight=adam#trax.optimizers.adam.Adam) documentation to get a full understanding. \n\nThis function should return a `training.Loop` object. To read more about this check the [docs](https://trax-ml.readthedocs.io/en/latest/trax.supervised.html?highlight=loop#trax.supervised.training.Loop).\n\n::: {#4133288d .cell execution_count=24}\n``` {.python .cell-code}\nlr_schedule = trax.lr.warmup_and_rsqrt_decay(400, 0.01)\n\n# UNQ_C4 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: train_model\ndef train_model(Siamese, TripletLoss, lr_schedule, train_generator=train_generator, val_generator=val_generator, output_dir='model/'):\n    \"\"\"Training the Siamese Model\n\n    Args:\n        Siamese (function): Function that returns the Siamese model.\n        TripletLoss (function): Function that defines the TripletLoss loss function.\n        lr_schedule (function): Trax multifactor schedule function.\n        train_generator (generator, optional): Training generator. Defaults to train_generator.\n        val_generator (generator, optional): Validation generator. Defaults to val_generator.\n        output_dir (str, optional): Path to save model to. Defaults to 'model/'.\n\n    Returns:\n        trax.supervised.training.Loop: Training loop for the model.\n    \"\"\"\n    output_dir = os.path.expanduser(output_dir)\n\n    ### START CODE HERE (Replace instances of 'None' with your code) ###\n\n    train_task = training.TrainTask(\n        labeled_data=None,       # Use generator (train)\n        loss_layer=None,         # Use triplet loss. Don't forget to instantiate this object\n        optimizer=None,          # Don't forget to add the learning rate parameter\n        lr_schedule=lr_schedule, # Use Trax multifactor schedule function\n    )\n\n    eval_task = training.EvalTask(\n        labeled_data=None,       # Use generator (val)\n        metrics=[None],          # Use triplet loss. Don't forget to instantiate this object\n    )\n    \n    ### END CODE HERE ###\n\n    training_loop = training.Loop(Siamese(),\n                                  train_task,\n                                  eval_task=eval_task,\n                                  output_dir=output_dir)\n\n    return training_loop\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> lr_schedule <span style=\"color:rgb(98,98,98)\">=</span> trax<span style=\"color:rgb(98,98,98)\">.</span>lr<span style=\"color:rgb(98,98,98)\">.</span>warmup_and_rsqrt_decay(<span style=\"color:rgb(98,98,98)\">400</span>, <span style=\"color:rgb(98,98,98)\">0.01</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C4 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># GRADED FUNCTION: train_model</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">train_model</span>(Siamese, TripletLoss, lr_schedule, train_generator<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">train_generator</span>, val_generator<span style=\"color:rgb(98,98,98)\">=</span>val_generator, output_dir<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">model/</span><span style=\"color:rgb(175,0,0)\">'</span>):\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"color:rgb(188,188,188)\">    </span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Training the Siamese Model</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> \n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    Args:</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     17</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">        trax.supervised.training.Loop: Training loop for the model.</span>\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    \"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span>     output_dir <span style=\"color:rgb(98,98,98)\">=</span> os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>expanduser(output_dir)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_generator' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#617a31ee .cell execution_count=25}\n``` {.python .cell-code}\ntrain_steps = 5\ntraining_loop = train_model(Siamese, TripletLoss, lr_schedule)\ntraining_loop.run(train_steps)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> train_steps <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">5</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> training_loop <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">train_model</span>(Siamese, TripletLoss, lr_schedule)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> training_loop<span style=\"color:rgb(98,98,98)\">.</span>run(train_steps)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe model was only trained for 5 steps due to the constraints of this environment. For the rest of the assignment you will be using a pretrained model but now you should understand how the training can be done using Trax.\n\n<a name='4'></a>\n\n# Part 4:  Evaluation  \n\n<a name='4.1'></a>\n\n### 4.1 Evaluating your siamese network\n\nIn this section you will learn how to evaluate a Siamese network. You will first start by loading a pretrained model and then you will use it to predict. \n\n::: {#6f5ad136 .cell execution_count=26}\n``` {.python .cell-code}\n# Loading in the saved model\nmodel = Siamese()\nmodel.init_from_file('model.pkl.gz')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ValueError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[26], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Loading in the saved model</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">Siamese</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> model<span style=\"color:rgb(98,98,98)\">.</span>init_from_file(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">model.pkl.gz</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\nCell <span class=\"ansi-green-fg\">In[18], line 19</span>, in <span class=\"ansi-cyan-fg\">Siamese</span><span class=\"ansi-blue-fg\">(vocab_size, d_model, mode)</span>\n<span class=\"ansi-green-fg ansi-bold\">     16</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> x <span style=\"color:rgb(98,98,98)\">/</span> fastnp<span style=\"color:rgb(98,98,98)\">.</span>sqrt(fastnp<span style=\"color:rgb(98,98,98)\">.</span>sum(x <span style=\"color:rgb(98,98,98)\">*</span> x, axis<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>, keepdims<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>))\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">### START CODE HERE (Replace instances of 'None' with your code) ###</span>\n<span class=\"ansi-green-fg\">---&gt; 19</span> q_processor <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">tl</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">Serial</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">  </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># Processor will run on Q1 and Q2.</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># Embedding layer</span>\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># LSTM layer</span>\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># Mean over columns</span>\n<span class=\"ansi-green-fg ansi-bold\">     23</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">  </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># Apply normalize function</span>\n<span class=\"ansi-green-fg ansi-bold\">     24</span> <span class=\"ansi-yellow-bg\">)</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># Returns one vector of shape [batch_size, d_model].</span>\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">### END CODE HERE ###</span>\n<span class=\"ansi-green-fg ansi-bold\">     27</span> \n<span class=\"ansi-green-fg ansi-bold\">     28</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Run on Q1 and Q2 in parallel.</span>\n<span class=\"ansi-green-fg ansi-bold\">     29</span> model <span style=\"color:rgb(98,98,98)\">=</span> tl<span style=\"color:rgb(98,98,98)\">.</span>Parallel(q_processor, q_processor)\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/layers/combinators.py:59</span>, in <span class=\"ansi-cyan-fg\">Serial.__init__</span><span class=\"ansi-blue-fg\">(self, name, sublayers_to_print, *sublayers)</span>\n<span class=\"ansi-green-fg ansi-bold\">     55</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">__init__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, <span style=\"color:rgb(98,98,98)\">*</span>sublayers, name<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, sublayers_to_print<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>):\n<span class=\"ansi-green-fg ansi-bold\">     56</span>   <span style=\"color:rgb(0,135,0)\">super</span>()<span style=\"color:rgb(98,98,98)\">.</span><span style=\"color:rgb(0,0,255)\">__init__</span>(\n<span class=\"ansi-green-fg ansi-bold\">     57</span>       name<span style=\"color:rgb(98,98,98)\">=</span>name, sublayers_to_print<span style=\"color:rgb(98,98,98)\">=</span>sublayers_to_print)\n<span class=\"ansi-green-fg\">---&gt; 59</span>   sublayers <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">_ensure_flat</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">sublayers</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     60</span>   <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_sublayers <span style=\"color:rgb(98,98,98)\">=</span> sublayers\n<span class=\"ansi-green-fg ansi-bold\">     61</span>   <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_n_layers <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">len</span>(sublayers)\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/layers/combinators.py:1110</span>, in <span class=\"ansi-cyan-fg\">_ensure_flat</span><span class=\"ansi-blue-fg\">(layers)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1108</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> obj <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> layers:\n<span class=\"ansi-green-fg ansi-bold\">   1109</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(obj, base<span style=\"color:rgb(98,98,98)\">.</span>Layer):\n<span class=\"ansi-green-fg\">-&gt; 1110</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ValueError</span>(\n<span class=\"ansi-green-fg ansi-bold\">   1111</span>         <span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Found nonlayer object (</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>obj<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">) in layers: </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>layers<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">   1112</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> layers\n\n<span class=\"ansi-red-fg\">ValueError</span>: Found nonlayer object (None) in layers: [None, None, None, None]</pre>\n```\n:::\n\n:::\n:::\n\n\n<a name='4.2'></a>\n\n### 4.2 Classify\n\nTo determine the accuracy of the model, we will utilize the test set that was configured earlier. While in training we used only positive examples, the test data, Q1_test, Q2_test and y_test, is setup as pairs of questions, some of which are duplicates some are not. \nThis routine will run all the test question pairs through the model, compute the cosine simlarity of each pair, threshold it and compare the result to  y_test - the correct response from the data set. The results are accumulated to produce an accuracy.\n\n\n\n### Exercise 05 {#ex05}\n\n**Instructions**  \n\n - Loop through the incoming data in batch_size chunks\n - Use the data generator to load q1, q2 a batch at a time. **Don't forget to set shuffle=False!**\n - copy a batch_size chunk of y into y_test\n - compute v1, v2 using the model\n - for each element of the batch\n        - compute the cos similarity of each pair of entries, v1[j],v2[j]\n        - determine if d > threshold\n        - increment accuracy if that result matches the expected results (y_test[j])\n - compute the final accuracy and return\n \nDue to some limitations of this environment, running classify multiple times may result in the kernel failing. If that happens *Restart Kernal & clear output* and then run from the top. During development, consider using a smaller set of data to reduce the number of calls to model(). \n\n::: {#6186c70a .cell execution_count=27}\n``` {.python .cell-code}\n# UNQ_C5 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: classify\ndef classify(test_Q1, test_Q2, y, threshold, model, vocab, data_generator=data_generator, batch_size=64):\n    \"\"\"Function to test the accuracy of the model.\n\n    Args:\n        test_Q1 (numpy.ndarray): Array of Q1 questions.\n        test_Q2 (numpy.ndarray): Array of Q2 questions.\n        y (numpy.ndarray): Array of actual target.\n        threshold (float): Desired threshold.\n        model (trax.layers.combinators.Parallel): The Siamese model.\n        vocab (collections.defaultdict): The vocabulary used.\n        data_generator (function): Data generator function. Defaults to data_generator.\n        batch_size (int, optional): Size of the batches. Defaults to 64.\n\n    Returns:\n        float: Accuracy of the model.\n    \"\"\"\n    accuracy = 0\n    ### START CODE HERE (Replace instances of 'None' with your code) ###\n    for i in range(0, len(test_Q1), batch_size):\n        # Call the data generator (built in Ex 01) with shuffle=False using next()\n        # use batch size chuncks of questions as Q1 & Q2 arguments of the data generator. e.g x[i:i + batch_size]\n        # Hint: use `vocab['<PAD>']` for the `pad` argument of the data generator\n        q1, q2 = None\n        # use batch size chuncks of actual output targets (same syntax as example above)\n        y_test = None\n        # Call the model\n        v1, v2 = None\n\n        for j in range(batch_size):\n            # take dot product to compute cos similarity of each pair of entries, v1[j], v2[j]\n            # don't forget to transpose the second argument\n            d = None\n            # is d greater than the threshold?\n            res = None\n            # increment accurancy if y_test is equal `res`\n            accuracy += None\n    # compute accuracy using accuracy and total length of test questions\n    accuracy = None\n    ### END CODE HERE ###\n    \n    return accuracy\n```\n:::\n\n\n::: {#21eb1c78 .cell execution_count=28}\n``` {.python .cell-code}\n# this takes around 1 minute\naccuracy = classify(Q1_test,Q2_test, y_test, 0.7, model, vocab, batch_size = 512) \nprint(\"Accuracy\", accuracy)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[28], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># this takes around 1 minute</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> accuracy <span style=\"color:rgb(98,98,98)\">=</span> classify(<span class=\"ansi-yellow-bg\">Q1_test</span>,Q2_test, y_test, <span style=\"color:rgb(98,98,98)\">0.7</span>, model, vocab, batch_size <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">512</span>) \n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Accuracy</span><span style=\"color:rgb(175,0,0)\">\"</span>, accuracy)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Q1_test' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Expected Result**  \nAccuracy ~0.69\n\n# Part 5: Testing with your own questions {#5}\n\nIn this section you will test the model with your own questions. You will write a function `predict` which takes two questions as input and returns $1$ or $0$ depending on whether the question pair is a duplicate or not.   \n\nBut first, we build a reverse vocabulary that allows to map encoded questions back to words: \n\nWrite a function `predict`that takes in two questions, the model, and the vocabulary and returns whether the questions are duplicates ($1$) or not duplicates ($0$) given a similarity threshold. \n\n\n### Exercise 06 {#ex06}\n\n\n**Instructions:** \n- Tokenize your question using `nltk.word_tokenize` \n- Create Q1,Q2 by encoding your questions as a list of numbers using vocab\n- pad Q1,Q2 with next(data_generator([Q1], [Q2],1,vocab['<PAD>']))\n- use model() to create v1, v2\n- compute the cosine similarity (dot product) of v1, v2\n- compute res by comparing d to the threshold\n\n::: {#ae1a03ac .cell execution_count=29}\n``` {.python .cell-code}\n# UNQ_C6 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: predict\ndef predict(question1, question2, threshold, model, vocab, data_generator=data_generator, verbose=False):\n    \"\"\"Function for predicting if two questions are duplicates.\n\n    Args:\n        question1 (str): First question.\n        question2 (str): Second question.\n        threshold (float): Desired threshold.\n        model (trax.layers.combinators.Parallel): The Siamese model.\n        vocab (collections.defaultdict): The vocabulary used.\n        data_generator (function): Data generator function. Defaults to data_generator.\n        verbose (bool, optional): If the results should be printed out. Defaults to False.\n\n    Returns:\n        bool: True if the questions are duplicates, False otherwise.\n    \"\"\"\n    ### START CODE HERE (Replace instances of 'None' with your code) ###\n    # use `nltk` word tokenize function to tokenize\n    q1 = None  # tokenize\n    q2 = None  # tokenize\n    Q1, Q2 = [], []\n    for word in q1:  # encode q1\n        # increment by checking the 'word' index in `vocab`\n        Q1 += None\n    for word in q2:  # encode q2\n        # increment by checking the 'word' index in `vocab`\n        Q2 += None\n        \n    # Call the data generator (built in Ex 01) using next()\n    # pass [Q1] & [Q2] as Q1 & Q2 arguments of the data generator. Set batch size as 1\n    # Hint: use `vocab['<PAD>']` for the `pad` argument of the data generator\n    Q1, Q2 = None\n    # Call the model\n    v1, v2 = None\n    # take dot product to compute cos similarity of each pair of entries, v1, v2\n    # don't forget to transpose the second argument\n    d = None\n    # is d greater than the threshold?\n    res = None\n    \n    ### END CODE HERE ###\n    \n    if(verbose):\n        print(\"Q1  = \", Q1, \"\\nQ2  = \", Q2)\n        print(\"d   = \", d)\n        print(\"res = \", res)\n\n    return res\n```\n:::\n\n\n::: {#b650da17 .cell execution_count=30}\n``` {.python .cell-code}\n# Feel free to try with your own questions\nquestion1 = \"When will I see you?\"\nquestion2 = \"When can I see you again?\"\n# 1 means it is duplicated, 0 otherwise\npredict(question1 , question2, 0.7, model, vocab, verbose = True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[30], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> question2 <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">When can I see you again?</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># 1 means it is duplicated, 0 otherwise</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> predict(question1 , question2, <span style=\"color:rgb(98,98,98)\">0.7</span>, <span class=\"ansi-yellow-bg\">model</span>, vocab, verbose <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected Output\nIf input is:\n```CPP\nquestion1 = \"When will I see you?\"\nquestion2 = \"When can I see you again?\"\n```\n\nOutput is (d may vary a bit):\n```CPP\nQ1  =  [[585  76   4  46  53  21   1   1]] \nQ2  =  [[ 585   33    4   46   53 7280   21    1]]\nd   =  0.88113236\nres =  True\nTrue\n```\n\n::: {#96df7888 .cell execution_count=31}\n``` {.python .cell-code}\n# Feel free to try with your own questions\nquestion1 = \"Do they enjoy eating the dessert?\"\nquestion2 = \"Do they like hiking in the desert?\"\n# 1 means it is duplicated, 0 otherwise\npredict(question1 , question2, 0.7, model, vocab, verbose=True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[31], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> question2 <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Do they like hiking in the desert?</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># 1 means it is duplicated, 0 otherwise</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> predict(question1 , question2, <span style=\"color:rgb(98,98,98)\">0.7</span>, <span class=\"ansi-yellow-bg\">model</span>, vocab, verbose<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected output\n\nIf input is:\n```CPP\nquestion1 = \"Do they enjoy eating the dessert?\"\nquestion2 = \"Do they like hiking in the desert?\"\n```\n\nOutput  (d may vary a bit):\n\n```CPP\nQ1  =  [[  443  1145  3159  1169    78 29017    21     1]] \nQ2  =  [[  443  1145    60 15302    28    78  7431    21]]\nd   =  0.477536\nres =  False\nFalse\n```\n\nYou can see that the Siamese network is capable of catching complicated structures. Concretely it can identify question duplicates although the questions do not have many words in common. \n \n\n<a name='6'></a>\n\n###  <span style=\"color:blue\"> On Siamese networks </span>\n\nSiamese networks are important and useful. Many times there are several questions that are already asked in quora, or other platforms and you can use Siamese networks to avoid question duplicates. \n\nCongratulations, you have now built a powerful system that can recognize question duplicates. In the next course we will use transformers for machine translation, summarization, question answering, and chatbots. \n\n",
    "supporting": [
      "assignment_files"
    ],
    "filters": [],
    "includes": {}
  }
}