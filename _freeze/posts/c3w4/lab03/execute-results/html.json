{
  "hash": "9a02921dd3b5a4e447f3bd3b5b62c7a4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndate: 2020-10-24\ntitle: 'Evaluate a Siamese model: Ungraded Lecture Notebook'\nsubtitle: \"Sequence Models\"\n#description: \"we cover Neural networks for deep learning, then build a tweet classifier that places tweets into positive or negative sentiment categories, using a DNN.\"\ncategories: \n  - NLP \n  - Coursera \n  - Lab\n  - Sequence Models\njupyter: python3\n---\n\n\n\n\n![course banner](/images/Course-Logo-3-3.webp){.column-margin .nolightbox} \n\n::: {#304fd770 .cell execution_count=1}\n``` {.python .cell-code}\nimport trax.fastmath.numpy as np\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n2025-02-06 00:28:40.603851: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1738794520.619777  686670 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1738794520.624143  686670 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n```\n:::\n:::\n\n\n## Inspecting the necessary elements\n\nIn this lecture notebook you will learn how to evaluate a Siamese model using the accuracy metric. Because there are many steps before evaluating a Siamese network (as you will see in this week's assignment) the necessary elements and variables are replicated here using real data from the assignment:\n\n   - `q1`: vector with dimension `(batch_size X max_length)` containing first questions to compare in the test set.\n   - `q2`: vector with dimension `(batch_size X max_length)` containing second questions to compare in the test set.\n   \n   **Notice that for each pair of vectors within a batch $([q1_1, q1_2, q1_3, ...]$, $[q2_1, q2_2,q2_3, ...])$  $q1_i$ is associated to $q2_k$.**\n        \n        \n   - `y_test`: 1 if  $q1_i$ and $q2_k$ are duplicates, 0 otherwise.\n   \n   - `v1`: output vector from the model's prediction associated with the first questions.\n   - `v2`: output vector from the model's prediction associated with the second questions.\n\nYou can inspect each one of these variables by running the following cells:\n\n::: {#e51067dd .cell execution_count=2}\n``` {.python .cell-code}\nq1 = np.load('q1.npy')\nprint(f'q1 has shape: {q1.shape} \\n\\nAnd it looks like this: \\n\\n {q1}\\n\\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nq1 has shape: (512, 64) \n\nAnd it looks like this: \n\n [[ 32  38   4 ...   1   1   1]\n [ 30 156  78 ...   1   1   1]\n [ 32  38   4 ...   1   1   1]\n ...\n [ 32  33   4 ...   1   1   1]\n [ 30 156 317 ...   1   1   1]\n [ 30 156   6 ...   1   1   1]]\n\n\n```\n:::\n:::\n\n\nNotice those 1s on the right-hand side?  \n\nHope you remember that the value of `1` was used for padding. \n\n::: {#c31ba3af .cell execution_count=3}\n``` {.python .cell-code}\nq2 = np.load('q2.npy')\nprint(f'q2 has shape: {q2.shape} \\n\\nAnd looks like this: \\n\\n {q2}\\n\\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nq2 has shape: (512, 64) \n\nAnd looks like this: \n\n [[   30   156    78 ...     1     1     1]\n [  283   156    78 ...     1     1     1]\n [   32    38     4 ...     1     1     1]\n ...\n [   32    33     4 ...     1     1     1]\n [   30   156    78 ...     1     1     1]\n [   30   156 10596 ...     1     1     1]]\n\n\n```\n:::\n:::\n\n\n::: {#b6adcf33 .cell execution_count=4}\n``` {.python .cell-code}\ny_test = np.load('y_test.npy')\nprint(f'y_test has shape: {y_test.shape} \\n\\nAnd looks like this: \\n\\n {y_test}\\n\\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ny_test has shape: (512,) \n\nAnd looks like this: \n\n [0 1 1 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 1 0 0 0 0 1 0 1 1 0 0 0\n 0 0 0 1 0 0 0 1 0 0 0 0 1 0 1 1 1 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 0\n 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 1 0 0 0 1 0 1 0 0 0 0 1 1 1 0 1 0 1 1 0 0\n 0 1 0 0 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 1 1 0 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0\n 1 0 1 1 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 1 0 1 0 1 1 0 1 1 1\n 1 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 1 0 0 1 1 0 0 0 1 0 1 0 0 0 0 1 0 0 1\n 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n 1 0 0 0 0 1 0 0 0 0 1 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 1\n 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 1 0 1 0 1 1 1 0 0\n 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 0 0\n 0 0 1 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 1 1 0 1 0 1 1 1 0\n 1 1 0 1 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 1 1 0 1 1 1 0 0 0 1 0 1 1 1\n 0 1 0 0 0 0 0 0 0 1 1 1 0 0 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1\n 1 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n\n\n```\n:::\n:::\n\n\n::: {#1215d8bc .cell execution_count=5}\n``` {.python .cell-code}\nv1 = np.load('v1.npy')\nprint(f'v1 has shape: {v1.shape} \\n\\nAnd looks like this: \\n\\n {v1}\\n\\n')\nv2 = np.load('v2.npy')\nprint(f'v2 has shape: {v2.shape} \\n\\nAnd looks like this: \\n\\n {v2}\\n\\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nv1 has shape: (512, 128) \n\nAnd looks like this: \n\n [[ 0.01273625 -0.1496373  -0.01982759 ...  0.02205012 -0.00169148\n  -0.01598107]\n [-0.05592084  0.05792497 -0.02226785 ...  0.08156938 -0.02570007\n  -0.00503111]\n [ 0.05686752  0.0294889   0.04522024 ...  0.03141788 -0.08459651\n  -0.00968536]\n ...\n [ 0.15115018  0.17791134  0.02200656 ... -0.00851707  0.00571415\n  -0.00431194]\n [ 0.06995274  0.13110274  0.0202337  ... -0.00902792 -0.01221745\n   0.00505962]\n [-0.16043712 -0.11899089 -0.15950686 ...  0.06544471 -0.01208312\n  -0.01183368]]\n\n\nv2 has shape: (512, 128) \n\nAnd looks like this: \n\n [[ 0.07437647  0.02804951 -0.02974014 ...  0.02378932 -0.01696189\n  -0.01897198]\n [ 0.03270066  0.15122835 -0.02175895 ...  0.00517202 -0.14617395\n   0.00204823]\n [ 0.05635608  0.05454165  0.042222   ...  0.03831453 -0.05387777\n  -0.01447786]\n ...\n [ 0.04727105 -0.06748016  0.04194937 ...  0.07600753 -0.03072828\n   0.00400715]\n [ 0.00269269  0.15222628  0.01714724 ...  0.01482705 -0.0197884\n   0.01389528]\n [-0.15475044 -0.15718803 -0.14732707 ...  0.04299919 -0.01070975\n  -0.01318042]]\n\n\n```\n:::\n:::\n\n\n## Calculating the accuracy\n\nYou will calculate the accuracy by iterating over the test set and checking if the model predicts right or wrong.\n\nThe first step is to set the accuracy to zero:\n\n::: {#27792127 .cell execution_count=6}\n``` {.python .cell-code}\naccuracy = 0\n```\n:::\n\n\nYou will also need the `batch size` and the `threshold` that determines if two questions are the same or not. \n\n**Note :A higher threshold means that only very similar questions will be considered as the same question.**\n\n::: {#0249883f .cell execution_count=7}\n``` {.python .cell-code}\nbatch_size = 512 # Note: The max it can be is y_test.shape[0] i.e all the samples in test data\nthreshold = 0.7 # You can play around with threshold and then see the change in accuracy.\n```\n:::\n\n\nIn the assignment you will iterate over multiple batches of data but since this is a simplified version only one batch is provided. \n\n**Note: Be careful with the indices when slicing the test data in the assignment!**\n\nThe process is pretty straightforward:\n   - Iterate over each one of the elements in the batch\n   - Compute the cosine similarity between the predictions\n       - For computing the cosine similarity, the two output vectors should have been normalized using L2 normalization meaning their magnitude will be 1. This has been taken care off by the Siamese network you will build in the assignment. Hence the cosine similarity here is just dot product between two vectors. You can check by implementing the usual cosine similarity formula and check if this holds or not.\n   - Determine if this value is greater than the threshold (If it is, consider the two questions as the same and return 1 else 0)\n   - Compare against the actual target and if the prediction matches, add 1 to the accuracy (increment the correct prediction counter)\n   - Divide the accuracy by the number of processed elements\n\n::: {#ec56e5a8 .cell execution_count=8}\n``` {.python .cell-code}\nfor j in range(batch_size):        # Iterate over each one of the elements in the batch\n    \n    d = np.dot(v1[j],v2[j])        # Compute the cosine similarity between the predictions as l2 normalized, ||v1[j]||==||v2[j]||==1 so only dot product is needed\n    res = d > threshold            # Determine if this value is greater than the threshold (if it is consider the two questions as the same)\n    accuracy += (y_test[j] == res) # Compare against the actual target and if the prediction matches, add 1 to the accuracy\n\naccuracy = accuracy / batch_size   # Divide the accuracy by the number of processed elements\n```\n:::\n\n\n::: {#983af929 .cell execution_count=9}\n``` {.python .cell-code}\nprint(f'The accuracy of the model is: {accuracy}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe accuracy of the model is: 0.7421875\n```\n:::\n:::\n\n\n**Congratulations on finishing this lecture notebook!** \n\nNow you should have a clearer understanding of how to evaluate your Siamese language models using the accuracy metric. \n\n**Keep it up!**\n\n",
    "supporting": [
      "lab03_files"
    ],
    "filters": [],
    "includes": {}
  }
}