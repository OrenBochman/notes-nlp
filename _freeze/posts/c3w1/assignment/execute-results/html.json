{
  "hash": "da5ba1332cea4dc3774cb4035d58b9e0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Assignment 1: Sentiment with Deep Neural Networks'\nsubtitle: \"Sequence Models\"\ncategories: \n  - NLP \n  - Coursera \n  - Lab\n  - Sequence Models\njupyter: python3\nexecute: \n    error: true\n---\n\n::: {#fig-00 .column-margin .nolightbox}\n![course banner](/images/Course-Logo-2-3.webp)\n:::\n\n\n::: {.callout}\n## Honor code alert\n\nDue to the Coursera Honor Code, I cannot provide the solutions to the assignments. \n\n- This notebook is the original notebook provided by the course\n- It is setup to run without stopping for errors. \n- It is also likely to be out of date as the course has had some updates since I took it.\n- Although I aced the course this assignment was the most time consuming.\n- Good luck with the assignment it should make we a better programmer.\n- It is also a good idea to go over it a few times until we can do it easily.\n:::\n\n\nWelcome to the first assignment of course 3. In this assignment, you will explore sentiment analysis using deep neural networks. \n\n## Outline\n\n- [Part 1:  Import libraries and try out Trax](#1)\n- [Part 2:  Importing the data](#2)\n    - [2.1  Loading in the data](#2.1)\n    - [2.2  Building the vocabulary](#2.2)\n    - [2.3  Converting a tweet to a tensor](#2.3)\n        - [Exercise 01](#ex01)\n    - [2.4  Creating a batch generator](#2.4)\n        - [Exercise 02](#ex02)\n- [Part 3:  Defining classes](#3)\n    - [3.1  ReLU class](#3.1)\n        - [Exercise 03](#ex03)\n    - [3.2  Dense class ](#3.2)\n        - [Exercise 04](#ex04)\n    - [3.3  Model](#3.3)\n        - [Exercise 05](#ex05)\n- [Part 4:  Training](#4)\n    - [4.1  Training the model](#4.1)\n        - [Exercise 06](#ex06)\n    - [4.2  Practice Making a prediction](#4.2)\n- [Part 5:  Evaluation  ](#5)\n    - [5.1  Computing the accuracy on a batch](#5.1)\n        - [Exercise 07](#ex07)\n    - [5.2  Testing your model on Validation Data](#5.2)\n        - [Exercise 08](#ex08)\n- [Part 6:  Testing with your own input](#6)\n\n\nIn course 1, you implemented **Logistic regression** and **Naive Bayes** for sentiment analysis. However if you were to give your old models an example like:\n\n::: {style='text-align: center'}\n[**This movie was almost good.**]{style='color:blue'}\n:::\n\nYour model would have predicted a positive sentiment for that review. However, that sentence has a **negative sentiment** and indicates that the movie was **not good**. To solve those kinds of misclassifications, you will write a program that uses deep neural networks to identify sentiment in text. By completing this assignment, you will: \n\n- Understand how you can build/design a model using layers\n- Train a model using a training loop\n- Use a binary cross-entropy loss function\n- Compute the accuracy of your model\n- Predict using your own input\n\nAs you can tell, this model follows a similar structure to the one you previously implemented in the second course of this specialization. \n- Indeed most of the deep nets you will be implementing will have a similar structure. The only thing that changes is the model architecture, the inputs, and the outputs. Before starting the assignment, we will introduce you to the Google library `trax` that we use for building and training models.\n\n\nNow we will show you how to compute the gradient of a certain function `f` by just using `  .grad(f)`. \n\n- Trax source code can be found on Github: [Trax](https://github.com/google/trax)\n- The Trax code also uses the JAX library: [JAX](https://jax.readthedocs.io/en/latest/index.html)\n\n# Part 1:  Import libraries and try out Trax {#1}\n\n- Let's import libraries and look at an example of using the Trax library.\n\n::: {#34fd5d42 .cell execution_count=1}\n``` {.python .cell-code}\nimport os \nimport random as rnd\n\n# import relevant libraries\nimport trax\n\n# set random seeds to make this notebook easier to replicate\ntrax.supervised.trainer_lib.init_random_number_generators(31)\n\n# import trax.fastmath.numpy\nimport trax.fastmath.numpy as np\n\n# import trax.layers\nfrom trax import layers as tl\n\n# import Layer from the utils.py file\nfrom utils import Layer, load_tweets, process_tweet\n#from utils import \n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AttributeError</span>                            Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[766], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">random</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">rnd</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># import relevant libraries</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># set random seeds to make this notebook easier to replicate</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> trax<span style=\"color:rgb(98,98,98)\">.</span>supervised<span style=\"color:rgb(98,98,98)\">.</span>trainer_lib<span style=\"color:rgb(98,98,98)\">.</span>init_random_number_generators(<span style=\"color:rgb(98,98,98)\">31</span>)\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/__init__.py:18</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># coding=utf-8</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright 2020 The Trax Authors.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     13</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># See the License for the specific language governing permissions and</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># limitations under the License.</span>\n<span class=\"ansi-green-fg ansi-bold\">     16</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Trax top level import.\"\"\"</span>\n<span class=\"ansi-green-fg\">---&gt; 18</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> fastmath\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> layers\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> models\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/fastmath/__init__.py:20</span>\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> jax <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> jax_math\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> numpy <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> numpy_math\n<span class=\"ansi-green-fg\">---&gt; 20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> tf <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> tf_math\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> nested_map\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> nested_map_multiarg\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/fastmath/tf.py:22</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tensorflow</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">compat</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">v2</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf</span>\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">shapes</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> ShapeDtype\n<span class=\"ansi-green-fg\">---&gt; 22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf_numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> extensions <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> tf_np_extensions\n<span class=\"ansi-green-fg ansi-bold\">     23</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf_numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> numpy <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> tf_np\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">tf_abstract_eval</span>(f):\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/tf_numpy/extensions/__init__.py:23</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">__future__</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> print_function\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># pylint: disable=wildcard-import</span>\n<span class=\"ansi-green-fg\">---&gt; 23</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf_numpy</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">extensions</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">extensions</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">     24</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># pylint: enable=wildcard-import</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/tf_numpy/extensions/extensions.py:727</span>\n<span class=\"ansi-green-fg ansi-bold\">    721</span>   states <span style=\"color:rgb(98,98,98)\">=</span> tf<span style=\"color:rgb(98,98,98)\">.</span>nest<span style=\"color:rgb(98,98,98)\">.</span>map_structure(_seed2key, states)\n<span class=\"ansi-green-fg ansi-bold\">    722</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> states\n<span class=\"ansi-green-fg ansi-bold\">    725</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">uniform</span>(key,\n<span class=\"ansi-green-fg ansi-bold\">    726</span>             shape,\n<span class=\"ansi-green-fg\">--&gt; 727</span>             dtype<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">tf_np</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">random</span><span style=\"color:rgb(98,98,98)\">.</span>DEFAULT_RANDN_DTYPE,\n<span class=\"ansi-green-fg ansi-bold\">    728</span>             minval<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.</span>,\n<span class=\"ansi-green-fg ansi-bold\">    729</span>             maxval<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>):\n<span class=\"ansi-green-fg ansi-bold\">    730</span> <span style=\"color:rgb(188,188,188)\">  </span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Sample uniform random values in range [`minval`, `maxval`).</span>\n<span class=\"ansi-green-fg ansi-bold\">    731</span> \n<span class=\"ansi-green-fg ansi-bold\">    732</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">  Args:</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    741</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    is sampled uniformly randomly in range [`minval`, `maxval`).</span>\n<span class=\"ansi-green-fg ansi-bold\">    742</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">  \"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    743</span>   key <span style=\"color:rgb(98,98,98)\">=</span> tf_np<span style=\"color:rgb(98,98,98)\">.</span>asarray(key, dtype<span style=\"color:rgb(98,98,98)\">=</span>_RNG_KEY_DTYPE)\n\n<span class=\"ansi-red-fg\">AttributeError</span>: module 'trax.tf_numpy.numpy' has no attribute 'random'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f3e62871 .cell execution_count=2}\n``` {.python .cell-code}\n# Create an array using trax.fastmath.numpy\na = np.array(5.0)\n\n# View the returned array\ndisplay(a)\n\nprint(type(a))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[767], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Create an array using trax.fastmath.numpy</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> a <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\">.</span>array(<span style=\"color:rgb(98,98,98)\">5.0</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View the returned array</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> display(a)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'np' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNotice that trax.fastmath.numpy returns a DeviceArray from the jax library.\n\n::: {#61107a0e .cell execution_count=3}\n``` {.python .cell-code}\n# Define a function that will use the trax.fastmath.numpy array\ndef f(x):\n    \n    # f = x^2\n    return (x**2)\n```\n:::\n\n\n::: {#87aa522a .cell execution_count=4}\n``` {.python .cell-code}\n# Call the function\nprint(f\"f(a) for a={a} is {f(a)}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[769], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Call the function</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">f(a) for a=</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span><span class=\"ansi-yellow-bg\">a</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\"> is </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>f(a)<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'a' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe gradient (derivative) of function `f` with respect to its input `x` is the derivative of $x^2$.\n- The derivative of $x^2$ is $2x$.  \n- When x is 5, then $2x=10$.\n\nYou can calculate the gradient of a function by using `trax.fastmath.grad(fun=)` and passing in the name of the function.\n- In this case the function you want to take the gradient of is `f`.\n- The object returned (saved in `grad_f` in this example) is a function that can calculate the gradient of f for a given trax.fastmath.numpy array.\n\n::: {#f31acd1a .cell execution_count=5}\n``` {.python .cell-code}\n# Directly use trax.fastmath.grad to calculate the gradient (derivative) of the function\ngrad_f = trax.fastmath.grad(fun=f)  # df / dx - Gradient of function f(x) with respect to x\n\n# View the type of the retuned object (it's a function)\ntype(grad_f)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[770], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Directly use trax.fastmath.grad to calculate the gradient (derivative) of the function</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> grad_f <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">trax</span><span style=\"color:rgb(98,98,98)\">.</span>fastmath<span style=\"color:rgb(98,98,98)\">.</span>grad(fun<span style=\"color:rgb(98,98,98)\">=</span>f)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># df / dx - Gradient of function f(x) with respect to x</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View the type of the retuned object (it's a function)</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"color:rgb(0,135,0)\">type</span>(grad_f)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'trax' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b02a39b3 .cell execution_count=6}\n``` {.python .cell-code}\n# Call the newly created function and pass in a value for x (the DeviceArray stored in 'a')\ngrad_calculation = grad_f(a)\n\n# View the result of calling the grad_f function\ndisplay(grad_calculation)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[771], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Call the newly created function and pass in a value for x (the DeviceArray stored in 'a')</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> grad_calculation <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">grad_f</span>(a)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View the result of calling the grad_f function</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> display(grad_calculation)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'grad_f' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe function returned by trax.fastmath.grad takes in x=5 and calculates the gradient of f, which is 2*x, which is 10. The value is also stored as a DeviceArray from the jax library.\n\n# Part 2:  Importing the data {#2}\n\n## 2.1  Loading in the data {#2.1}\n\nImport the data set.  \n- You may recognize this from earlier assignments in the specialization.\n- Details of process_tweet function are available in utils.py file\n\n::: {#499cc5ff .cell execution_count=7}\n``` {.python .cell-code}\n## DO NOT EDIT THIS CELL\n\n# Import functions from the utils.py file\n\nimport numpy as np\n\n# Load positive and negative tweets\nall_positive_tweets, all_negative_tweets = load_tweets()\n\n# View the total number of positive and negative tweets.\nprint(f\"The number of positive tweets: {len(all_positive_tweets)}\")\nprint(f\"The number of negative tweets: {len(all_negative_tweets)}\")\n\n# Split positive set into validation and training\nval_pos   = all_positive_tweets[4000:] # generating validation set for positive tweets\ntrain_pos  = all_positive_tweets[:4000]# generating training set for positive tweets\n\n# Split negative set into validation and training\nval_neg   = all_negative_tweets[4000:] # generating validation set for negative tweets\ntrain_neg  = all_negative_tweets[:4000] # generating training set for nagative tweets\n\n# Combine training data into one set\ntrain_x = train_pos + train_neg \n\n# Combine validation data into one set\nval_x  = val_pos + val_neg\n\n# Set the labels for the training set (1 for positive, 0 for negative)\ntrain_y = np.append(np.ones(len(train_pos)), np.zeros(len(train_neg)))\n\n# Set the labels for the validation set (1 for positive, 0 for negative)\nval_y  = np.append(np.ones(len(val_pos)), np.zeros(len(val_neg)))\n\nprint(f\"length of train_x {len(train_x)}\")\nprint(f\"length of val_x {len(val_x)}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[772], line 8</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Load positive and negative tweets</span>\n<span class=\"ansi-green-fg\">----&gt; 8</span> all_positive_tweets, all_negative_tweets <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">load_tweets</span>()\n<span class=\"ansi-green-fg ansi-bold\">     10</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View the total number of positive and negative tweets.</span>\n<span class=\"ansi-green-fg ansi-bold\">     11</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The number of positive tweets: </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span><span style=\"color:rgb(0,135,0)\">len</span>(all_positive_tweets)<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'load_tweets' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNow import a function that processes tweets (we've provided this in the utils.py file).\n- `process_tweets' removes unwanted characters e.g. hashtag, hyperlinks, stock tickers from tweet.\n- It also returns a list of words (it tokenizes the original string).\n\n::: {#eaf37dc9 .cell execution_count=8}\n``` {.python .cell-code}\n# Import a function that processes the tweets\n# from utils import process_tweet\n\n# Try out function that processes tweets\nprint(\"original tweet at training position 0\")\nprint(train_pos[0])\n\nprint(\"Tweet at training position 0 after processing:\")\nprocess_tweet(train_pos[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\noriginal tweet at training position 0\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[773], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Import a function that processes the tweets</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># from utils import process_tweet</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> \n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Try out function that processes tweets</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">original tweet at training position 0</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">----&gt; 6</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">train_pos</span>[<span style=\"color:rgb(98,98,98)\">0</span>])\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Tweet at training position 0 after processing:</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      9</span> process_tweet(train_pos[<span style=\"color:rgb(98,98,98)\">0</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_pos' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNotice that the function `process_tweet` keeps key words, removes the hash # symbol, and ignores usernames (words that begin with '@').  It also returns a list of the words.\n\n\n## 2.2  Building the vocabulary {#2.2}\n\nNow build the vocabulary.\n- Map each word in each tweet to an integer (an \"index\"). \n- The following code does this for you, but please read it and understand what it's doing.\n- Note that you will build the vocabulary based on the training data. \n- To do so, you will assign an index to everyword by iterating over your training set.\n\nThe vocabulary will also include some special tokens\n- `__PAD__`: padding\n- `</e>`: end of line\n- `__UNK__`: a token representing any word that is not in the vocabulary.\n\n::: {#160a1db4 .cell execution_count=9}\n``` {.python .cell-code}\n# Build the vocabulary\n# Unit Test Note - There is no test set here only train/val\n\n# Include special tokens \n# started with pad, end of line and unk tokens\nVocab = {'__PAD__': 0, '__</e>__': 1, '__UNK__': 2} \n\n# Note that we build vocab using training data\nfor tweet in train_x: \n    processed_tweet = process_tweet(tweet)\n    for word in processed_tweet:\n        if word not in Vocab: \n            Vocab[word] = len(Vocab)\n    \nprint(\"Total words in vocab are\",len(Vocab))\ndisplay(Vocab)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[774], line 9</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> Vocab <span style=\"color:rgb(98,98,98)\">=</span> {<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">__PAD__</span><span style=\"color:rgb(175,0,0)\">'</span>: <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">__&lt;/e&gt;__</span><span style=\"color:rgb(175,0,0)\">'</span>: <span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">__UNK__</span><span style=\"color:rgb(175,0,0)\">'</span>: <span style=\"color:rgb(98,98,98)\">2</span>} \n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Note that we build vocab using training data</span>\n<span class=\"ansi-green-fg\">----&gt; 9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> tweet <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">train_x</span>: \n<span class=\"ansi-green-fg ansi-bold\">     10</span>     processed_tweet <span style=\"color:rgb(98,98,98)\">=</span> process_tweet(tweet)\n<span class=\"ansi-green-fg ansi-bold\">     11</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> word <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> processed_tweet:\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_x' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe dictionary `Vocab` will look like this:\n```CPP\n{'__PAD__': 0,\n '__</e>__': 1,\n '__UNK__': 2,\n 'followfriday': 3,\n 'top': 4,\n 'engag': 5,\n ...\n```\n\n- Each unique word has a unique integer associated with it.\n- The total number of words in Vocab: 9088\n\n\n## 2.3  Converting a tweet to a tensor {#2.3}\n\nWrite a function that will convert each tweet to a tensor (a list of unique integer IDs representing the processed tweet).\n- Note, the returned data type will be a **regular Python `list()`**\n    - You won't use TensorFlow in this function\n    - You also won't use a numpy array\n    - You also won't use trax.fastmath.numpy array\n- For words in the tweet that are not in the vocabulary, set them to the unique ID for the token `__UNK__`.\n\n##### Example\nInput a tweet:\n```CPP\n'@happypuppy, is Maria happy?'\n```\n\nThe tweet_to_tensor will first conver the tweet into a list of tokens (including only relevant words)\n```CPP\n['maria', 'happi']\n```\n\nThen it will convert each word into its unique integer\n\n```CPP\n[2, 56]\n```\n- Notice that the word \"maria\" is not in the vocabulary, so it is assigned the unique integer associated with the `__UNK__` token, because it is considered \"unknown.\"\n\n### Exercise 01 {#ex01}\n\n**Instructions:** Write a program `tweet_to_tensor` that takes in a tweet and converts it to an array of numbers. You can use the `Vocab` dictionary you just found to help create the tensor. \n\n- Use the vocab_dict parameter and not a global variable.\n- Do not hard code the integer value for the `__UNK__` token.\n\n<details>    \n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li>Map each word in tweet to corresponding token in 'Vocab'</li>\n    <li>Use Python's Dictionary.get(key,value) so that the function returns a default value if the key is not found in the dictionary.</li>\n</ul>\n</p>\n</details>\n\n::: {#7db9b92b .cell execution_count=10}\n``` {.python .cell-code}\n# UNQ_C1 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: tweet_to_tensor\ndef tweet_to_tensor(tweet, vocab_dict, unk_token='__UNK__', verbose=False):\n    '''\n    Input: \n        tweet - A string containing a tweet\n        vocab_dict - The words dictionary\n        unk_token - The special string for unknown tokens\n        verbose - Print info durign runtime\n    Output:\n        tensor_l - A python list with\n        \n    '''  \n    \n    ### START CODE HERE (Replace instances of 'None' with your code) ###\n    # Process the tweet into a list of words\n    # where only important words are kept (stop words removed)\n    word_l = None\n    \n    if verbose:\n        print(\"List of words from the processed tweet:\")\n        print(word_l)\n        \n    # Initialize the list that will contain the unique integer IDs of each word\n    tensor_l = []\n    \n    # Get the unique integer ID of the __UNK__ token\n    unk_ID = None\n    \n    if verbose:\n        print(f\"The unique integer ID for the unk_token is {unk_ID}\")\n        \n    # for each word in the list:\n    for word in word_l:\n        \n        # Get the unique integer ID.\n        # If the word doesn't exist in the vocab dictionary,\n        # use the unique ID for __UNK__ instead.\n        word_ID = None\n    ### END CODE HERE ###\n        \n        # Append the unique integer ID to the tensor list.\n        tensor_l.append(word_ID) \n    \n    return tensor_l\n```\n:::\n\n\n::: {#f99a1ab8 .cell execution_count=11}\n``` {.python .cell-code}\nprint(\"Actual tweet is\\n\", val_pos[0])\nprint(\"\\nTensor of tweet:\\n\", tweet_to_tensor(val_pos[0], vocab_dict=Vocab))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[776], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Actual tweet is</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span class=\"ansi-yellow-bg\">val_pos</span>[<span style=\"color:rgb(98,98,98)\">0</span>])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">Tensor of tweet:</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">\"</span>, tweet_to_tensor(val_pos[<span style=\"color:rgb(98,98,98)\">0</span>], vocab_dict<span style=\"color:rgb(98,98,98)\">=</span>Vocab))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'val_pos' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected output\n\n```CPP\nActual tweet is\n Bro:U wan cut hair anot,ur hair long Liao bo\nMe:since ord liao,take it easy lor treat as save $ leave it longer :)\nBro:LOL Sibei xialan\n\nTensor of tweet:\n [1065, 136, 479, 2351, 745, 8148, 1123, 745, 53, 2, 2672, 791, 2, 2, 349, 601, 2, 3489, 1017, 597, 4559, 9, 1065, 157, 2, 2]\n```\n\n::: {#bba4cdb0 .cell execution_count=12}\n``` {.python .cell-code}\n# test tweet_to_tensor\n\ndef test_tweet_to_tensor():\n    test_cases = [\n        \n        {\n            \"name\":\"simple_test_check\",\n            \"input\": [val_pos[1], Vocab],\n            \"expected\":[444, 2, 304, 567, 56, 9],\n            \"error\":\"The function gives bad output for val_pos[1]. Test failed\"\n        },\n        {\n            \"name\":\"datatype_check\",\n            \"input\":[val_pos[1], Vocab],\n            \"expected\":type([]),\n            \"error\":\"Datatype mismatch. Need only list not np.array\"\n        },\n        {\n            \"name\":\"without_unk_check\",\n            \"input\":[val_pos[1], Vocab],\n            \"expected\":6,\n            \"error\":\"Unk word check not done- Please check if you included mapping for unknown word\"\n        }\n    ]\n    count = 0\n    for test_case in test_cases:\n        \n        try:\n            if test_case['name'] == \"simple_test_check\":\n                assert test_case[\"expected\"] == tweet_to_tensor(*test_case['input'])\n                count += 1\n            if test_case['name'] == \"datatype_check\":\n                assert isinstance(tweet_to_tensor(*test_case['input']), test_case[\"expected\"])\n                count += 1\n            if test_case['name'] == \"without_unk_check\":\n                assert None not in tweet_to_tensor(*test_case['input'])\n                count += 1\n                \n            \n            \n        except:\n            print(test_case['error'])\n    if count == 3:\n        print(\"\\033[92m All tests passed\")\n    else:\n        print(count,\" Tests passed out of 3\")\ntest_tweet_to_tensor()            \n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[777], line 47</span>\n<span class=\"ansi-green-fg ansi-bold\">     45</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">     46</span>         <span style=\"color:rgb(0,135,0)\">print</span>(count,<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\"> Tests passed out of 3</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">---&gt; 47</span> <span class=\"ansi-yellow-bg\">test_tweet_to_tensor</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>            \n\nCell <span class=\"ansi-green-fg\">In[777], line 8</span>, in <span class=\"ansi-cyan-fg\">test_tweet_to_tensor</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">test_tweet_to_tensor</span>():\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     test_cases <span style=\"color:rgb(98,98,98)\">=</span> [\n<span class=\"ansi-green-fg ansi-bold\">      5</span>         \n<span class=\"ansi-green-fg ansi-bold\">      6</span>         {\n<span class=\"ansi-green-fg ansi-bold\">      7</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">name</span><span style=\"color:rgb(175,0,0)\">\"</span>:<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">simple_test_check</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg\">----&gt; 8</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">input</span><span style=\"color:rgb(175,0,0)\">\"</span>: [<span class=\"ansi-yellow-bg\">val_pos</span>[<span style=\"color:rgb(98,98,98)\">1</span>], Vocab],\n<span class=\"ansi-green-fg ansi-bold\">      9</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">expected</span><span style=\"color:rgb(175,0,0)\">\"</span>:[<span style=\"color:rgb(98,98,98)\">444</span>, <span style=\"color:rgb(98,98,98)\">2</span>, <span style=\"color:rgb(98,98,98)\">304</span>, <span style=\"color:rgb(98,98,98)\">567</span>, <span style=\"color:rgb(98,98,98)\">56</span>, <span style=\"color:rgb(98,98,98)\">9</span>],\n<span class=\"ansi-green-fg ansi-bold\">     10</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">error</span><span style=\"color:rgb(175,0,0)\">\"</span>:<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The function gives bad output for val_pos[1]. Test failed</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">     11</span>         },\n<span class=\"ansi-green-fg ansi-bold\">     12</span>         {\n<span class=\"ansi-green-fg ansi-bold\">     13</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">name</span><span style=\"color:rgb(175,0,0)\">\"</span>:<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">datatype_check</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg ansi-bold\">     14</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">input</span><span style=\"color:rgb(175,0,0)\">\"</span>:[val_pos[<span style=\"color:rgb(98,98,98)\">1</span>], Vocab],\n<span class=\"ansi-green-fg ansi-bold\">     15</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">expected</span><span style=\"color:rgb(175,0,0)\">\"</span>:<span style=\"color:rgb(0,135,0)\">type</span>([]),\n<span class=\"ansi-green-fg ansi-bold\">     16</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">error</span><span style=\"color:rgb(175,0,0)\">\"</span>:<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Datatype mismatch. Need only list not np.array</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">     17</span>         },\n<span class=\"ansi-green-fg ansi-bold\">     18</span>         {\n<span class=\"ansi-green-fg ansi-bold\">     19</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">name</span><span style=\"color:rgb(175,0,0)\">\"</span>:<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">without_unk_check</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg ansi-bold\">     20</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">input</span><span style=\"color:rgb(175,0,0)\">\"</span>:[val_pos[<span style=\"color:rgb(98,98,98)\">1</span>], Vocab],\n<span class=\"ansi-green-fg ansi-bold\">     21</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">expected</span><span style=\"color:rgb(175,0,0)\">\"</span>:<span style=\"color:rgb(98,98,98)\">6</span>,\n<span class=\"ansi-green-fg ansi-bold\">     22</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">error</span><span style=\"color:rgb(175,0,0)\">\"</span>:<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Unk word check not done- Please check if you included mapping for unknown word</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">     23</span>         }\n<span class=\"ansi-green-fg ansi-bold\">     24</span>     ]\n<span class=\"ansi-green-fg ansi-bold\">     25</span>     count <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0</span>\n<span class=\"ansi-green-fg ansi-bold\">     26</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> test_case <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> test_cases:\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'val_pos' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## 2.4  Creating a batch generator {#2.4}\n\nMost of the time in Natural Language Processing, and AI in general we use batches when training our data sets. \n- If instead of training with batches of examples, you were to train a model with one example at a time, it would take a very long time to train the model. \n- You will now build a data generator that takes in the positive/negative tweets and returns a batch of training examples. It returns the model inputs, the targets (positive or negative labels) and the weight for each target (ex: this allows us to can treat some examples as more important to get right than others, but commonly this will all be 1.0). \n\nOnce you create the generator, you could include it in a for loop\n\n```CPP\nfor batch_inputs, batch_targets, batch_example_weights in data_generator:\n    ...\n```\n\nYou can also get a single batch like this:\n\n```CPP\nbatch_inputs, batch_targets, batch_example_weights = next(data_generator)\n```\nThe generator returns the next batch each time it's called. \n- This generator returns the data in a format (tensors) that you could directly use in your model.\n- It returns a triple: the inputs, targets, and loss weights:\n-- Inputs is a tensor that contains the batch of tweets we put into the model.\n-- Targets is the corresponding batch of labels that we train to generate.\n-- Loss weights here are just 1s with same shape as targets. Next week, you will use it to mask input padding.\n\n\n### Exercise 02 {#ex02}\n\nImplement `data_generator`.\n\n::: {#f7c43832 .cell execution_count=13}\n``` {.python .cell-code}\n# UNQ_C2 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED: Data generator\ndef data_generator(data_pos, data_neg, batch_size, loop, vocab_dict, shuffle=False):\n    '''\n    Input: \n        data_pos - Set of posstive examples\n        data_neg - Set of negative examples\n        batch_size - number of samples per batch. Must be even\n        loop - True or False\n        vocab_dict - The words dictionary\n        shuffle - Shuffle the data order\n    Yield:\n        inputs - Subset of positive and negative examples\n        targets - The corresponding labels for the subset\n        example_weights - An array specifying the importance of each example\n        \n    '''     \n### START GIVEN CODE ###\n    # make sure the batch size is an even number\n    # to allow an equal number of positive and negative samples\n    assert batch_size % 2 == 0\n    \n    # Number of positive examples in each batch is half of the batch size\n    # same with number of negative examples in each batch\n    n_to_take = batch_size // 2\n    \n    # Use pos_index to walk through the data_pos array\n    # same with neg_index and data_neg\n    pos_index = 0\n    neg_index = 0\n    \n    len_data_pos = len(data_pos)\n    len_data_neg = len(data_neg)\n    \n    # Get and array with the data indexes\n    pos_index_lines = list(range(len_data_pos))\n    neg_index_lines = list(range(len_data_neg))\n    \n    # shuffle lines if shuffle is set to True\n    if shuffle:\n        rnd.shuffle(pos_index_lines)\n        rnd.shuffle(neg_index_lines)\n        \n    stop = False\n    \n    # Loop indefinitely\n    while not stop:  \n        \n        # create a batch with positive and negative examples\n        batch = []\n        \n        # First part: Pack n_to_take positive examples\n        \n        # Start from pos_index and increment i up to n_to_take\n        for i in range(n_to_take):\n                    \n            # If the positive index goes past the positive dataset lenght,\n            if pos_index >= len_data_pos: \n                \n                # If loop is set to False, break once we reach the end of the dataset\n                if not loop:\n                    stop = True;\n                    break;\n                \n                # If user wants to keep re-using the data, reset the index\n                pos_index = 0\n                \n                if shuffle:\n                    # Shuffle the index of the positive sample\n                    rnd.shuffle(pos_index_lines)\n                    \n            # get the tweet as pos_index\n            tweet = data_pos[pos_index_lines[pos_index]]\n            \n            # convert the tweet into tensors of integers representing the processed words\n            tensor = tweet_to_tensor(tweet, vocab_dict)\n            \n            # append the tensor to the batch list\n            batch.append(tensor)\n            \n            # Increment pos_index by one\n            pos_index = pos_index + 1\n\n### END GIVEN CODE ###\n            \n### START CODE HERE (Replace instances of 'None' with your code) ###\n\n        # Second part: Pack n_to_take negative examples\n    \n        # Using the same batch list, start from neg_index and increment i up to n_to_take\n        for i in range(None):\n            \n            # If the negative index goes past the negative dataset length,\n            if None\n                \n                # If loop is set to False, break once we reach the end of the dataset\n                if not loop:\n                    stop = True;\n                    break;\n                    \n                # If user wants to keep re-using the data, reset the index\n                neg_index = None\n                \n                if shuffle:\n                    # Shuffle the index of the negative sample\n                    None\n            # get the tweet as neg_index\n            tweet = None\n            \n            # convert the tweet into tensors of integers representing the processed words\n            tensor = None\n            \n            # append the tensor to the batch list\n            None\n            \n            # Increment neg_index by one\n            neg_index = None\n\n### END CODE HERE ###        \n\n### START GIVEN CODE ###\n        if stop:\n            break;\n\n        # Update the start index for positive data \n        # so that it's n_to_take positions after the current pos_index\n        pos_index += n_to_take\n        \n        # Update the start index for negative data \n        # so that it's n_to_take positions after the current neg_index\n        neg_index += n_to_take\n        \n        # Get the max tweet length (the length of the longest tweet) \n        # (you will pad all shorter tweets to have this length)\n        max_len = max([len(t) for t in batch]) \n        \n        \n        # Initialize the input_l, which will \n        # store the padded versions of the tensors\n        tensor_pad_l = []\n        # Pad shorter tweets with zeros\n        for tensor in batch:\n### END GIVEN CODE ###\n\n### START CODE HERE (Replace instances of 'None' with your code) ###\n            # Get the number of positions to pad for this tensor so that it will be max_len long\n            n_pad = None\n            \n            # Generate a list of zeros, with length n_pad\n            pad_l = None\n            \n            # concatenate the tensor and the list of padded zeros\n            tensor_pad = None\n            \n            # append the padded tensor to the list of padded tensors\n            None\n\n        # convert the list of padded tensors to a numpy array\n        # and store this as the model inputs\n        inputs = None\n  \n        # Generate the list of targets for the positive examples (a list of ones)\n        # The length is the number of positive examples in the batch\n        target_pos = None\n        \n        # Generate the list of targets for the negative examples (a list of zeros)\n        # The length is the number of negative examples in the batch\n        target_neg = None\n        \n        # Concatenate the positve and negative targets\n        target_l = None\n        \n        # Convert the target list into a numpy array\n        targets = None\n\n        # Example weights: Treat all examples equally importantly.It should return an np.array. Hint: Use np.ones_like()\n        example_weights = None\n        \n\n### END CODE HERE ###\n\n### GIVEN CODE ###\n        # note we use yield and not return\n        yield inputs, targets, example_weights\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg\">  Cell </span><span class=\"ansi-green-fg\">In[778], line 94</span>\n<span class=\"ansi-red-fg\">    if None</span>\n           ^\n<span class=\"ansi-red-fg\">SyntaxError</span><span class=\"ansi-red-fg\">:</span> expected ':'\n</pre>\n```\n:::\n\n:::\n:::\n\n\nNow you can use your data generator to create a data generator for the training data, and another data generator for the validation data.\n\nWe will create a third data generator that does not loop, for testing the final accuracy of the model.\n\n::: {#18948168 .cell execution_count=14}\n``` {.python .cell-code}\n# Set the random number generator for the shuffle procedure\nrnd.seed(30) \n\n# Create the training data generator\ndef train_generator(batch_size, shuffle = False):\n    return data_generator(train_pos, train_neg, batch_size, True, Vocab, shuffle)\n\n# Create the validation data generator\ndef val_generator(batch_size, shuffle = False):\n    return data_generator(val_pos, val_neg, batch_size, True, Vocab, shuffle)\n\n# Create the validation data generator\ndef test_generator(batch_size, shuffle = False):\n    return data_generator(val_pos, val_neg, batch_size, False, Vocab, shuffle)\n\n# Get a batch from the train_generator and inspect.\ninputs, targets, example_weights = next(train_generator(4, shuffle=True))\n\n# this will print a list of 4 tensors padded with zeros\nprint(f'Inputs: {inputs}')\nprint(f'Targets: {targets}')\nprint(f'Example Weights: {example_weights}')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[779], line 17</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> data_generator(val_pos, val_neg, batch_size, <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>, Vocab, shuffle)\n<span class=\"ansi-green-fg ansi-bold\">     16</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Get a batch from the train_generator and inspect.</span>\n<span class=\"ansi-green-fg\">---&gt; 17</span> inputs, targets, example_weights <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span class=\"ansi-yellow-bg\">train_generator</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">4</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">shuffle</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">True</span><span class=\"ansi-yellow-bg\">)</span>)\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># this will print a list of 4 tensors padded with zeros</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Inputs: </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>inputs<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\nCell <span class=\"ansi-green-fg\">In[779], line 6</span>, in <span class=\"ansi-cyan-fg\">train_generator</span><span class=\"ansi-blue-fg\">(batch_size, shuffle)</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">train_generator</span>(batch_size, shuffle <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">----&gt; 6</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">data_generator</span>(train_pos, train_neg, batch_size, <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, Vocab, shuffle)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'data_generator' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#0bfddc42 .cell execution_count=15}\n``` {.python .cell-code}\n# Test the train_generator\n\n# Create a data generator for training data,\n# which produces batches of size 4 (for tensors and their respective targets)\ntmp_data_gen = train_generator(batch_size = 4)\n\n# Call the data generator to get one batch and its targets\ntmp_inputs, tmp_targets, tmp_example_weights = next(tmp_data_gen)\n\nprint(f\"The inputs shape is {tmp_inputs.shape}\")\nprint(f\"The targets shape is {tmp_targets.shape}\")\nprint(f\"The example weights shape is {tmp_example_weights.shape}\")\n\nfor i,t in enumerate(tmp_inputs):\n    print(f\"input tensor: {t}; target {tmp_targets[i]}; example weights {tmp_example_weights[i]}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[780], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Test the train_generator</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> \n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Create a data generator for training data,</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># which produces batches of size 4 (for tensors and their respective targets)</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> tmp_data_gen <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">train_generator</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">batch_size</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">4</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Call the data generator to get one batch and its targets</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> tmp_inputs, tmp_targets, tmp_example_weights <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(tmp_data_gen)\n\nCell <span class=\"ansi-green-fg\">In[779], line 6</span>, in <span class=\"ansi-cyan-fg\">train_generator</span><span class=\"ansi-blue-fg\">(batch_size, shuffle)</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">train_generator</span>(batch_size, shuffle <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">----&gt; 6</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">data_generator</span>(train_pos, train_neg, batch_size, <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, Vocab, shuffle)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'data_generator' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected output\n\n```CPP\nThe inputs shape is (4, 14)\nThe targets shape is (4,)\nThe example weights shape is (4,)\ninput tensor: [3 4 5 6 7 8 9 0 0 0 0 0 0 0]; target 1; example weights 1\ninput tensor: [10 11 12 13 14 15 16 17 18 19 20  9 21 22]; target 1; example weights 1\ninput tensor: [5738 2901 3761    0    0    0    0    0    0    0    0    0    0    0]; target 0; example weights 1\ninput tensor: [ 858  256 3652 5739  307 4458  567 1230 2767  328 1202 3761    0    0]; target 0; example weights 1\n```\n\nNow that you have your train/val generators, you can just call them and they will return tensors which correspond to your tweets in the first column and their corresponding labels in the second column. Now you can go ahead and start building your neural network. \n\n\n# Part 3:  Defining classes {#3}\n\nIn this part, you will write your own library of layers. It will be very similar\nto the one used in Trax and also in Keras and PyTorch. Writing your own small\nframework will help you understand how they all work and use them effectively\nin the future.\n\nYour framework will be based on the following `Layer` class from utils.py.\n\n```CPP\nclass Layer(object):\n    \"\"\" Base class for layers.\n    \"\"\"\n      \n    # Constructor\n    def __init__(self):\n        # set weights to None\n        self.weights = None\n\n    # The forward propagation should be implemented\n    # by subclasses of this Layer class\n    def forward(self, x):\n        raise NotImplementedError\n\n    # This function initializes the weights\n    # based on the input signature and random key,\n    # should be implemented by subclasses of this Layer class\n    def init_weights_and_state(self, input_signature, random_key):\n        pass\n\n    # This initializes and returns the weights, do not override.\n    def init(self, input_signature, random_key):\n        self.init_weights_and_state(input_signature, random_key)\n        return self.weights\n \n    # __call__ allows an object of this class\n    # to be called like it's a function.\n    def __call__(self, x):\n        # When this layer object is called, \n        # it calls its forward propagation function\n        return self.forward(x)\n```\n\n\n## 3.1  ReLU class {#3.1}\nYou will now implement the ReLU activation function in a class below. The ReLU function looks as follows: \n\n![ReLU](img/relu.jpg){width=300px height=150px}\n\n\n$$ \n\\mathrm{ReLU}(x) = \\mathrm{max}(0,x) \n$$\n\n\n### Exercise 03 {#ex03}\n\n**Instructions:** Implement the ReLU activation function below. Your function should take in a matrix or vector and it should transform all the negative numbers into 0 while keeping all the positive numbers intact. \n\n<details>    \n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li>Please use numpy.maximum(A,k) to find the maximum between each element in A and a scalar k</li>\n</ul>\n</p>\n</details>\n\n::: {#8e751ff1 .cell execution_count=16}\n``` {.python .cell-code}\n# UNQ_C3 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: Relu\nclass Relu(Layer):\n    \"\"\"Relu activation function implementation\"\"\"\n    def forward(self, x):\n        '''\n        Input: \n            - x (a numpy array): the input\n        Output:\n            - activation (numpy array): all positive or 0 version of x\n        '''\n        ### START CODE HERE (Replace instances of 'None' with your code) ###\n        \n        activation = None\n\n        ### END CODE HERE ###\n        \n        return activation\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[781], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C3 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># GRADED FUNCTION: Relu</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">Relu</span>(<span class=\"ansi-yellow-bg\">Layer</span>):\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"color:rgb(188,188,188)\">    </span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Relu activation function implementation\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">forward</span>(<span style=\"color:rgb(0,135,0)\">self</span>, x):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Layer' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1053e831 .cell execution_count=17}\n``` {.python .cell-code}\n# Test your relu function\nx = np.array([[-2.0, -1.0, 0.0], [0.0, 1.0, 2.0]], dtype=float)\nrelu_layer = Relu()\nprint(\"Test data is:\")\nprint(x)\nprint(\"Output of Relu is:\")\nprint(relu_layer(x))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[782], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Test your relu function</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> x <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>array([[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">2.0</span>, <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1.0</span>, <span style=\"color:rgb(98,98,98)\">0.0</span>], [<span style=\"color:rgb(98,98,98)\">0.0</span>, <span style=\"color:rgb(98,98,98)\">1.0</span>, <span style=\"color:rgb(98,98,98)\">2.0</span>]], dtype<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(0,135,0)\">float</span>)\n<span class=\"ansi-green-fg\">----&gt; 3</span> relu_layer <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">Relu</span>()\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Test data is:</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"color:rgb(0,135,0)\">print</span>(x)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Relu' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected Outout\n```CPP\nTest data is:\n[[-2. -1.  0.]\n [ 0.  1.  2.]]\nOutput of Relu is:\n[[0. 0. 0.]\n [0. 1. 2.]]\n```\n\n## 3.2  Dense class {#3.2}\n\n### Exercise\n\nImplement the forward function of the Dense class. \n- The forward function multiplies the input to the layer (`x`) by the weight matrix (`W`)\n\n$$\\mathrm{forward}(\\mathbf{x},\\mathbf{W}) = \\mathbf{xW} $$\n\n- You can use `numpy.dot` to perform the matrix multiplication.\n\nNote that for more efficient code execution, you will use the trax version of `math`, which includes a trax version of `numpy` and also `random`.\n\nImplement the weight initializer `new_weights` function\n- Weights are initialized with a random key.\n- The second parameter is a tuple for the desired shape of the weights (num_rows, num_cols)\n- The num of rows for weights should equal the number of columns in x, because for forward propagation, you will multiply x times weights.\n\nPlease use `trax.fastmath.random.normal(key, shape, dtype=tf.float32)` to generate random values for the weight matrix. The key difference between this function\nand the standard `numpy` randomness is the explicit use of random keys, which\nneed to be passed. While it can look tedious at the first sight to pass the random key everywhere, you will learn in Course 4 why this is very helpful when\nimplementing some advanced models.\n- `key` can be generated by calling `random.get_prng(seed=)` and passing in a number for the `seed`.\n- `shape` is a tuple with the desired shape of the weight matrix.\n    - The number of rows in the weight matrix should equal the number of columns in the variable `x`.  Since `x` may have 2 dimensions if it reprsents a single training example (row, col), or three dimensions (batch_size, row, col), get the last dimension from the tuple that holds the dimensions of x.\n    - The number of columns in the weight matrix is the number of units chosen for that dense layer.  Look at the `__init__` function to see which variable stores the number of units.\n- `dtype` is the data type of the values in the generated matrix; keep the default of `tf.float32`. In this case, don't explicitly set the dtype (just let it use the default value).\n\nSet the standard deviation of the random values to 0.1\n- The values generated have a mean of 0 and standard deviation of 1.\n- Set the default standard deviation `stdev` to be 0.1 by multiplying the standard deviation to each of the values in the weight matrix.\n\n::: {#44f04759 .cell execution_count=18}\n``` {.python .cell-code}\n# use the fastmath module within trax\nfrom trax import fastmath\n\n# use the numpy module from trax\nnp = fastmath.numpy\n\n# use the fastmath.random module from trax\nrandom = fastmath.random\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AttributeError</span>                            Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[783], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># use the fastmath module within trax</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> fastmath\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># use the numpy module from trax</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> np <span style=\"color:rgb(98,98,98)\">=</span> fastmath<span style=\"color:rgb(98,98,98)\">.</span>numpy\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/__init__.py:18</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># coding=utf-8</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright 2020 The Trax Authors.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     13</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># See the License for the specific language governing permissions and</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># limitations under the License.</span>\n<span class=\"ansi-green-fg ansi-bold\">     16</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Trax top level import.\"\"\"</span>\n<span class=\"ansi-green-fg\">---&gt; 18</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> fastmath\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> layers\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> models\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/fastmath/__init__.py:20</span>\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> jax <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> jax_math\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> numpy <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> numpy_math\n<span class=\"ansi-green-fg\">---&gt; 20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> tf <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> tf_math\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> nested_map\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> nested_map_multiarg\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/fastmath/tf.py:22</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tensorflow</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">compat</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">v2</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf</span>\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">shapes</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> ShapeDtype\n<span class=\"ansi-green-fg\">---&gt; 22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf_numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> extensions <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> tf_np_extensions\n<span class=\"ansi-green-fg ansi-bold\">     23</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf_numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> numpy <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> tf_np\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">tf_abstract_eval</span>(f):\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/tf_numpy/extensions/__init__.py:23</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">__future__</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> print_function\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># pylint: disable=wildcard-import</span>\n<span class=\"ansi-green-fg\">---&gt; 23</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf_numpy</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">extensions</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">extensions</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">     24</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># pylint: enable=wildcard-import</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/tf_numpy/extensions/extensions.py:727</span>\n<span class=\"ansi-green-fg ansi-bold\">    721</span>   states <span style=\"color:rgb(98,98,98)\">=</span> tf<span style=\"color:rgb(98,98,98)\">.</span>nest<span style=\"color:rgb(98,98,98)\">.</span>map_structure(_seed2key, states)\n<span class=\"ansi-green-fg ansi-bold\">    722</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> states\n<span class=\"ansi-green-fg ansi-bold\">    725</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">uniform</span>(key,\n<span class=\"ansi-green-fg ansi-bold\">    726</span>             shape,\n<span class=\"ansi-green-fg\">--&gt; 727</span>             dtype<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">tf_np</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">random</span><span style=\"color:rgb(98,98,98)\">.</span>DEFAULT_RANDN_DTYPE,\n<span class=\"ansi-green-fg ansi-bold\">    728</span>             minval<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.</span>,\n<span class=\"ansi-green-fg ansi-bold\">    729</span>             maxval<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>):\n<span class=\"ansi-green-fg ansi-bold\">    730</span> <span style=\"color:rgb(188,188,188)\">  </span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Sample uniform random values in range [`minval`, `maxval`).</span>\n<span class=\"ansi-green-fg ansi-bold\">    731</span> \n<span class=\"ansi-green-fg ansi-bold\">    732</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">  Args:</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    741</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    is sampled uniformly randomly in range [`minval`, `maxval`).</span>\n<span class=\"ansi-green-fg ansi-bold\">    742</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">  \"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    743</span>   key <span style=\"color:rgb(98,98,98)\">=</span> tf_np<span style=\"color:rgb(98,98,98)\">.</span>asarray(key, dtype<span style=\"color:rgb(98,98,98)\">=</span>_RNG_KEY_DTYPE)\n\n<span class=\"ansi-red-fg\">AttributeError</span>: module 'trax.tf_numpy.numpy' has no attribute 'random'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#0bc769a7 .cell execution_count=19}\n``` {.python .cell-code}\n# See how the fastmath.trax.random.normal function works\ntmp_key = random.get_prng(seed=1)\nprint(\"The random seed generated by random.get_prng\")\ndisplay(tmp_key)\n\nprint(\"choose a matrix with 2 rows and 3 columns\")\ntmp_shape=(2,3)\ndisplay(tmp_shape)\n\n# Generate a weight matrix\n# Note that you'll get an error if you try to set dtype to tf.float32, where tf is tensorflow\n# Just avoid setting the dtype and allow it to use the default data type\ntmp_weight = trax.fastmath.random.normal(key=tmp_key, shape=tmp_shape)\n\nprint(\"Weight matrix generated with a normal distribution with mean 0 and stdev of 1\")\ndisplay(tmp_weight)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[784], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># See how the fastmath.trax.random.normal function works</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> tmp_key <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">random</span><span style=\"color:rgb(98,98,98)\">.</span>get_prng(seed<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The random seed generated by random.get_prng</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> display(tmp_key)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'random' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Exercise 04 {#ex04}\n\nImplement the `Dense` class.\n\n::: {#7ba82abb .cell execution_count=20}\n``` {.python .cell-code}\n# UNQ_C4 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: Dense\n\nclass Dense(Layer):\n    \"\"\"\n    A dense (fully-connected) layer.\n    \"\"\"\n\n    # __init__ is implemented for you\n    def __init__(self, n_units, init_stdev=0.1):\n        \n        # Set the number of units in this layer\n        self._n_units = n_units\n        self._init_stdev = init_stdev\n\n    # Please implement 'forward()'\n    def forward(self, x):\n\n### START CODE HERE (Replace instances of 'None' with your code) ###\n\n        # Matrix multiply x and the weight matrix\n        dense = None \n        \n### END CODE HERE ###\n        return dense\n\n    # init_weights\n    def init_weights_and_state(self, input_signature, random_key):\n        \n### START CODE HERE (Replace instances of 'None' with your code) ###\n        # The input_signature has a .shape attribute that gives the shape as a tuple\n        input_shape = None\n\n        # Generate the weight matrix from a normal distribution, \n        # and standard deviation of 'stdev'        \n        w = None\n        \n### END CODE HERE ###     \n        self.weights = w\n        return self.weights\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[785], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C4 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># GRADED FUNCTION: Dense</span>\n<span class=\"ansi-green-fg\">----&gt; 4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">class</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">Dense</span>(<span class=\"ansi-yellow-bg\">Layer</span>):\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"color:rgb(188,188,188)\">    </span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    A dense (fully-connected) layer.</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    \"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># __init__ is implemented for you</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Layer' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b7046720 .cell execution_count=21}\n``` {.python .cell-code}\n# Testing your Dense layer \ndense_layer = Dense(n_units=10)  #sets  number of units in dense layer\nrandom_key = random.get_prng(seed=0)  # sets random seed\nz = np.array([[2.0, 7.0, 25.0]]) # input array \n\ndense_layer.init(z, random_key)\nprint(\"Weights are\\n \",dense_layer.weights) #Returns randomly generated weights\nprint(\"Foward function output is \", dense_layer(z)) # Returns multiplied values of units and weights\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[786], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Testing your Dense layer </span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> dense_layer <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">Dense</span>(n_units<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">10</span>)  <span style=\"font-style:italic;color:rgb(95,135,135)\">#sets  number of units in dense layer</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> random_key <span style=\"color:rgb(98,98,98)\">=</span> random<span style=\"color:rgb(98,98,98)\">.</span>get_prng(seed<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0</span>)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># sets random seed</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> z <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>array([[<span style=\"color:rgb(98,98,98)\">2.0</span>, <span style=\"color:rgb(98,98,98)\">7.0</span>, <span style=\"color:rgb(98,98,98)\">25.0</span>]]) <span style=\"font-style:italic;color:rgb(95,135,135)\"># input array </span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Dense' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected Outout\n```CPP\nWeights are\n  [[-0.02837108  0.09368162 -0.10050076  0.14165013  0.10543301  0.09108126\n  -0.04265672  0.0986188  -0.05575325  0.00153249]\n [-0.20785688  0.0554837   0.09142365  0.05744595  0.07227863  0.01210617\n  -0.03237354  0.16234995  0.02450038 -0.13809784]\n [-0.06111237  0.01403724  0.08410042 -0.1094358  -0.10775021 -0.11396459\n  -0.05933381 -0.01557652 -0.03832145 -0.11144515]]\nFoward function output is  [[-3.0395496   0.9266802   2.5414743  -2.050473   -1.9769388  -2.582209\n  -1.7952735   0.94427425 -0.8980402  -3.7497487 ]]\n```\n\n\n## 3.3  Model {#3.3}\n\nNow you will implement a classifier using neural networks. Here is the model architecture you will be implementing. \n\n![NN](img/nn.jpg){width=400px height=250px}\n\nFor the model implementation, you will use the Trax layers library `tl`.\nNote that the second character of `tl` is the lowercase of letter `L`, not the number 1. Trax layers are very similar to the ones you implemented above,\nbut in addition to trainable weights also have a non-trainable state.\nState is used in layers like batch normalization and for inference, you will learn more about it in course 4.\n\nFirst, look at the code of the Trax Dense layer and compare to your implementation above.\n- [tl.Dense](https://github.com/google/trax/blob/master/trax/layers/core.py#L29): Trax Dense layer implementation\n\nOne other important layer that you will use a lot is one that allows to execute one layer after another in sequence.\n- [tl.Serial](https://github.com/google/trax/blob/master/trax/layers/combinators.py#L26): Combinator that applies layers serially.  \n    - You can pass in the layers as arguments to `Serial`, separated by commas. \n    - For example: `tl.Serial(tl.Embeddings(...), tl.Mean(...), tl.Dense(...), tl.LogSoftmax(...))`\n\nPlease use the `help` function to view documentation for each layer.\n\n::: {#e313694a .cell execution_count=22}\n``` {.python .cell-code}\n# View documentation on tl.Dense\nhelp(tl.Dense)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[787], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View documentation on tl.Dense</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> help(<span class=\"ansi-yellow-bg\">tl</span><span style=\"color:rgb(98,98,98)\">.</span>Dense)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#842edcdc .cell execution_count=23}\n``` {.python .cell-code}\n# View documentation on tl.Serial\nhelp(tl.Serial)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[788], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View documentation on tl.Serial</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> help(<span class=\"ansi-yellow-bg\">tl</span><span style=\"color:rgb(98,98,98)\">.</span>Serial)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n- [tl.Embedding](https://github.com/google/trax/blob/1372b903bb66b0daccee19fd0b1fdf44f659330b/trax/layers/core.py#L113): Layer constructor function for an embedding layer.  \n    - `tl.Embedding(vocab_size, d_feature)`.\n    - `vocab_size` is the number of unique words in the given vocabulary.\n    - `d_feature` is the number of elements in the word embedding (some choices for a word embedding size range from 150 to 300, for example).\n\n::: {#8ffc0f8b .cell execution_count=24}\n``` {.python .cell-code}\n# View documentation for tl.Embedding\nhelp(tl.Embedding)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[789], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View documentation for tl.Embedding</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> help(<span class=\"ansi-yellow-bg\">tl</span><span style=\"color:rgb(98,98,98)\">.</span>Embedding)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ba2e5a24 .cell execution_count=25}\n``` {.python .cell-code}\ntmp_embed = tl.Embedding(vocab_size=3, d_feature=2)\ndisplay(tmp_embed)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[790], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> tmp_embed <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">tl</span><span style=\"color:rgb(98,98,98)\">.</span>Embedding(vocab_size<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, d_feature<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> display(tmp_embed)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n- [tl.Mean](https://github.com/google/trax/blob/1372b903bb66b0daccee19fd0b1fdf44f659330b/trax/layers/core.py#L276): Calculates means across an axis.  In this case, please choose axis = 1 to get an average embedding vector (an embedding vector that is an average of all words in the vocabulary).  \n- For example, if the embedding matrix is 300 elements and vocab size is 10,000 words, taking the mean of the embedding matrix along axis=1 will yield a vector of 300 elements.\n\n::: {#656dbf27 .cell execution_count=26}\n``` {.python .cell-code}\n# view the documentation for tl.mean\nhelp(tl.Mean)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[791], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># view the documentation for tl.mean</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> help(<span class=\"ansi-yellow-bg\">tl</span><span style=\"color:rgb(98,98,98)\">.</span>Mean)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f2c03112 .cell execution_count=27}\n``` {.python .cell-code}\n# Pretend the embedding matrix uses \n# 2 elements for embedding the meaning of a word\n# and has a vocabulary size of 3\n# So it has shape (2,3)\ntmp_embed = np.array([[1,2,3,],\n                    [4,5,6]\n                   ])\n\n# take the mean along axis 0\nprint(\"The mean along axis 0 creates a vector whose length equals the vocabulary size\")\ndisplay(np.mean(tmp_embed,axis=0))\n\nprint(\"The mean along axis 1 creates a vector whose length equals the number of elements in a word embedding\")\ndisplay(np.mean(tmp_embed,axis=1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean along axis 0 creates a vector whose length equals the vocabulary size\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\narray([2.5, 3.5, 4.5])\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean along axis 1 creates a vector whose length equals the number of elements in a word embedding\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\narray([2., 5.])\n```\n:::\n:::\n\n\n- [tl.LogSoftmax](https://github.com/google/trax/blob/1372b903bb66b0daccee19fd0b1fdf44f659330b/trax/layers/core.py#L242): Implements log softmax function\n- Here, you don't need to set any parameters for `LogSoftMax()`.\n\n::: {#4b77d710 .cell execution_count=28}\n``` {.python .cell-code}\nhelp(tl.LogSoftmax)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[793], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> help(<span class=\"ansi-yellow-bg\">tl</span><span style=\"color:rgb(98,98,98)\">.</span>LogSoftmax)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Online documentation**\n\n- [tl.Dense](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Dense)\n\n- [tl.Serial](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#module-trax.layers.combinators)\n\n- [tl.Embedding](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Embedding)\n\n- [tl.Mean](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Mean)\n\n- [tl.LogSoftmax](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.LogSoftmax)\n\n\n### Exercise 05 {#ex05}\n\nImplement the classifier function. \n\n::: {#2354f32a .cell execution_count=29}\n``` {.python .cell-code}\n# UNQ_C5 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: classifier\ndef classifier(vocab_size=len(Vocab), embedding_dim=256, output_dim=2, mode='train'):\n        \n### START CODE HERE (Replace instances of 'None' with your code) ###\n    # create embedding layer\n    embed_layer = tl.Embedding(\n        vocab_size=None, # Size of the vocabulary\n        d_feature=None)  # Embedding dimension\n    \n    # Create a mean layer, to create an \"average\" word embedding\n    mean_layer = None\n    \n    # Create a dense layer, one unit for each output\n    dense_output_layer = tl.Dense(n_units = None)\n\n    \n    # Create the log softmax layer (no parameters needed)\n    log_softmax_layer = None\n    \n    # Use tl.Serial to combine all layers\n    # and create the classifier\n    # of type trax.layers.combinators.Serial\n    model = tl.Serial(\n      None, # embedding layer\n      None, # mean layer\n      None, # dense output layer \n      None # log softmax layer\n    )\n### END CODE HERE ###     \n    \n    # return the model of type\n    return model\n```\n:::\n\n\n::: {#41558a4e .cell execution_count=30}\n``` {.python .cell-code}\ntmp_model = classifier()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[795], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> tmp_model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">classifier</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg\">In[794], line 7</span>, in <span class=\"ansi-cyan-fg\">classifier</span><span class=\"ansi-blue-fg\">(vocab_size, embedding_dim, output_dim, mode)</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">classifier</span>(vocab_size<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(0,135,0)\">len</span>(Vocab), embedding_dim<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">256</span>, output_dim<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>, mode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">train</span><span style=\"color:rgb(175,0,0)\">'</span>):\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         \n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">### START CODE HERE (Replace instances of 'None' with your code) ###</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># create embedding layer</span>\n<span class=\"ansi-green-fg\">----&gt; 7</span>     embed_layer <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">tl</span><span style=\"color:rgb(98,98,98)\">.</span>Embedding(\n<span class=\"ansi-green-fg ansi-bold\">      8</span>         vocab_size<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, <span style=\"font-style:italic;color:rgb(95,135,135)\"># Size of the vocabulary</span>\n<span class=\"ansi-green-fg ansi-bold\">      9</span>         d_feature<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># Embedding dimension</span>\n<span class=\"ansi-green-fg ansi-bold\">     11</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Create a mean layer, to create an \"average\" word embedding</span>\n<span class=\"ansi-green-fg ansi-bold\">     12</span>     mean_layer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tl' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#61e334ec .cell execution_count=31}\n``` {.python .cell-code}\nprint(type(tmp_model))\ndisplay(tmp_model)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[796], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(0,135,0)\">type</span>(<span class=\"ansi-yellow-bg\">tmp_model</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> display(tmp_model)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tmp_model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected Outout\n\n```CPP\n<class 'trax.layers.combinators.Serial'>\nSerial[\n  Embedding_9088_256\n  Mean\n  Dense_2\n  LogSoftmax\n]\n```\n\n# Part 4:  Training {#4}\n\nTo train a model on a task, Trax defines an abstraction [`trax.supervised.training.TrainTask`](https://trax-ml.readthedocs.io/en/latest/trax.supervised.html#trax.supervised.training.TrainTask) which packages the train data, loss and optimizer (among other things) together into an object.\n\nSimilarly to evaluate a model, Trax defines an abstraction [`trax.supervised.training.EvalTask`](https://trax-ml.readthedocs.io/en/latest/trax.supervised.html#trax.supervised.training.EvalTask) which packages the eval data and metrics (among other things) into another object.\n\nThe final piece tying things together is the [`trax.supervised.training.Loop`](https://trax-ml.readthedocs.io/en/latest/trax.supervised.html#trax.supervised.training.Loop) abstraction that is a very simple and flexible way to put everything together and train the model, all the while evaluating it and saving checkpoints.\nUsing `Loop` will save you a lot of code compared to always writing the training loop by hand, like you did in courses 1 and 2. More importantly, you are less likely to have a bug in that code that would ruin your training.\n\n::: {#5b3ff1ad .cell execution_count=32}\n``` {.python .cell-code}\n# View documentation for trax.supervised.training.TrainTask\nhelp(trax.supervised.training.TrainTask)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[797], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View documentation for trax.supervised.training.TrainTask</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> help(<span class=\"ansi-yellow-bg\">trax</span><span style=\"color:rgb(98,98,98)\">.</span>supervised<span style=\"color:rgb(98,98,98)\">.</span>training<span style=\"color:rgb(98,98,98)\">.</span>TrainTask)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'trax' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#25f61c23 .cell execution_count=33}\n``` {.python .cell-code}\n# View documentation for trax.supervised.training.EvalTask\nhelp(trax.supervised.training.EvalTask)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[798], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View documentation for trax.supervised.training.EvalTask</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> help(<span class=\"ansi-yellow-bg\">trax</span><span style=\"color:rgb(98,98,98)\">.</span>supervised<span style=\"color:rgb(98,98,98)\">.</span>training<span style=\"color:rgb(98,98,98)\">.</span>EvalTask)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'trax' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7f5d8110 .cell execution_count=34}\n``` {.python .cell-code}\n# View documentation for trax.supervised.training.Loop\nhelp(trax.supervised.training.Loop)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[799], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View documentation for trax.supervised.training.Loop</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> help(<span class=\"ansi-yellow-bg\">trax</span><span style=\"color:rgb(98,98,98)\">.</span>supervised<span style=\"color:rgb(98,98,98)\">.</span>training<span style=\"color:rgb(98,98,98)\">.</span>Loop)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'trax' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5b4aadf9 .cell execution_count=35}\n``` {.python .cell-code}\n# View optimizers that you could choose from\nhelp(trax.optimizers)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[800], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View optimizers that you could choose from</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> help(<span class=\"ansi-yellow-bg\">trax</span><span style=\"color:rgb(98,98,98)\">.</span>optimizers)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'trax' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNotice some available optimizers include:\n```CPP\n    adafactor\n    adam\n    momentum\n    rms_prop\n    sm3\n```\n\n\n## 4.1  Training the model {#4.1}\n\nNow you are going to train your model. \n\nLet's define the `TrainTask`, `EvalTask` and `Loop` in preparation to train the model.\n\n::: {#82f8e4be .cell execution_count=36}\n``` {.python .cell-code}\nfrom trax.supervised import training\n\nbatch_size = 16\nrnd.seed(271)\n\ntrain_task = training.TrainTask(\n    labeled_data=train_generator(batch_size=batch_size, shuffle=True),\n    loss_layer=tl.CrossEntropyLoss(),\n    optimizer=trax.optimizers.Adam(0.01),\n    n_steps_per_checkpoint=10,\n)\n\neval_task = training.EvalTask(\n    labeled_data=val_generator(batch_size=batch_size, shuffle=True),\n    metrics=[tl.CrossEntropyLoss(), tl.Accuracy()],\n)\n\nmodel = classifier()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AttributeError</span>                            Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[801], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">supervised</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> training\n<span class=\"ansi-green-fg ansi-bold\">      3</span> batch_size <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">16</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> rnd<span style=\"color:rgb(98,98,98)\">.</span>seed(<span style=\"color:rgb(98,98,98)\">271</span>)\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/__init__.py:18</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># coding=utf-8</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright 2020 The Trax Authors.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     13</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># See the License for the specific language governing permissions and</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># limitations under the License.</span>\n<span class=\"ansi-green-fg ansi-bold\">     16</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Trax top level import.\"\"\"</span>\n<span class=\"ansi-green-fg\">---&gt; 18</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> fastmath\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> layers\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> models\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/fastmath/__init__.py:20</span>\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> jax <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> jax_math\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> numpy <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> numpy_math\n<span class=\"ansi-green-fg\">---&gt; 20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> tf <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> tf_math\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> nested_map\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">fastmath</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> nested_map_multiarg\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/fastmath/tf.py:22</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tensorflow</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">compat</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">v2</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf</span>\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">shapes</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> ShapeDtype\n<span class=\"ansi-green-fg\">---&gt; 22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf_numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> extensions <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> tf_np_extensions\n<span class=\"ansi-green-fg ansi-bold\">     23</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf_numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> numpy <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> tf_np\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">tf_abstract_eval</span>(f):\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/tf_numpy/extensions/__init__.py:23</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">__future__</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> print_function\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># pylint: disable=wildcard-import</span>\n<span class=\"ansi-green-fg\">---&gt; 23</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf_numpy</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">extensions</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">extensions</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">     24</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># pylint: enable=wildcard-import</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/tf_numpy/extensions/extensions.py:727</span>\n<span class=\"ansi-green-fg ansi-bold\">    721</span>   states <span style=\"color:rgb(98,98,98)\">=</span> tf<span style=\"color:rgb(98,98,98)\">.</span>nest<span style=\"color:rgb(98,98,98)\">.</span>map_structure(_seed2key, states)\n<span class=\"ansi-green-fg ansi-bold\">    722</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> states\n<span class=\"ansi-green-fg ansi-bold\">    725</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">uniform</span>(key,\n<span class=\"ansi-green-fg ansi-bold\">    726</span>             shape,\n<span class=\"ansi-green-fg\">--&gt; 727</span>             dtype<span style=\"color:rgb(98,98,98)\">=</span><span class=\"ansi-yellow-bg\">tf_np</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">random</span><span style=\"color:rgb(98,98,98)\">.</span>DEFAULT_RANDN_DTYPE,\n<span class=\"ansi-green-fg ansi-bold\">    728</span>             minval<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.</span>,\n<span class=\"ansi-green-fg ansi-bold\">    729</span>             maxval<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1.</span>):\n<span class=\"ansi-green-fg ansi-bold\">    730</span> <span style=\"color:rgb(188,188,188)\">  </span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Sample uniform random values in range [`minval`, `maxval`).</span>\n<span class=\"ansi-green-fg ansi-bold\">    731</span> \n<span class=\"ansi-green-fg ansi-bold\">    732</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">  Args:</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    741</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    is sampled uniformly randomly in range [`minval`, `maxval`).</span>\n<span class=\"ansi-green-fg ansi-bold\">    742</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">  \"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    743</span>   key <span style=\"color:rgb(98,98,98)\">=</span> tf_np<span style=\"color:rgb(98,98,98)\">.</span>asarray(key, dtype<span style=\"color:rgb(98,98,98)\">=</span>_RNG_KEY_DTYPE)\n\n<span class=\"ansi-red-fg\">AttributeError</span>: module 'trax.tf_numpy.numpy' has no attribute 'random'</pre>\n```\n:::\n\n:::\n:::\n\n\nThis defines a model trained using [`tl.CrossEntropyLoss`](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.metrics.CrossEntropyLoss) optimized with the [`trax.optimizers.Adam`](https://trax-ml.readthedocs.io/en/latest/trax.optimizers.html#trax.optimizers.adam.Adam) optimizer, all the while tracking the accuracy using [`tl.Accuracy`](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.metrics.Accuracy) metric. We also track `tl.CrossEntropyLoss` on the validation set.\n\nNow let's make an output directory and train the model.\n\n::: {#6e19b00d .cell execution_count=37}\n``` {.python .cell-code}\noutput_dir = '~/model/'\noutput_dir_expand = os.path.expanduser(output_dir)\nprint(output_dir_expand)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/home/oren/model/\n```\n:::\n:::\n\n\n### Exercise 06 {#ex06}\n\n**Instructions:** Implement `train_model` to train the model (`classifier` that you wrote earlier) for the given number of training steps (`n_steps`) using `TrainTask`, `EvalTask` and `Loop`.\n\n::: {#55d4f9cb .cell execution_count=38}\n``` {.python .cell-code}\n# UNQ_C6 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: train_model\ndef train_model(classifier, train_task, eval_task, n_steps, output_dir):\n    '''\n    Input: \n        classifier - the model you are building\n        train_task - Training task\n        eval_task - Evaluation task\n        n_steps - the evaluation steps\n        output_dir - folder to save your files\n    Output:\n        trainer -  trax trainer\n    '''\n### START CODE HERE (Replace instances of 'None' with your code) ###\n    training_loop = training.Loop(\n                                None, # The learning model\n                                None, # The training task\n                                eval_task = None, # The evaluation task\n                                output_dir = None) # The output directory\n\n    training_loop.run(n_steps = None)\n### END CODE HERE ###\n\n    # Return the training_loop, since it has the model.\n    return training_loop\n```\n:::\n\n\n::: {#2d4229e0 .cell execution_count=39}\n``` {.python .cell-code}\ntraining_loop = train_model(model, train_task, eval_task, 100, output_dir_expand)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[804], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> training_loop <span style=\"color:rgb(98,98,98)\">=</span> train_model(<span class=\"ansi-yellow-bg\">model</span>, train_task, eval_task, <span style=\"color:rgb(98,98,98)\">100</span>, output_dir_expand)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected output (Approximately)\n```CPP\nStep      1: train CrossEntropyLoss |  0.88939196\nStep      1: eval  CrossEntropyLoss |  0.68833977\nStep      1: eval          Accuracy |  0.50000000\nStep     10: train CrossEntropyLoss |  0.61036736\nStep     10: eval  CrossEntropyLoss |  0.52182281\nStep     10: eval          Accuracy |  0.68750000\nStep     20: train CrossEntropyLoss |  0.34137666\nStep     20: eval  CrossEntropyLoss |  0.20654774\nStep     20: eval          Accuracy |  1.00000000\nStep     30: train CrossEntropyLoss |  0.20208922\nStep     30: eval  CrossEntropyLoss |  0.21594886\nStep     30: eval          Accuracy |  0.93750000\nStep     40: train CrossEntropyLoss |  0.19611198\nStep     40: eval  CrossEntropyLoss |  0.17582777\nStep     40: eval          Accuracy |  1.00000000\nStep     50: train CrossEntropyLoss |  0.11203773\nStep     50: eval  CrossEntropyLoss |  0.07589275\nStep     50: eval          Accuracy |  1.00000000\nStep     60: train CrossEntropyLoss |  0.09375446\nStep     60: eval  CrossEntropyLoss |  0.09290724\nStep     60: eval          Accuracy |  1.00000000\nStep     70: train CrossEntropyLoss |  0.08785903\nStep     70: eval  CrossEntropyLoss |  0.09610598\nStep     70: eval          Accuracy |  1.00000000\nStep     80: train CrossEntropyLoss |  0.08858261\nStep     80: eval  CrossEntropyLoss |  0.02319432\nStep     80: eval          Accuracy |  1.00000000\nStep     90: train CrossEntropyLoss |  0.05699894\nStep     90: eval  CrossEntropyLoss |  0.01778970\nStep     90: eval          Accuracy |  1.00000000\nStep    100: train CrossEntropyLoss |  0.03663783\nStep    100: eval  CrossEntropyLoss |  0.00210550\nStep    100: eval          Accuracy |  1.00000000\n```\n\n\n## 4.2  Practice Making a prediction {#4.2}\n\nNow that you have trained a model, you can access it as `training_loop.model` object. We will actually use `training_loop.eval_model` and in the next weeks you will learn why we sometimes use a different model for evaluation, e.g., one without dropout. For now, make predictions with your model.\n\nUse the training data just to see how the prediction process works.  \n- Later, you will use validation data to evaluate your model's performance.\n\n::: {#abd60cbe .cell execution_count=40}\n``` {.python .cell-code}\n# Create a generator object\ntmp_train_generator = train_generator(16)\n\n# get one batch\ntmp_batch = next(tmp_train_generator)\n\n# Position 0 has the model inputs (tweets as tensors)\n# position 1 has the targets (the actual labels)\ntmp_inputs, tmp_targets, tmp_example_weights = tmp_batch\n\nprint(f\"The batch is a tuple of length {len(tmp_batch)} because position 0 contains the tweets, and position 1 contains the targets.\") \nprint(f\"The shape of the tweet tensors is {tmp_inputs.shape} (num of examples, length of tweet tensors)\")\nprint(f\"The shape of the labels is {tmp_targets.shape}, which is the batch size.\")\nprint(f\"The shape of the example_weights is {tmp_example_weights.shape}, which is the same as inputs/targets size.\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[805], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Create a generator object</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> tmp_train_generator <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">train_generator</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">16</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># get one batch</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> tmp_batch <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(tmp_train_generator)\n\nCell <span class=\"ansi-green-fg\">In[779], line 6</span>, in <span class=\"ansi-cyan-fg\">train_generator</span><span class=\"ansi-blue-fg\">(batch_size, shuffle)</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">train_generator</span>(batch_size, shuffle <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">----&gt; 6</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">data_generator</span>(train_pos, train_neg, batch_size, <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, Vocab, shuffle)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'data_generator' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6793557a .cell execution_count=41}\n``` {.python .cell-code}\n# feed the tweet tensors into the model to get a prediction\ntmp_pred = training_loop.eval_model(tmp_inputs)\nprint(f\"The prediction shape is {tmp_pred.shape}, num of tensor_tweets as rows\")\nprint(\"Column 0 is the probability of a negative sentiment (class 0)\")\nprint(\"Column 1 is the probability of a positive sentiment (class 1)\")\nprint()\nprint(\"View the prediction array\")\ntmp_pred\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[806], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># feed the tweet tensors into the model to get a prediction</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> tmp_pred <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">training_loop</span><span style=\"color:rgb(98,98,98)\">.</span>eval_model(tmp_inputs)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The prediction shape is </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>tmp_pred<span style=\"color:rgb(98,98,98)\">.</span>shape<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">, num of tensor_tweets as rows</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Column 0 is the probability of a negative sentiment (class 0)</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'training_loop' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nTo turn these probabilities into categories (negative or positive sentiment prediction), for each row:\n\n- Compare the probabilities in each column.\n- If column 1 has a value greater than column 0, classify that as a positive tweet.\n- Otherwise if column 1 is less than or equal to column 0, classify that example as a negative tweet.\n\n::: {#e3aa2e78 .cell execution_count=42}\n``` {.python .cell-code}\n# turn probabilites into category predictions\ntmp_is_positive = tmp_pred[:,1] > tmp_pred[:,0]\nfor i, p in enumerate(tmp_is_positive):\n    print(f\"Neg log prob {tmp_pred[i,0]:.4f}\\tPos log prob {tmp_pred[i,1]:.4f}\\t is positive? {p}\\t actual {tmp_targets[i]}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[807], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># turn probabilites into category predictions</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> tmp_is_positive <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">tmp_pred</span>[:,<span style=\"color:rgb(98,98,98)\">1</span>] <span style=\"color:rgb(98,98,98)\">&gt;</span> tmp_pred[:,<span style=\"color:rgb(98,98,98)\">0</span>]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i, p <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">enumerate</span>(tmp_is_positive):\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Neg log prob </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>tmp_pred[i,<span style=\"color:rgb(98,98,98)\">0</span>]<span style=\"font-weight:bold;color:rgb(175,95,135)\">:</span><span style=\"color:rgb(175,0,0)\">.4f</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\t</span><span style=\"color:rgb(175,0,0)\">Pos log prob </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>tmp_pred[i,<span style=\"color:rgb(98,98,98)\">1</span>]<span style=\"font-weight:bold;color:rgb(175,95,135)\">:</span><span style=\"color:rgb(175,0,0)\">.4f</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\t</span><span style=\"color:rgb(175,0,0)\"> is positive? </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>p<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\t</span><span style=\"color:rgb(175,0,0)\"> actual </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>tmp_targets[i]<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tmp_pred' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNotice that since you are making a prediction using a training batch, it's more likely that the model's predictions match the actual targets (labels).  \n\n- Every prediction that the tweet is positive is also matching the actual target of 1 (positive sentiment).\n- Similarly, all predictions that the sentiment is not positive matches the actual target of 0 (negative sentiment)\n\nOne more useful thing to know is how to compare if the prediction is matching the actual target (label).  \n- The result of calculation `is_positive` is a boolean.\n- The target is a type trax.fastmath.numpy.int32\n- If you expect to be doing division, you may prefer to work with decimal numbers with the data type type trax.fastmath.numpy.int32\n\n::: {#274675a2 .cell execution_count=43}\n``` {.python .cell-code}\n# View the array of booleans\nprint(\"Array of booleans\")\ndisplay(tmp_is_positive)\n\n# convert boolean to type int32\n# True is converted to 1\n# False is converted to 0\ntmp_is_positive_int = tmp_is_positive.astype(np.int32)\n\n\n# View the array of integers\nprint(\"Array of integers\")\ndisplay(tmp_is_positive_int)\n\n# convert boolean to type float32\ntmp_is_positive_float = tmp_is_positive.astype(np.float32)\n\n# View the array of floats\nprint(\"Array of floats\")\ndisplay(tmp_is_positive_float)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nArray of booleans\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[808], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># View the array of booleans</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Array of booleans</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">----&gt; 3</span> display(<span class=\"ansi-yellow-bg\">tmp_is_positive</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># convert boolean to type int32</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># True is converted to 1</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># False is converted to 0</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> tmp_is_positive_int <span style=\"color:rgb(98,98,98)\">=</span> tmp_is_positive<span style=\"color:rgb(98,98,98)\">.</span>astype(np<span style=\"color:rgb(98,98,98)\">.</span>int32)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tmp_is_positive' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#00c4ae3e .cell execution_count=44}\n``` {.python .cell-code}\ntmp_pred.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[809], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">tmp_pred</span><span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tmp_pred' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNote that Python usually does type conversion for you when you compare a boolean to an integer\n- True compared to 1 is True, otherwise any other integer is False.\n- False compared to 0 is True, otherwise any ohter integer is False.\n\n::: {#377ec785 .cell execution_count=45}\n``` {.python .cell-code}\nprint(f\"True == 1: {True == 1}\")\nprint(f\"True == 2: {True == 2}\")\nprint(f\"False == 0: {False == 0}\")\nprint(f\"False == 2: {False == 2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue == 1: True\nTrue == 2: False\nFalse == 0: True\nFalse == 2: False\n```\n:::\n:::\n\n\nHowever, we recommend that you keep track of the data type of your variables to avoid unexpected outcomes.  So it helps to convert the booleans into integers\n- Compare 1 to 1 rather than comparing True to 1.\n\nHopefully you are now familiar with what kinds of inputs and outputs the model uses when making a prediction.\n- This will help you implement a function that estimates the accuracy of the model's predictions.\n\n\n# Part 5:  Evaluation {#5} \n\n\n## 5.1  Computing the accuracy on a batch {#5.1}\n\nYou will now write a function that evaluates your model on the validation set and returns the accuracy. \n\n- `preds` contains the predictions.\n    - Its dimensions are `(batch_size, output_dim)`.  `output_dim` is two in this case.  Column 0 contains the probability that the tweet belongs to class 0 (negative sentiment). Column 1 contains probability that it belongs to class 1 (positive sentiment).\n    - If the probability in column 1 is greater than the probability in column 0, then interpret this as the model's prediction that the example has label 1 (positive sentiment).  \n    - Otherwise, if the probabilities are equal or the probability in column 0 is higher, the model's prediction is 0 (negative sentiment).\n- `y` contains the actual labels.\n- `y_weights` contains the weights to give to predictions.\n\n\n### Exercise 07 {#ex07}\n\nImplement `compute_accuracy`.\n\n::: {#91849557 .cell execution_count=46}\n``` {.python .cell-code}\n# UNQ_C7 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: compute_accuracy\ndef compute_accuracy(preds, y, y_weights):\n    \"\"\"\n    Input: \n        preds: a tensor of shape (dim_batch, output_dim) \n        y: a tensor of shape (dim_batch, output_dim) with the true labels\n        y_weights: a n.ndarray with the a weight for each example\n    Output: \n        accuracy: a float between 0-1 \n        weighted_num_correct (np.float32): Sum of the weighted correct predictions\n        sum_weights (np.float32): Sum of the weights\n    \"\"\"\n    ### START CODE HERE (Replace instances of 'None' with your code) ###\n    # Create an array of booleans, \n    # True if the probability of positive sentiment is greater than\n    # the probability of negative sentiment\n    # else False\n    is_pos =  None\n\n    # convert the array of booleans into an array of np.int32\n    is_pos_int = None\n    \n    # compare the array of predictions (as int32) with the target (labels) of type int32\n    correct = None\n\n    # Count the sum of the weights.\n    sum_weights = None\n    \n    # convert the array of correct predictions (boolean) into an arrayof np.float32\n    correct_float = None\n    \n    # Multiply each prediction with its corresponding weight.\n    weighted_correct_float = None\n\n    # Sum up the weighted correct predictions (of type np.float32), to go in the\n    # denominator.\n    weighted_num_correct = None\n \n    # Divide the number of weighted correct predictions by the sum of the\n    # weights.\n    accuracy = None\n\n    ### END CODE HERE ###\n    return accuracy, weighted_num_correct, sum_weights\n```\n:::\n\n\n::: {#ae0e35e2 .cell execution_count=47}\n``` {.python .cell-code}\n# test your function\ntmp_val_generator = val_generator(64)\n\n# get one batch\ntmp_batch = next(tmp_val_generator)\n\n# Position 0 has the model inputs (tweets as tensors)\n# position 1 has the targets (the actual labels)\ntmp_inputs, tmp_targets, tmp_example_weights = tmp_batch\n\n# feed the tweet tensors into the model to get a prediction\ntmp_pred = training_loop.eval_model(tmp_inputs)\n\ntmp_acc, tmp_num_correct, tmp_num_predictions = compute_accuracy(preds=tmp_pred, y=tmp_targets, y_weights=tmp_example_weights)\n\nprint(f\"Model's prediction accuracy on a single training batch is: {100 * tmp_acc}%\")\nprint(f\"Weighted number of correct predictions {tmp_num_correct}; weighted number of total observations predicted {tmp_num_predictions}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[812], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># test your function</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> tmp_val_generator <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">val_generator</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">64</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># get one batch</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> tmp_batch <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(tmp_val_generator)\n\nCell <span class=\"ansi-green-fg\">In[779], line 10</span>, in <span class=\"ansi-cyan-fg\">val_generator</span><span class=\"ansi-blue-fg\">(batch_size, shuffle)</span>\n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">val_generator</span>(batch_size, shuffle <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg\">---&gt; 10</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">data_generator</span>(val_pos, val_neg, batch_size, <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, Vocab, shuffle)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'data_generator' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected output (Approximately)\n\n```\nModel's prediction accuracy on a single training batch is: 100.0%\nWeighted number of correct predictions 64.0; weighted number of total observations predicted 64\n```\n\n\n## 5.2  Testing your model on Validation Data {#5.2}\n\nNow you will write test your model's prediction accuracy on validation data. \n\nThis program will take in a data generator and your model. \n\n- The generator allows you to get batches of data. You can use it with a `for` loop:\n\n```\nfor batch in iterator: \n   # do something with that batch\n```\n\n`batch` has dimensions `(X, Y, weights)`. \n\n- Column 0 corresponds to the tweet as a tensor (input).\n- Column 1 corresponds to its target (actual label, positive or negative sentiment).\n- Column 2 corresponds to the weights associated (example weights)\n- You can feed the tweet into model and it will return the predictions for the batch. \n\n<a name=\"ex08\"></a>\n### Exercise 08\n\n**Instructions:** \n- Compute the accuracy over all the batches in the validation iterator. \n- Make use of `compute_accuracy`, which you recently implemented, and return the overall accuracy.\n\n::: {#2ea72997 .cell execution_count=48}\n``` {.python .cell-code}\n# UNQ_C8 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: test_model\ndef test_model(generator, model):\n    '''\n    Input: \n        generator: an iterator instance that provides batches of inputs and targets\n        model: a model instance \n    Output: \n        accuracy: float corresponding to the accuracy\n    '''\n    \n    accuracy = 0.\n    total_num_correct = 0\n    total_num_pred = 0\n    \n    ### START CODE HERE (Replace instances of 'None' with your code) ###\n    for batch in generator: \n        \n        # Retrieve the inputs from the batch\n        inputs = None\n        \n        # Retrieve the targets (actual labels) from the batch\n        targets = None\n        \n        # Retrieve the example weight.\n        example_weight = None\n\n        # Make predictions using the inputs\n        pred = None\n        \n        # Calculate accuracy for the batch by comparing its predictions and targets\n        batch_accuracy, batch_num_correct, batch_num_pred = None\n        \n        # Update the total number of correct predictions\n        # by adding the number of correct predictions from this batch\n        total_num_correct += None\n        \n        # Update the total number of predictions \n        # by adding the number of predictions made for the batch\n        total_num_pred += None\n\n    # Calculate accuracy over all examples\n    accuracy = None\n    \n    ### END CODE HERE ###\n    return accuracy\n```\n:::\n\n\n::: {#48fcc81a .cell execution_count=49}\n``` {.python .cell-code}\n# DO NOT EDIT THIS CELL\n# testing the accuracy of your model: this takes around 20 seconds\nmodel = training_loop.eval_model\naccuracy = test_model(test_generator(16), model)\n\nprint(f'The accuracy of your model on the validation set is {accuracy:.4f}', )\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[814], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># DO NOT EDIT THIS CELL</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># testing the accuracy of your model: this takes around 20 seconds</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">training_loop</span><span style=\"color:rgb(98,98,98)\">.</span>eval_model\n<span class=\"ansi-green-fg ansi-bold\">      4</span> accuracy <span style=\"color:rgb(98,98,98)\">=</span> test_model(test_generator(<span style=\"color:rgb(98,98,98)\">16</span>), model)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">The accuracy of your model on the validation set is </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>accuracy<span style=\"font-weight:bold;color:rgb(175,95,135)\">:</span><span style=\"color:rgb(175,0,0)\">.4f</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">'</span>, )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'training_loop' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected Output (Approximately)\n\n```CPP\nThe accuracy of your model on the validation set is 0.9931\n```\n\n\n# Part 6:  Testing with your own input {#6}\n\nFinally you will test with your own input. You will see that deepnets are more powerful than the older methods you have used before. Although you go close to 100% accuracy on the first two assignments, the task was way easier. \n\n::: {#caf9fd85 .cell execution_count=50}\n``` {.python .cell-code}\n# this is used to predict on your own sentnece\ndef predict(sentence):\n    inputs = np.array(tweet_to_tensor(sentence, vocab_dict=Vocab))\n    \n    # Batch size 1, add dimension for batch, to work with the model\n    inputs = inputs[None, :]  \n    \n    # predict with the model\n    preds_probs = model(inputs)\n    \n    # Turn probabilities into categories\n    preds = int(preds_probs[0, 1] > preds_probs[0, 0])\n    \n    sentiment = \"negative\"\n    if preds == 1:\n        sentiment = 'positive'\n\n    return preds, sentiment\n```\n:::\n\n\n::: {#b26e1330 .cell execution_count=51}\n``` {.python .cell-code}\n# try a positive sentence\nsentence = \"It's such a nice day, think i'll be taking Sid to Ramsgate fish and chips for lunch at Peter's fish factory and then the beach maybe\"\ntmp_pred, tmp_sentiment = predict(sentence)\nprint(f\"The sentiment of the sentence \\n***\\n\\\"{sentence}\\\"\\n***\\nis {tmp_sentiment}.\")\n\nprint()\n# try a negative sentence\nsentence = \"I hated my day, it was the worst, I'm so sad.\"\ntmp_pred, tmp_sentiment = predict(sentence)\nprint(f\"The sentiment of the sentence \\n***\\n\\\"{sentence}\\\"\\n***\\nis {tmp_sentiment}.\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[816], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># try a positive sentence</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> sentence <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">It</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">s such a nice day, think i</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">ll be taking Sid to Ramsgate fish and chips for lunch at Peter</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">s fish factory and then the beach maybe</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> tmp_pred, tmp_sentiment <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">predict</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">sentence</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The sentiment of the sentence </span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">***</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\\"</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>sentence<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\\"</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">***</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">is </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>tmp_sentiment<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">.</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"color:rgb(0,135,0)\">print</span>()\n\nCell <span class=\"ansi-green-fg\">In[815], line 3</span>, in <span class=\"ansi-cyan-fg\">predict</span><span class=\"ansi-blue-fg\">(sentence)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">predict</span>(sentence):\n<span class=\"ansi-green-fg\">----&gt; 3</span>     inputs <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>array(<span class=\"ansi-yellow-bg\">tweet_to_tensor</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">sentence</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">vocab_dict</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">Vocab</span><span class=\"ansi-yellow-bg\">)</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Batch size 1, add dimension for batch, to work with the model</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     inputs <span style=\"color:rgb(98,98,98)\">=</span> inputs[<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, :]  \n\nCell <span class=\"ansi-green-fg\">In[775], line 34</span>, in <span class=\"ansi-cyan-fg\">tweet_to_tensor</span><span class=\"ansi-blue-fg\">(tweet, vocab_dict, unk_token, verbose)</span>\n<span class=\"ansi-green-fg ansi-bold\">     31</span>     <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The unique integer ID for the unk_token is </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>unk_ID<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">     33</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># for each word in the list:</span>\n<span class=\"ansi-green-fg\">---&gt; 34</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> word <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> word_l:\n<span class=\"ansi-green-fg ansi-bold\">     35</span>     \n<span class=\"ansi-green-fg ansi-bold\">     36</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Get the unique integer ID.</span>\n<span class=\"ansi-green-fg ansi-bold\">     37</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># If the word doesn't exist in the vocab dictionary,</span>\n<span class=\"ansi-green-fg ansi-bold\">     38</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># use the unique ID for __UNK__ instead.</span>\n<span class=\"ansi-green-fg ansi-bold\">     39</span>     word_ID <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">     40</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">### END CODE HERE ###</span>\n<span class=\"ansi-green-fg ansi-bold\">     41</span>     \n<span class=\"ansi-green-fg ansi-bold\">     42</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Append the unique integer ID to the tensor list.</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: 'NoneType' object is not iterable</pre>\n```\n:::\n\n:::\n:::\n\n\nNotice that the model works well even for complex sentences.\n\n### On Deep Nets\n\nDeep nets allow you to understand and capture dependencies that you would have not been able to capture with a simple linear regression, or logistic regression. \n\n- It also allows you to better use pre-trained embeddings for classification and tends to generalize better.\n\n",
    "supporting": [
      "assignment_files"
    ],
    "filters": [],
    "includes": {}
  }
}