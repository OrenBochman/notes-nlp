{
  "hash": "1b4778921f0796fdb5b96ff11a8755d3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Assignment 4 - Naive Machine Translation and LSH\njupyter: python3\ndate: 2020-10-23\ncategories: \n  - NLP \n  - Coursera \n  - Lab\n  - Word Embeddings\n  - Translation task\n  - Search Task\nexecute: \n    error: true\n---\n\n\n\n\n![course banner](/images/Course-Logo-1-3.webp){#fig-00 .column-margin .nolightbox}\n\n::: {.callout-warning}\n## Honor code alert\n\nDue to the Coursera Honor Code, I cannot provide the solutions to the assignments. \n\n- This notebook is the original notebook provided by the course\n- It is setup to run without stopping for errors. \n- It is also likely to be out of date as the course has had some updates since I took it.\n:::\n\n\nYou will now implement your first machine translation system and then you\nwill see how locality sensitive hashing works. Let's get started by importing\nthe required functions!\n\nIf you are running this notebook in your local computer, don't forget to\ndownload the twitter samples and stopwords from nltk.\n\n```\nnltk.download('stopwords')\nnltk.download('twitter_samples')\n```\n\n\n**NOTE**: The `Exercise xx` numbers in this assignment **_are inconsistent_** with the `UNQ_Cx` numbers.\n\n### This assignment covers the folowing topics:\n\n- [1. The word embeddings data for English and French words](#1)\n  - [1.1 Generate embedding and transform matrices](#1-1)\n      - [Exercise 1](#ex-01)\n- [2. Translations](#2)\n  - [2.1 Translation as linear transformation of embeddings](#2-1)\n      - [Exercise 2](#ex-02)  \n      - [Exercise 3](#ex-03)  \n      - [Exercise 4](#ex-04)        \n  - [2.2 Testing the translation](#2-2)\n      - [Exercise 5](#ex-05)\n      - [Exercise 6](#ex-06)      \n- [3. LSH and document search](#3)\n  - [3.1 Getting the document embeddings](#3-1)\n      - [Exercise 7](#ex-07)\n      - [Exercise 8](#ex-08)      \n  - [3.2 Looking up the tweets](#3-2)\n  - [3.3 Finding the most similar tweets with LSH](#3-3)\n  - [3.4 Getting the hash number for a vector](#3-4)\n      - [Exercise 9](#ex-09)  \n  - [3.5 Creating a hash table](#3-5)\n      - [Exercise 10](#ex-10)  \n  - [3.6 Creating all hash tables](#3-6)\n      - [Exercise 11](#ex-11)  \n\n::: {#b5c8786c .cell execution_count=1}\n``` {.python .cell-code}\nimport pdb\nimport pickle\nimport string\n\nimport time\n\nimport gensim\nimport matplotlib.pyplot as plt\nimport nltk\nimport numpy as np\nimport scipy\nimport sklearn\nfrom gensim.models import KeyedVectors\nfrom nltk.corpus import stopwords, twitter_samples\nfrom nltk.tokenize import TweetTokenizer\n\nfrom utils import (cosine_similarity, get_dict,\n                   process_tweet)\nfrom os import getcwd\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 7</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">string</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">time</span>\n<span class=\"ansi-green-fg\">----&gt; 7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">gensim</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">nltk</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'gensim'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#de4c39fa .cell execution_count=2}\n``` {.python .cell-code}\n# add folder, tmp2, from our local workspace containing pre-downloaded corpora files to nltk's data path\nfilePath = f\"{getcwd()}/../tmp2/\"\nnltk.data.path.append(filePath)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># add folder, tmp2, from our local workspace containing pre-downloaded corpora files to nltk's data path</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> filePath <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span><span class=\"ansi-yellow-bg\">getcwd</span>()<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">/../tmp2/</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> nltk<span style=\"color:rgb(98,98,98)\">.</span>data<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>append(filePath)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'getcwd' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n<a name=\"1\"></a>\n\n# 1. The word embeddings data for English and French words\n\nWrite a program that translates English to French.\n\n## The data\n\nThe full dataset for English embeddings is about 3.64 gigabytes, and the French\nembeddings are about 629 megabytes. To prevent the Coursera workspace from\ncrashing, we've extracted a subset of the embeddings for the words that you'll\nuse in this assignment.\n\nIf you want to run this on your local computer and use the full dataset,\nyou can download the\n* English embeddings from Google code archive word2vec\n[look for GoogleNews-vectors-negative300.bin.gz](https://code.google.com/archive/p/word2vec/)\n    * You'll need to unzip the file first.\n* and the French embeddings from\n[cross_lingual_text_classification](https://github.com/vjstark/crosslingual_text_classification).\n    * in the terminal, type (in one line)\n    `curl -o ./wiki.multi.fr.vec https://dl.fbaipublicfiles.com/arrival/vectors/wiki.multi.fr.vec`\n\nThen copy-paste the code below and run it.\n\n```python\n# Use this code to download and process the full dataset on your local computer\n\nfrom gensim.models import KeyedVectors\n\nen_embeddings = KeyedVectors.load_word2vec_format('./GoogleNews-vectors-negative300.bin', binary = True)\nfr_embeddings = KeyedVectors.load_word2vec_format('./wiki.multi.fr.vec')\n\n\n# loading the english to french dictionaries\nen_fr_train = get_dict('en-fr.train.txt')\nprint('The length of the english to french training dictionary is', len(en_fr_train))\nen_fr_test = get_dict('en-fr.test.txt')\nprint('The length of the english to french test dictionary is', len(en_fr_train))\n\nenglish_set = set(en_embeddings.vocab)\nfrench_set = set(fr_embeddings.vocab)\nen_embeddings_subset = {}\nfr_embeddings_subset = {}\nfrench_words = set(en_fr_train.values())\n\nfor en_word in en_fr_train.keys():\n    fr_word = en_fr_train[en_word]\n    if fr_word in french_set and en_word in english_set:\n        en_embeddings_subset[en_word] = en_embeddings[en_word]\n        fr_embeddings_subset[fr_word] = fr_embeddings[fr_word]\n\n\nfor en_word in en_fr_test.keys():\n    fr_word = en_fr_test[en_word]\n    if fr_word in french_set and en_word in english_set:\n        en_embeddings_subset[en_word] = en_embeddings[en_word]\n        fr_embeddings_subset[fr_word] = fr_embeddings[fr_word]\n\n\npickle.dump( en_embeddings_subset, open( \"en_embeddings.p\", \"wb\" ) )\npickle.dump( fr_embeddings_subset, open( \"fr_embeddings.p\", \"wb\" ) )\n```\n\n#### The subset of data\n\nTo do the assignment on the Coursera workspace, we'll use the subset of word embeddings.\n\n::: {#c8e5c6ca .cell execution_count=3}\n``` {.python .cell-code}\nen_embeddings_subset = pickle.load(open(\"en_embeddings.p\", \"rb\"))\nfr_embeddings_subset = pickle.load(open(\"fr_embeddings.p\", \"rb\"))\n```\n:::\n\n\n#### Look at the data\n\n* en_embeddings_subset: the key is an English word, and the vaule is a\n300 dimensional array, which is the embedding for that word.\n```\n'the': array([ 0.08007812,  0.10498047,  0.04980469,  0.0534668 , -0.06738281, ....\n```\n\n* fr_embeddings_subset: the key is an French word, and the vaule is a 300\ndimensional array, which is the embedding for that word.\n```\n'la': array([-6.18250e-03, -9.43867e-04, -8.82648e-03,  3.24623e-02,...\n```\n\n#### Load two dictionaries mapping the English to French words\n* A training dictionary\n* and a testing dictionary.\n\n::: {#530b3dbc .cell execution_count=4}\n``` {.python .cell-code}\n# loading the english to french dictionaries\nen_fr_train = get_dict('en-fr.train.txt')\nprint('The length of the English to French training dictionary is', len(en_fr_train))\nen_fr_test = get_dict('en-fr.test.txt')\nprint('The length of the English to French test dictionary is', len(en_fr_train))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># loading the english to french dictionaries</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> en_fr_train <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_dict</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">en-fr.train.txt</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">The length of the English to French training dictionary is</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(0,135,0)\">len</span>(en_fr_train))\n<span class=\"ansi-green-fg ansi-bold\">      4</span> en_fr_test <span style=\"color:rgb(98,98,98)\">=</span> get_dict(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">en-fr.test.txt</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'get_dict' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n#### Looking at the English French dictionary\n\n* `en_fr_train` is a dictionary where the key is the English word and the value\nis the French translation of that English word.\n```\n{'the': 'la',\n 'and': 'et',\n 'was': 'était',\n 'for': 'pour',\n```\n\n* `en_fr_test` is similar to `en_fr_train`, but is a test set.  We won't look at it\nuntil we get to testing.\n\n<a name=\"1-1\"></a>\n\n## 1.1 Generate embedding and transform matrices\n\n<a name=\"ex-01\"></a>\n#### Exercise 01: Translating English dictionary to French by using embeddings\n\nYou will now implement a function `get_matrices`, which takes the loaded data\nand returns matrices `X` and `Y`.\n\nInputs:\n- `en_fr` : English to French dictionary\n- `en_embeddings` : English to embeddings dictionary\n- `fr_embeddings` : French to embeddings dictionary\n\nReturns:\n- Matrix `X` and matrix `Y`, where each row in X is the word embedding for an\nenglish word, and the same row in Y is the word embedding for the French\nversion of that English word.\n\n<div style=\"width:image width px; font-size:100%; text-align:center;\">\n<img src='X_to_Y.jpg' alt=\"alternate text\" width=\"width\" height=\"height\" style=\"width:800px;height:200px;\" /> Figure 2 </div>\n\nUse the `en_fr` dictionary to ensure that the ith row in the `X` matrix\ncorresponds to the ith row in the `Y` matrix.\n\n**Instructions**: Complete the function `get_matrices()`:\n* Iterate over English words in `en_fr` dictionary.\n* Check if the word have both English and French embedding.\n\n<details>\n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n    <p>\n        <ul>\n            <li><a href=\"https://realpython.com/python-sets/#set-size-and-membership\" >Sets</a> are useful data structures that can be used to check if an item is a member of a group.</li>\n            <li>You can get words which are embedded into the language by using <a href=\"https://www.w3schools.com/python/ref_dictionary_keys.asp\"> keys</a> method.</li>\n            <li>Keep vectors in `X` and `Y` sorted in list. You can use <a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ma.vstack.html\"> np.vstack()</a> to merge them into the numpy matrix. </li>\n            <li><a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html\">numpy.vstack</a> stacks the items in a list as rows in a matrix.</li>\n        </ul>\n    </p>\n\n::: {#f82b7f8b .cell execution_count=5}\n``` {.python .cell-code}\n# UNQ_C1 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef get_matrices(en_fr, french_vecs, english_vecs):\n    \"\"\"\n    Input:\n        en_fr: English to French dictionary\n        french_vecs: French words to their corresponding word embeddings.\n        english_vecs: English words to their corresponding word embeddings.\n    Output: \n        X: a matrix where the columns are the English embeddings.\n        Y: a matrix where the columns correspong to the French embeddings.\n        R: the projection matrix that minimizes the F norm ||X R -Y||^2.\n    \"\"\"\n\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n\n    # X_l and Y_l are lists of the english and french word embeddings\n    X_l = list()\n    Y_l = list()\n\n    # get the english words (the keys in the dictionary) and store in a set()\n    english_set = None\n\n    # get the french words (keys in the dictionary) and store in a set()\n    french_set = None\n\n    # store the french words that are part of the english-french dictionary (these are the values of the dictionary)\n    french_words = set(en_fr.values())\n\n    # loop through all english, french word pairs in the english french dictionary\n    for en_word, fr_word in en_fr.items():\n\n        # check that the french word has an embedding and that the english word has an embedding\n        if fr_word in french_set and en_word in english_set:\n\n            # get the english embedding\n            en_vec = english_vecs[en_word]\n\n            # get the french embedding\n            fr_vec = None\n\n            # add the english embedding to the list\n            X_l.append(en_vec)\n\n            # add the french embedding to the list\n            None\n\n    # stack the vectors of X_l into a matrix X\n    X = None\n\n    # stack the vectors of Y_l into a matrix Y\n    Y = None\n    ### END CODE HERE ###\n\n    return X, Y\n```\n:::\n\n\nNow we will use function `get_matrices()` to obtain sets `X_train` and `Y_train`\nof English and French word embeddings into the corresponding vector space models.\n\n::: {#a7b9cd13 .cell execution_count=6}\n``` {.python .cell-code}\n# UNQ_C2 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\n# getting the training set:\nX_train, Y_train = get_matrices(\n    en_fr_train, fr_embeddings_subset, en_embeddings_subset)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C2 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> \n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># getting the training set:</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> X_train, Y_train <span style=\"color:rgb(98,98,98)\">=</span> get_matrices(\n<span class=\"ansi-green-fg\">----&gt; 6</span>     <span class=\"ansi-yellow-bg\">en_fr_train</span>, fr_embeddings_subset, en_embeddings_subset)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'en_fr_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n<a name=\"2\"></a>\n\n# 2. Translations\n\n<div style=\"width:image width px; font-size:100%; text-align:center;\"><img src='e_to_f.jpg' alt=\"alternate text\" width=\"width\" height=\"height\" style=\"width:700px;height:200px;\" /> Figure 1 </div>\n\nWrite a program that translates English words to French words using word embeddings and vector space models. \n\n<a name=\"2-1\"></a>\n## 2.1 Translation as linear transformation of embeddings\n\nGiven dictionaries of English and French word embeddings you will create a transformation matrix `R`\n* Given an English word embedding, $\\mathbf{e}$, you can multiply $\\mathbf{eR}$ to get a new word embedding $\\mathbf{f}$.\n    * Both $\\mathbf{e}$ and $\\mathbf{f}$ are [row vectors](https://en.wikipedia.org/wiki/Row_and_column_vectors).\n* You can then compute the nearest neighbors to `f` in the french embeddings and recommend the word that is most similar to the transformed word embedding.\n\n### Describing translation as the minimization problem\n\nFind a matrix `R` that minimizes the following equation. \n\n$$\\arg \\min _{\\mathbf{R}}\\| \\mathbf{X R} - \\mathbf{Y}\\|_{F}\\tag{1} $$\n\n### Frobenius norm\n\nThe Frobenius norm of a matrix $A$ (assuming it is of dimension $m,n$) is defined as the square root of the sum of the absolute squares of its elements:\n\n$$\\|\\mathbf{A}\\|_{F} \\equiv \\sqrt{\\sum_{i=1}^{m} \\sum_{j=1}^{n}\\left|a_{i j}\\right|^{2}}\\tag{2}$$\n\n### Actual loss function\nIn the real world applications, the Frobenius norm loss:\n\n$$\\| \\mathbf{XR} - \\mathbf{Y}\\|_{F}$$\n\nis often replaced by it's squared value divided by $m$:\n\n$$ \\frac{1}{m} \\|  \\mathbf{X R} - \\mathbf{Y} \\|_{F}^{2}$$\n\nwhere $m$ is the number of examples (rows in $\\mathbf{X}$).\n\n* The same R is found when using this loss function versus the original Frobenius norm.\n* The reason for taking the square is that it's easier to compute the gradient of the squared Frobenius.\n* The reason for dividing by $m$ is that we're more interested in the average loss per embedding than the  loss for the entire training set.\n    * The loss for all training set increases with more words (training examples),\n    so taking the average helps us to track the average loss regardless of the size of the training set.\n\n##### [Optional] Detailed explanation why we use norm squared instead of the norm:\n<details>\n<summary>\n    Click for optional details\n</summary>\n    <p>\n        <ul>\n            <li>The norm is always nonnegative (we're summing up absolute values), and so is the square. \n            <li> When we take the square of all non-negative (positive or zero) numbers, the order of the data is preserved.  \n            <li> For example, if 3 > 2, 3^2 > 2^2\n            <li> Using the norm or squared norm in gradient descent results in the same <i>location</i> of the minimum.\n            <li> Squaring cancels the square root in the Frobenius norm formula. Because of the <a href=\"https://en.wikipedia.org/wiki/Chain_rule\"> chain rule</a>, we would have to do more calculations if we had a square root in our expression for summation.\n            <li> Dividing the function value by the positive number doesn't change the optimum of the function, for the same reason as described above.\n            <li> We're interested in transforming English embedding into the French. Thus, it is more important to measure average loss per embedding than the loss for the entire dictionary (which increases as the number of words in the dictionary increases).\n        </ul>\n    </p>\n    \n\n<a name=\"ex-02\"></a>\n\n### Exercise 02: Implementing translation mechanism described in this section.\n\n#### Step 1: Computing the loss\n* The loss function will be squared Frobenoius norm of the difference between\nmatrix and its approximation, divided by the number of training examples $m$.\n* Its formula is:\n$$ L(X, Y, R)=\\frac{1}{m}\\sum_{i=1}^{m} \\sum_{j=1}^{n}\\left( a_{i j} \\right)^{2}$$\n\nwhere $a_{i j}$ is value in $i$th row and $j$th column of the matrix $\\mathbf{XR}-\\mathbf{Y}$.\n\n#### Instructions: complete the `compute_loss()` function\n\n* Compute the approximation of `Y` by matrix multiplying `X` and `R`\n* Compute difference `XR - Y`\n* Compute the squared Frobenius norm of the difference and divide it by $m$.\n\n<details>    \n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n   <li> Useful functions:\n       <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html\">Numpy dot </a>,\n       <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html\">Numpy sum</a>,\n       <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.square.html\">Numpy square</a>,\n       <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html\">Numpy norm</a>\n    </li>\n   <li> Be careful about which operation is elementwise and which operation is a matrix multiplication.</li>\n   <li> Try to use matrix operations instead of the numpy norm function.  If you choose to use norm function, take care of extra arguments and that it's returning loss squared, and not the loss itself.</li>\n\n</ul>\n</p>\n\n::: {#06eab0d6 .cell execution_count=7}\n``` {.python .cell-code}\n# UNQ_C3 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef compute_loss(X, Y, R):\n    '''\n    Inputs: \n        X: a matrix of dimension (m,n) where the columns are the English embeddings.\n        Y: a matrix of dimension (m,n) where the columns correspong to the French embeddings.\n        R: a matrix of dimension (n,n) - transformation matrix from English to French vector space embeddings.\n    Outputs:\n        L: a matrix of dimension (m,n) - the value of the loss function for given X, Y and R.\n    '''\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # m is the number of rows in X\n    m = None\n    \n    # diff is XR - Y\n    diff = None\n\n    # diff_squared is the element-wise square of the difference\n    diff_squared = None\n\n    # sum_diff_squared is the sum of the squared elements\n    sum_diff_squared = None\n\n    # loss i the sum_diff_squard divided by the number of examples (m)\n    loss = None\n    ### END CODE HERE ###\n    return loss\n```\n:::\n\n\n<a name=\"ex-03\"></a>\n\n### Exercise 03\n\n### Step 2: Computing the gradient of loss in respect to transform matrix R\n\n* Calculate the gradient of the loss with respect to transform matrix `R`.\n* The gradient is a matrix that encodes how much a small change in `R`\naffect the change in the loss function.\n* The gradient gives us the direction in which we should decrease `R`\nto minimize the loss.\n* $m$ is the number of training examples (number of rows in $X$).\n* The formula for the gradient of the loss function $𝐿(𝑋,𝑌,𝑅)$ is:\n\n$$\\frac{d}{dR}𝐿(𝑋,𝑌,𝑅)=\\frac{d}{dR}\\Big(\\frac{1}{m}\\| X R -Y\\|_{F}^{2}\\Big) = \\frac{2}{m}X^{T} (X R - Y)$$\n\n**Instructions**: Complete the `compute_gradient` function below.\n\n<details>\n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n    <ul>\n    <li><a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.T.html\" > Transposing in numpy </a></li>\n    <li><a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.shape.html\" > Finding out the dimensions</a> of matrices in numpy </li>\n    <li>Remember to use numpy.dot for matrix multiplication </li>\n    </ul>\n</p>\n\n::: {#9cb0691e .cell execution_count=8}\n``` {.python .cell-code}\n# UNQ_C4 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef compute_gradient(X, Y, R):\n    '''\n    Inputs: \n        X: a matrix of dimension (m,n) where the columns are the English embeddings.\n        Y: a matrix of dimension (m,n) where the columns correspong to the French embeddings.\n        R: a matrix of dimension (n,n) - transformation matrix from English to French vector space embeddings.\n    Outputs:\n        g: a matrix of dimension (n,n) - gradient of the loss function L for given X, Y and R.\n    '''\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # m is the number of rows in X\n    m = None\n\n    # gradient is X^T(XR - Y) * 2/m\n    gradient = None\n    ### END CODE HERE ###\n    return gradient\n```\n:::\n\n\n### Step 3: Finding the optimal R with gradient descent algorithm\n\n#### Gradient descent\n\n[Gradient descent](https://ml-cheatsheet.readthedocs.io/en/latest/gradient_descent.html) is an iterative algorithm which is used in searching for the optimum of the function. \n* Earlier, we've mentioned that the gradient of the loss with respect to the matrix encodes how much a tiny change in some coordinate of that matrix affect the change of loss function.\n* Gradient descent uses that information to iteratively change matrix `R` until we reach a point where the loss is minimized. \n\n#### Training with a fixed number of iterations\n\nMost of the time we iterate for a fixed number of training steps rather than iterating until the loss falls below a threshold.\n\n##### OPTIONAL: explanation for fixed number of iterations\n<details>\n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>click here for detailed discussion</b></font>\n</summary>\n<p>\n<ul>\n    <li> You cannot rely on training loss getting low -- what you really want is the validation loss to go down, or validation accuracy to go up. And indeed - in some cases people train until validation accuracy reaches a threshold, or -- commonly known as \"early stopping\" -- until the validation accuracy starts to go down, which is a sign of over-fitting.\n    </li>\n    <li>\n    Why not always do \"early stopping\"? Well, mostly because well-regularized models on larger data-sets never stop improving. Especially in NLP, you can often continue training for months and the model will continue getting slightly and slightly better. This is also the reason why it's hard to just stop at a threshold -- unless there's an external customer setting the threshold, why stop, where do you put the threshold?\n    </li>\n    <li>Stopping after a certain number of steps has the advantage that you know how long your training will take - so you can keep some sanity and not train for months. You can then try to get the best performance within this time budget. Another advantage is that you can fix your learning rate schedule -- e.g., lower the learning rate at 10% before finish, and then again more at 1% before finishing. Such learning rate schedules help a lot, but are harder to do if you don't know how long you're training.\n    </li>\n</ul>\n</p>\n\nPseudocode:\n1. Calculate gradient $g$ of the loss with respect to the matrix $R$.\n2. Update $R$ with the formula:\n$$R_{\\text{new}}= R_{\\text{old}}-\\alpha g$$\n\nWhere $\\alpha$ is the learning rate, which is a scalar.\n\n#### Learning rate\n\n* The learning rate or \"step size\" $\\alpha$ is a coefficient which decides how much we want to change $R$ in each step.\n* If we change $R$ too much, we could skip the optimum by taking too large of a step.\n* If we make only small changes to $R$, we will need many steps to reach the optimum.\n* Learning rate $\\alpha$ is used to control those changes.\n* Values of $\\alpha$ are chosen depending on the problem, and we'll use `learning_rate`$=0.0003$ as the default value for our algorithm.\n\n<a name=\"ex-04\"></a>\n\n### Exercise 04\n\n#### Instructions: Implement `align_embeddings()`\n\n<details>\n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li>Use the 'compute_gradient()' function to get the gradient in each step</li>\n\n</ul>\n</p>\n\n::: {#4bf56fd5 .cell execution_count=9}\n``` {.python .cell-code}\n# UNQ_C5 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef align_embeddings(X, Y, train_steps=100, learning_rate=0.0003):\n    '''\n    Inputs:\n        X: a matrix of dimension (m,n) where the columns are the English embeddings.\n        Y: a matrix of dimension (m,n) where the columns correspong to the French embeddings.\n        train_steps: positive int - describes how many steps will gradient descent algorithm do.\n        learning_rate: positive float - describes how big steps will  gradient descent algorithm do.\n    Outputs:\n        R: a matrix of dimension (n,n) - the projection matrix that minimizes the F norm ||X R -Y||^2\n    '''\n    np.random.seed(129)\n\n    # the number of columns in X is the number of dimensions for a word vector (e.g. 300)\n    # R is a square matrix with length equal to the number of dimensions in th  word embedding\n    R = np.random.rand(X.shape[1], X.shape[1])\n\n    for i in range(train_steps):\n        if i % 25 == 0:\n            print(f\"loss at iteration {i} is: {compute_loss(X, Y, R):.4f}\")\n        ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n        # use the function that you defined to compute the gradient\n        gradient = None\n\n        # update R by subtracting the learning rate times gradient\n        R -= None\n        ### END CODE HERE ###\n    return R\n```\n:::\n\n\n::: {#3e551133 .cell execution_count=10}\n``` {.python .cell-code}\n# UNQ_C6 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\n# Testing your implementation.\nnp.random.seed(129)\nm = 10\nn = 5\nX = np.random.rand(m, n)\nY = np.random.rand(m, n) * .1\nR = align_embeddings(X, Y)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C6 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> \n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Testing your implementation.</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\">.</span>random<span style=\"color:rgb(98,98,98)\">.</span>seed(<span style=\"color:rgb(98,98,98)\">129</span>)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> m <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">10</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> n <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">5</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'np' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Expected Output:**\n```\nloss at iteration 0 is: 3.7242\nloss at iteration 25 is: 3.6283\nloss at iteration 50 is: 3.5350\nloss at iteration 75 is: 3.4442\n```\n\n## Calculate transformation matrix R\n\nUsing those the training set, find the transformation matrix $\\mathbf{R}$ by calling the function `align_embeddings()`.\n\n**NOTE:** The code cell below will take a few minutes to fully execute (~3 mins)\n\n::: {#f8ed4d4c .cell execution_count=11}\n``` {.python .cell-code}\n# UNQ_C7 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\nR_train = align_embeddings(X_train, Y_train, train_steps=400, learning_rate=0.8)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C7 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> R_train <span style=\"color:rgb(98,98,98)\">=</span> align_embeddings(<span class=\"ansi-yellow-bg\">X_train</span>, Y_train, train_steps<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">400</span>, learning_rate<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.8</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X_train' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected Output\n\n```\nloss at iteration 0 is: 963.0146\nloss at iteration 25 is: 97.8292\nloss at iteration 50 is: 26.8329\nloss at iteration 75 is: 9.7893\nloss at iteration 100 is: 4.3776\nloss at iteration 125 is: 2.3281\nloss at iteration 150 is: 1.4480\nloss at iteration 175 is: 1.0338\nloss at iteration 200 is: 0.8251\nloss at iteration 225 is: 0.7145\nloss at iteration 250 is: 0.6534\nloss at iteration 275 is: 0.6185\nloss at iteration 300 is: 0.5981\nloss at iteration 325 is: 0.5858\nloss at iteration 350 is: 0.5782\nloss at iteration 375 is: 0.5735\n```\n\n<a name=\"2-2\"></a>\n\n## 2.2 Testing the translation\n\n### k-Nearest neighbors algorithm\n\n[k-Nearest neighbors algorithm](https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm) \n* k-NN is a method which takes a vector as input and finds the other vectors in the dataset that are closest to it. \n* The 'k' is the number of \"nearest neighbors\" to find (e.g. k=2 finds the closest two neighbors).\n\n### Searching for the translation embedding\nSince we're approximating the translation function from English to French embeddings by a linear transformation matrix $\\mathbf{R}$, most of the time we won't get the exact embedding of a French word when we transform embedding $\\mathbf{e}$ of some particular English word into the French embedding space. \n* This is where $k$-NN becomes really useful! By using $1$-NN with $\\mathbf{eR}$ as input, we can search for an embedding $\\mathbf{f}$ (as a row) in the matrix $\\mathbf{Y}$ which is the closest to the transformed vector $\\mathbf{eR}$\n\n### Cosine similarity\nCosine similarity between vectors $u$ and $v$ calculated as the cosine of the angle between them.\nThe formula is \n\n$$\\cos(u,v)=\\frac{u\\cdot v}{\\left\\|u\\right\\|\\left\\|v\\right\\|}$$\n\n* $\\cos(u,v)$ = $1$ when $u$ and $v$ lie on the same line and have the same direction.\n* $\\cos(u,v)$ is $-1$ when they have exactly opposite directions.\n* $\\cos(u,v)$ is $0$ when the vectors are orthogonal (perpendicular) to each other.\n\n#### Note: Distance and similarity are pretty much opposite things.\n* We can obtain distance metric from cosine similarity, but the cosine similarity can't be used directly as the distance metric. \n* When the cosine similarity increases (towards $1$), the \"distance\" between the two vectors decreases (towards $0$). \n* We can define the cosine distance between $u$ and $v$ as\n$$d_{\\text{cos}}(u,v)=1-\\cos(u,v)$$\n\n<a name=\"ex-05\"></a>\n\n**Exercise 05**: Complete the function `nearest_neighbor()`\n\nInputs:\n* Vector `v`,\n* A set of possible nearest neighbors `candidates`\n* `k` nearest neighbors to find.\n* The distance metric should be based on cosine similarity.\n* `cosine_similarity` function is already implemented and imported for you. It's arguments are two vectors and it returns the cosine of the angle between them.\n* Iterate over rows in `candidates`, and save the result of similarities between current row and vector `v` in a python list. Take care that similarities are in the same order as row vectors of `candidates`.\n* Now you can use [numpy argsort]( https://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html#numpy.argsort) to sort the indices for the rows of `candidates`.\n\n<details>\n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li> numpy.argsort sorts values from most negative to most positive (smallest to largest) </li>\n    <li> The candidates that are nearest to 'v' should have the highest cosine similarity </li>\n    <li> To get the last element of a list 'tmp', the notation is tmp[-1:] </li>\n</ul>\n</p>\n\n::: {#e28ed7d2 .cell execution_count=12}\n``` {.python .cell-code}\n# UNQ_C8 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef nearest_neighbor(v, candidates, k=1):\n    \"\"\"\n    Input:\n      - v, the vector you are going find the nearest neighbor for\n      - candidates: a set of vectors where we will find the neighbors\n      - k: top k nearest neighbors to find\n    Output:\n      - k_idx: the indices of the top k closest vectors in sorted form\n    \"\"\"\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    similarity_l = []\n\n    # for each candidate vector...\n    for row in candidates:\n        # get the cosine similarity\n        cos_similarity = None\n\n        # append the similarity to the list\n        None\n        \n    # sort the similarity list and get the indices of the sorted list\n    sorted_ids = None\n\n    # get the indices of the k most similar candidate vectors\n    k_idx = None\n    ### END CODE HERE ###\n    return k_idx\n```\n:::\n\n\n::: {#6477011e .cell execution_count=13}\n``` {.python .cell-code}\n# UNQ_C9 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\n# Test your implementation:\nv = np.array([1, 0, 1])\ncandidates = np.array([[1, 0, 5], [-2, 5, 3], [2, 0, 1], [6, -9, 5], [9, 9, 9]])\nprint(candidates[nearest_neighbor(v, candidates, 3)])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C9 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> \n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Test your implementation:</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> v <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\">.</span>array([<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>])\n<span class=\"ansi-green-fg ansi-bold\">      6</span> candidates <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>array([[<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">5</span>], [<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">2</span>, <span style=\"color:rgb(98,98,98)\">5</span>, <span style=\"color:rgb(98,98,98)\">3</span>], [<span style=\"color:rgb(98,98,98)\">2</span>, <span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(98,98,98)\">1</span>], [<span style=\"color:rgb(98,98,98)\">6</span>, <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">9</span>, <span style=\"color:rgb(98,98,98)\">5</span>], [<span style=\"color:rgb(98,98,98)\">9</span>, <span style=\"color:rgb(98,98,98)\">9</span>, <span style=\"color:rgb(98,98,98)\">9</span>]])\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"color:rgb(0,135,0)\">print</span>(candidates[nearest_neighbor(v, candidates, <span style=\"color:rgb(98,98,98)\">3</span>)])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'np' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Expected Output**:\n\n`[[9 9 9]\n [1 0 5]\n [2 0 1]]`\n\n### Test your translation and compute its accuracy\n\n<a name=\"ex-06\"></a>\n**Exercise 06**:\nComplete the function `test_vocabulary` which takes in English\nembedding matrix $X$, French embedding matrix $Y$ and the $R$\nmatrix and returns the accuracy of translations from $X$ to $Y$ by $R$.\n\n* Iterate over transformed English word embeddings and check if the\nclosest French word vector belongs to French word that is the actual\ntranslation.\n* Obtain an index of the closest French embedding by using\n`nearest_neighbor` (with argument `k=1`), and compare it to the index\nof the English embedding you have just transformed.\n* Keep track of the number of times you get the correct translation.\n* Calculate accuracy as $$\\text{accuracy}=\\frac{\\#(\\text{correct predictions})}{\\#(\\text{total predictions})}$$\n\n::: {#da2dcdbc .cell execution_count=14}\n``` {.python .cell-code}\n# UNQ_C10 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef test_vocabulary(X, Y, R):\n    '''\n    Input:\n        X: a matrix where the columns are the English embeddings.\n        Y: a matrix where the columns correspong to the French embeddings.\n        R: the transform matrix which translates word embeddings from\n        English to French word vector space.\n    Output:\n        accuracy: for the English to French capitals\n    '''\n\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # The prediction is X times R\n    pred = None\n\n    # initialize the number correct to zero\n    num_correct = 0\n\n    # loop through each row in pred (each transformed embedding)\n    for i in range(len(pred)):\n        # get the index of the nearest neighbor of pred at row 'i'; also pass in the candidates in Y\n        pred_idx = None\n\n        # if the index of the nearest neighbor equals the row of i... \\\n        if pred_idx == i:\n            # increment the number correct by 1.\n            num_correct += None\n\n    # accuracy is the number correct divided by the number of rows in 'pred' (also number of rows in X)\n    accuracy = None\n\n    ### END CODE HERE ###\n\n    return accuracy\n```\n:::\n\n\nLet's see how is your translation mechanism working on the unseen data:\n\n::: {#d5feb262 .cell execution_count=15}\n``` {.python .cell-code}\nX_val, Y_val = get_matrices(en_fr_test, fr_embeddings_subset, en_embeddings_subset)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> X_val, Y_val <span style=\"color:rgb(98,98,98)\">=</span> get_matrices(<span class=\"ansi-yellow-bg\">en_fr_test</span>, fr_embeddings_subset, en_embeddings_subset)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'en_fr_test' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b6a73822 .cell execution_count=16}\n``` {.python .cell-code}\n# UNQ_C11 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\nacc = test_vocabulary(X_val, Y_val, R_train)  # this might take a minute or two\nprint(f\"accuracy on test set is {acc:.3f}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C11 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything</span>\n<span class=\"ansi-green-fg\">----&gt; 4</span> acc <span style=\"color:rgb(98,98,98)\">=</span> test_vocabulary(<span class=\"ansi-yellow-bg\">X_val</span>, Y_val, R_train)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># this might take a minute or two</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">accuracy on test set is </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>acc<span style=\"font-weight:bold;color:rgb(175,95,135)\">:</span><span style=\"color:rgb(175,0,0)\">.3f</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X_val' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Expected Output**:\n\n```\n0.557\n```\n\nYou managed to translate words from one language to another language\nwithout ever seing them with almost 56% accuracy by using some basic\nlinear algebra and learning a mapping of words from one language to another!\n\n<a name=\"3\"></a>\n\n# 3. LSH and document search\n\nIn this part of the assignment, you will implement a more efficient version\nof k-nearest neighbors using locality sensitive hashing.\nYou will then apply this to document search.\n\n* Process the tweets and represent each tweet as a vector (represent a\ndocument with a vector embedding).\n* Use locality sensitive hashing and k nearest neighbors to find tweets\nthat are similar to a given tweet.\n\n::: {#b7fdb6bd .cell execution_count=17}\n``` {.python .cell-code}\n# get the positive and negative tweets\nall_positive_tweets = twitter_samples.strings('positive_tweets.json')\nall_negative_tweets = twitter_samples.strings('negative_tweets.json')\nall_tweets = all_positive_tweets + all_negative_tweets\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># get the positive and negative tweets</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> all_positive_tweets <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">twitter_samples</span><span style=\"color:rgb(98,98,98)\">.</span>strings(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">positive_tweets.json</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> all_negative_tweets <span style=\"color:rgb(98,98,98)\">=</span> twitter_samples<span style=\"color:rgb(98,98,98)\">.</span>strings(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">negative_tweets.json</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> all_tweets <span style=\"color:rgb(98,98,98)\">=</span> all_positive_tweets <span style=\"color:rgb(98,98,98)\">+</span> all_negative_tweets\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'twitter_samples' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n<a name=\"3-1\"></a>\n\n### 3.1 Getting the document embeddings\n\n#### Bag-of-words (BOW) document models\nText documents are sequences of words.\n* The ordering of words makes a difference. For example, sentences \"Apple pie is\nbetter than pepperoni pizza.\" and \"Pepperoni pizza is better than apple pie\"\nhave opposite meanings due to the word ordering.\n* However, for some applications, ignoring the order of words can allow\nus to train an efficient and still effective model.\n* This approach is called Bag-of-words document model.\n\n#### Document embeddings\n* Document embedding is created by summing up the embeddings of all words\nin the document.\n* If we don't know the embedding of some word, we can ignore that word.\n\n<a name=\"ex-07\"></a>\n\n**Exercise 07**:\nComplete the `get_document_embedding()` function.\n* The function `get_document_embedding()` encodes entire document as a \"document\" embedding.\n* It takes in a docoument (as a string) and a dictionary, `en_embeddings`\n* It processes the document, and looks up the corresponding embedding of each word.\n* It then sums them up and returns the sum of all word vectors of that processed tweet.\n\n<details>\n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li> You can handle missing words easier by using the `get()` method of the python dictionary instead of the bracket notation (i.e. \"[ ]\"). See more about it <a href=\"https://stackoverflow.com/a/11041421/12816433\" >here</a> </li>\n    <li> The default value for missing word should be the zero vector. Numpy will <a href=\"https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html\" > broadcast </a> simple 0 scalar into a vector of zeros during the summation.</li>\n    <li>Alternatively, skip the addition if a word is not in the dictonary. </li>\n    <li>  You can use your `process_tweet()` function which allows you to process the tweet. The function just takes in a tweet and returns a list of words.</li>\n</ul>\n</p>\n\n::: {#4791088a .cell execution_count=18}\n``` {.python .cell-code}\n# UNQ_C12 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef get_document_embedding(tweet, en_embeddings): \n    '''\n    Input:\n        - tweet: a string\n        - en_embeddings: a dictionary of word embeddings\n    Output:\n        - doc_embedding: sum of all word embeddings in the tweet\n    '''\n    doc_embedding = np.zeros(300)\n\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # process the document into a list of words (process the tweet)\n    processed_doc = None\n    for word in processed_doc:\n        # add the word embedding to the running total for the document embedding\n        doc_embedding = None\n    ### END CODE HERE ###\n    return doc_embedding\n```\n:::\n\n\n::: {#8a81bf8c .cell execution_count=19}\n``` {.python .cell-code}\n# UNQ_C13 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\n# testing your function\ncustom_tweet = \"RT @Twitter @chapagain Hello There! Have a great day. :) #good #morning http://chapagain.com.np\"\ntweet_embedding = get_document_embedding(custom_tweet, en_embeddings_subset)\ntweet_embedding[-5:]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C13 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> \n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># testing your function</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> custom_tweet <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">RT @Twitter @chapagain Hello There! Have a great day. :) #good #morning http://chapagain.com.np</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; 6</span> tweet_embedding <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_document_embedding</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">custom_tweet</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">en_embeddings_subset</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> tweet_embedding[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">5</span>:]\n\nCell <span class=\"ansi-green-fg\">In[18], line 10</span>, in <span class=\"ansi-cyan-fg\">get_document_embedding</span><span class=\"ansi-blue-fg\">(tweet, en_embeddings)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">get_document_embedding</span>(tweet, en_embeddings): \n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(188,188,188)\">    </span><span style=\"font-style:italic;color:rgb(175,0,0)\">'''</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    Input:</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">        - tweet: a string</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">        - doc_embedding: sum of all word embeddings in the tweet</span>\n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    '''</span>\n<span class=\"ansi-green-fg\">---&gt; 10</span>     doc_embedding <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\">.</span>zeros(<span style=\"color:rgb(98,98,98)\">300</span>)\n<span class=\"ansi-green-fg ansi-bold\">     12</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\">### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###</span>\n<span class=\"ansi-green-fg ansi-bold\">     13</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># process the document into a list of words (process the tweet)</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span>     processed_doc <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'np' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Expected output**:\n\n```\narray([-0.00268555, -0.15378189, -0.55761719, -0.07216644, -0.32263184])\n```\n\n<a name=\"ex-08\"></a>\n\n### Exercise 08\n\n#### Store all document vectors into a dictionary\nNow, let's store all the tweet embeddings into a dictionary.\nImplement `get_document_vecs()`\n\n::: {#3f11faf2 .cell execution_count=20}\n``` {.python .cell-code}\n# UNQ_C14 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef get_document_vecs(all_docs, en_embeddings):\n    '''\n    Input:\n        - all_docs: list of strings - all tweets in our dataset.\n        - en_embeddings: dictionary with words as the keys and their embeddings as the values.\n    Output:\n        - document_vec_matrix: matrix of tweet embeddings.\n        - ind2Doc_dict: dictionary with indices of tweets in vecs as keys and their embeddings as the values.\n    '''\n\n    # the dictionary's key is an index (integer) that identifies a specific tweet\n    # the value is the document embedding for that document\n    ind2Doc_dict = {}\n\n    # this is list that will store the document vectors\n    document_vec_l = []\n\n    for i, doc in enumerate(all_docs):\n\n        ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n        # get the document embedding of the tweet\n        doc_embedding = None\n\n        # save the document embedding into the ind2Tweet dictionary at index i\n        ind2Doc_dict[i] = None\n\n        # append the document embedding to the list of document vectors\n        document_vec_l.append(None)\n\n        ### END CODE HERE ###\n\n    # convert the list of document vectors into a 2D array (each row is a document vector)\n    document_vec_matrix = np.vstack(document_vec_l)\n\n    return document_vec_matrix, ind2Doc_dict\n```\n:::\n\n\n::: {#5ac2c2cf .cell execution_count=21}\n``` {.python .cell-code}\ndocument_vecs, ind2Tweet = get_document_vecs(all_tweets, en_embeddings_subset)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> document_vecs, ind2Tweet <span style=\"color:rgb(98,98,98)\">=</span> get_document_vecs(<span class=\"ansi-yellow-bg\">all_tweets</span>, en_embeddings_subset)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'all_tweets' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a618c1ed .cell execution_count=22}\n``` {.python .cell-code}\n# UNQ_C15 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\nprint(f\"length of dictionary {len(ind2Tweet)}\")\nprint(f\"shape of document_vecs {document_vecs.shape}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C15 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything</span>\n<span class=\"ansi-green-fg\">----&gt; 4</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">length of dictionary </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span><span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">ind2Tweet</span>)<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">shape of document_vecs </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>document_vecs<span style=\"color:rgb(98,98,98)\">.</span>shape<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ind2Tweet' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected Output\n```\nlength of dictionary 10000\nshape of document_vecs (10000, 300)\n```\n\n<a name=\"3-2\"></a>\n\n## 3.2 Looking up the tweets\n\nNow you have a vector of dimension (m,d) where `m` is the number of tweets\n(10,000) and `d` is the dimension of the embeddings (300).  Now you\nwill input a tweet, and use cosine similarity to see which tweet in our\ncorpus is similar to your tweet.\n\n::: {#a3a30ec2 .cell execution_count=23}\n``` {.python .cell-code}\nmy_tweet = 'i am sad'\nprocess_tweet(my_tweet)\ntweet_embedding = get_document_embedding(my_tweet, en_embeddings_subset)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[23], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> my_tweet <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">i am sad</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">process_tweet</span>(my_tweet)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> tweet_embedding <span style=\"color:rgb(98,98,98)\">=</span> get_document_embedding(my_tweet, en_embeddings_subset)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'process_tweet' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f2701ffa .cell execution_count=24}\n``` {.python .cell-code}\n# UNQ_C16 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\n# this gives you a similar tweet as your input.\n# this implementation is vectorized...\nidx = np.argmax(cosine_similarity(document_vecs, tweet_embedding))\nprint(all_tweets[idx])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C16 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> \n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># this gives you a similar tweet as your input.</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># this implementation is vectorized...</span>\n<span class=\"ansi-green-fg\">----&gt; 6</span> idx <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\">.</span>argmax(cosine_similarity(document_vecs, tweet_embedding))\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"color:rgb(0,135,0)\">print</span>(all_tweets[idx])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'np' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected Output\n\n```\n@zoeeylim sad sad sad kid :( it's ok I help you watch the match HAHAHAHAHA\n```\n\n<a name=\"3-3\"></a>\n\n## 3.3 Finding the most similar tweets with LSH\n\nYou will now implement locality sensitive hashing (LSH) to identify the most similar tweet.\n* Instead of looking at all 10,000 vectors, you can just search a subset to find\nits nearest neighbors.\n\nLet's say your data points are plotted like this:\n\n\n<div style=\"width:image width px; font-size:100%; text-align:center;\"><img src='one.png' alt=\"alternate text\" width=\"width\" height=\"height\" style=\"width:400px;height:200px;\" /> Figure 3 </div>\n\nYou can divide the vector space into regions and search within one region for nearest neighbors of a given vector.\n\n<div style=\"width:image width px; font-size:100%; text-align:center;\"><img src='four.png' alt=\"alternate text\" width=\"width\" height=\"height\" style=\"width:400px;height:200px;\" /> Figure 4 </div>\n\n::: {#344ec8db .cell execution_count=25}\n``` {.python .cell-code}\nN_VECS = len(all_tweets)       # This many vectors.\nN_DIMS = len(ind2Tweet[1])     # Vector dimensionality.\nprint(f\"Number of vectors is {N_VECS} and each has {N_DIMS} dimensions.\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> N_VECS <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">all_tweets</span>)       <span style=\"font-style:italic;color:rgb(95,135,135)\"># This many vectors.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> N_DIMS <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">len</span>(ind2Tweet[<span style=\"color:rgb(98,98,98)\">1</span>])     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Vector dimensionality.</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Number of vectors is </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>N_VECS<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\"> and each has </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>N_DIMS<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\"> dimensions.</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'all_tweets' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n#### Choosing the number of planes\n\n* Each plane divides the space to $2$ parts.\n* So $n$ planes divide the space into $2^{n}$ hash buckets.\n* We want to organize 10,000 document vectors into buckets so that every bucket has about $~16$ vectors.\n* For that we need $\\frac{10000}{16}=625$ buckets.\n* We're interested in $n$, number of planes, so that $2^{n}= 625$. Now, we can calculate $n=\\log_{2}625 = 9.29 \\approx 10$.\n\n::: {#42f635c5 .cell execution_count=26}\n``` {.python .cell-code}\n# The number of planes. We use log2(625) to have ~16 vectors/bucket.\nN_PLANES = 10\n# Number of times to repeat the hashing to improve the search.\nN_UNIVERSES = 25\n```\n:::\n\n\n<a name=\"3-4\"></a>\n\n## 3.4 Getting the hash number for a vector\n\nFor each vector, we need to get a unique number associated to that vector in order to assign it to a \"hash bucket\".\n\n### Hyperlanes in vector spaces\n* In $3$-dimensional vector space, the hyperplane is a regular plane. In $2$ dimensional vector space, the hyperplane is a line.\n* Generally, the hyperplane is subspace which has dimension $1$ lower than the original vector space has.\n* A hyperplane is uniquely defined by its normal vector.\n* Normal vector $n$ of the plane $\\pi$ is the vector to which all vectors in the plane $\\pi$ are orthogonal (perpendicular in $3$ dimensional case).\n\n### Using Hyperplanes to split the vector space\nWe can use a hyperplane to split the vector space into $2$ parts.\n* All vectors whose dot product with a plane's normal vector is positive are on one side of the plane.\n* All vectors whose dot product with the plane's normal vector is negative are on the other side of the plane.\n\n### Encoding hash buckets\n* For a vector, we can take its dot product with all the planes, then encode this information to assign the vector to a single hash bucket.\n* When the vector is pointing to the opposite side of the hyperplane than normal, encode it by 0.\n* Otherwise, if the vector is on the same side as the normal vector, encode it by 1.\n* If you calculate the dot product with each plane in the same order for every vector, you've encoded each vector's unique hash ID as a binary number, like [0, 1, 1, ... 0].\n\n<a name=\"ex-09\"></a>\n\n### Exercise 09: Implementing hash buckets\n\nWe've initialized hash table `hashes` for you. It is list of `N_UNIVERSES` matrices, each describes its own hash table. Each matrix has `N_DIMS` rows and `N_PLANES` columns. Every column of that matrix is a `N_DIMS`-dimensional normal vector for each of `N_PLANES` hyperplanes which are used for creating buckets of the particular hash table.\n\n*Exercise*: Your task is to complete the function `hash_value_of_vector` which places vector `v` in the correct hash bucket.\n\n* First multiply your vector `v`, with a corresponding plane. This will give you a vector of dimension $(1,\\text{N_planes})$.\n* You will then convert every element in that vector to 0 or 1.\n* You create a hash vector by doing the following: if the element is negative, it becomes a 0, otherwise you change it to a 1.\n* You then compute the unique number for the vector by iterating over `N_PLANES`\n* Then you multiply $2^i$ times the corresponding bit (0 or 1).\n* You will then store that sum in the variable `hash_value`.\n\n**Intructions:** Create a hash for the vector in the function below.\nUse this formula:\n\n$$ hash = \\sum_{i=0}^{N-1} \\left( 2^{i} \\times h_{i} \\right) $$\n\n#### Create the sets of planes\n* Create multiple (25) sets of planes (the planes that divide up the region).\n* You can think of these as 25 separate ways of dividing up the vector space with a different set of planes.\n* Each element of this list contains a matrix with 300 rows (the word vector have 300 dimensions), and 10 columns (there are 10 planes in each \"universe\").\n\n::: {#fc9063ff .cell execution_count=27}\n``` {.python .cell-code}\nnp.random.seed(0)\nplanes_l = [np.random.normal(size=(N_DIMS, N_PLANES))\n            for _ in range(N_UNIVERSES)]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[27], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\">.</span>random<span style=\"color:rgb(98,98,98)\">.</span>seed(<span style=\"color:rgb(98,98,98)\">0</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> planes_l <span style=\"color:rgb(98,98,98)\">=</span> [np<span style=\"color:rgb(98,98,98)\">.</span>random<span style=\"color:rgb(98,98,98)\">.</span>normal(size<span style=\"color:rgb(98,98,98)\">=</span>(N_DIMS, N_PLANES))\n<span class=\"ansi-green-fg ansi-bold\">      3</span>             <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> _ <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(N_UNIVERSES)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'np' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n<details>\n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li> numpy.squeeze() removes unused dimensions from an array; for instance, it converts a (10,1) 2D array into a (10,) 1D array</li>\n</ul>\n</p>\n\n::: {#917b152e .cell execution_count=28}\n``` {.python .cell-code}\n# UNQ_C17 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef hash_value_of_vector(v, planes):\n    \"\"\"Create a hash for a vector; hash_id says which random hash to use.\n    Input:\n        - v:  vector of tweet. It's dimension is (1, N_DIMS)\n        - planes: matrix of dimension (N_DIMS, N_PLANES) - the set of planes that divide up the region\n    Output:\n        - res: a number which is used as a hash for your vector\n\n    \"\"\"\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # for the set of planes,\n    # calculate the dot product between the vector and the matrix containing the planes\n    # remember that planes has shape (300, 10)\n    # The dot product will have the shape (1,10)\n    dot_product = None\n\n    # get the sign of the dot product (1,10) shaped vector\n    sign_of_dot_product = None\n\n    # set h to be false (eqivalent to 0 when used in operations) if the sign is negative,\n    # and true (equivalent to 1) if the sign is positive (1,10) shaped vector\n    h = None\n\n    # remove extra un-used dimensions (convert this from a 2D to a 1D array)\n    h = None\n\n    # initialize the hash value to 0\n    hash_value = 0\n\n    n_planes = planes.shape[1]\n    for i in range(n_planes):\n        # increment the hash value by 2^i * h_i\n        hash_value += None\n    ### END CODE HERE ###\n\n    # cast hash_value as an integer\n    hash_value = int(hash_value)\n\n    return hash_value\n```\n:::\n\n\n::: {#7f11b749 .cell execution_count=29}\n``` {.python .cell-code}\n# UNQ_C18 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\nnp.random.seed(0)\nidx = 0\nplanes = planes_l[idx]  # get one 'universe' of planes to test the function\nvec = np.random.rand(1, 300)\nprint(f\" The hash value for this vector,\",\n      f\"and the set of planes at index {idx},\",\n      f\"is {hash_value_of_vector(vec, planes)}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[29], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C18 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything</span>\n<span class=\"ansi-green-fg\">----&gt; 4</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\">.</span>random<span style=\"color:rgb(98,98,98)\">.</span>seed(<span style=\"color:rgb(98,98,98)\">0</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> idx <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> planes <span style=\"color:rgb(98,98,98)\">=</span> planes_l[idx]  <span style=\"font-style:italic;color:rgb(95,135,135)\"># get one 'universe' of planes to test the function</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'np' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected Output\n\n```\nThe hash value for this vector, and the set of planes at index 0, is 768\n```\n\n<a name=\"3-5\"></a>\n\n## 3.5 Creating a hash table\n\n<a name=\"ex-10\"></a>\n\n### Exercise 10\n\nGiven that you have a unique number for each vector (or tweet), You now want to create a hash table. You need a hash table, so that given a hash_id, you can quickly look up the corresponding vectors. This allows you to reduce your search by a significant amount of time.\n\n<div style=\"width:image width px; font-size:100%; text-align:center;\"><img src='table.png' alt=\"alternate text\" width=\"width\" height=\"height\" style=\"width:500px;height:200px;\" />  </div>\n\nWe have given you the `make_hash_table` function, which maps the tweet vectors to a bucket and stores the vector there. It returns the `hash_table` and the `id_table`. The `id_table` allows you know which vector in a certain bucket corresponds to what tweet.\n\n<details>    \n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li> a dictionary comprehension, similar to a list comprehension, looks like this: `{i:0 for i in range(10)}`, where the key is 'i' and the value is zero for all key-value pairs. </li>\n</ul>\n</p>\n\n::: {#c3905323 .cell execution_count=30}\n``` {.python .cell-code}\n# UNQ_C19 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# This is the code used to create a hash table: feel free to read over it\ndef make_hash_table(vecs, planes):\n    \"\"\"\n    Input:\n        - vecs: list of vectors to be hashed.\n        - planes: the matrix of planes in a single \"universe\", with shape (embedding dimensions, number of planes).\n    Output:\n        - hash_table: dictionary - keys are hashes, values are lists of vectors (hash buckets)\n        - id_table: dictionary - keys are hashes, values are list of vectors id's\n                            (it's used to know which tweet corresponds to the hashed vector)\n    \"\"\"\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n\n    # number of planes is the number of columns in the planes matrix\n    num_of_planes = None\n\n    # number of buckets is 2^(number of planes)\n    num_buckets = None\n\n    # create the hash table as a dictionary.\n    # Keys are integers (0,1,2.. number of buckets)\n    # Values are empty lists\n    hash_table = None\n\n    # create the id table as a dictionary.\n    # Keys are integers (0,1,2... number of buckets)\n    # Values are empty lists\n    id_table = None\n\n    # for each vector in 'vecs'\n    for i, v in enumerate(vecs):\n        # calculate the hash value for the vector\n        h = None\n\n        # store the vector into hash_table at key h,\n        # by appending the vector v to the list at key h\n        None\n\n        # store the vector's index 'i' (each document is given a unique integer 0,1,2...)\n        # the key is the h, and the 'i' is appended to the list at key h\n        None\n\n    ### END CODE HERE ###\n\n    return hash_table, id_table\n```\n:::\n\n\n::: {#34b19ace .cell execution_count=31}\n``` {.python .cell-code}\n# UNQ_C20 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\nnp.random.seed(0)\nplanes = planes_l[0]  # get one 'universe' of planes to test the function\nvec = np.random.rand(1, 300)\ntmp_hash_table, tmp_id_table = make_hash_table(document_vecs, planes)\n\nprint(f\"The hash table at key 0 has {len(tmp_hash_table[0])} document vectors\")\nprint(f\"The id table at key 0 has {len(tmp_id_table[0])}\")\nprint(f\"The first 5 document indices stored at key 0 of are {tmp_id_table[0][0:5]}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[31], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C20 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything</span>\n<span class=\"ansi-green-fg\">----&gt; 4</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\">.</span>random<span style=\"color:rgb(98,98,98)\">.</span>seed(<span style=\"color:rgb(98,98,98)\">0</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> planes <span style=\"color:rgb(98,98,98)\">=</span> planes_l[<span style=\"color:rgb(98,98,98)\">0</span>]  <span style=\"font-style:italic;color:rgb(95,135,135)\"># get one 'universe' of planes to test the function</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> vec <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>random<span style=\"color:rgb(98,98,98)\">.</span>rand(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">300</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'np' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n##### Expected output\n```\nThe hash table at key 0 has 3 document vectors\nThe id table at key 0 has 3\nThe first 5 document indices stored at key 0 of are [3276, 3281, 3282]\n```\n\n<a name=\"3-6\"></a>\n\n### 3.6 Creating all hash tables\n\nYou can now hash your vectors and store them in a hash table that\nwould allow you to quickly look up and search for similar vectors.\nRun the cell below to create the hashes. By doing so, you end up having\nseveral tables which have all the vectors. Given a vector, you then\nidentify the buckets in all the tables.  You can then iterate over the\nbuckets and consider much fewer vectors. The more buckets you use, the\nmore accurate your lookup will be, but also the longer it will take.\n\n::: {#c471a959 .cell execution_count=32}\n``` {.python .cell-code}\n# Creating the hashtables\nhash_tables = []\nid_tables = []\nfor universe_id in range(N_UNIVERSES):  # there are 25 hashes\n    print('working on hash universe #:', universe_id)\n    planes = planes_l[universe_id]\n    hash_table, id_table = make_hash_table(document_vecs, planes)\n    hash_tables.append(hash_table)\n    id_tables.append(id_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nworking on hash universe #: 0\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[32], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> universe_id <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(N_UNIVERSES):  <span style=\"font-style:italic;color:rgb(95,135,135)\"># there are 25 hashes</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">working on hash universe #:</span><span style=\"color:rgb(175,0,0)\">'</span>, universe_id)\n<span class=\"ansi-green-fg\">----&gt; 6</span>     planes <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">planes_l</span>[universe_id]\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     hash_table, id_table <span style=\"color:rgb(98,98,98)\">=</span> make_hash_table(document_vecs, planes)\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     hash_tables<span style=\"color:rgb(98,98,98)\">.</span>append(hash_table)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'planes_l' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Approximate K-NN\n\n<a name=\"ex-11\"></a>\n\n### Exercise 11\n\nImplement approximate K nearest neighbors using locality sensitive hashing,\nto search for documents that are similar to a given document at the\nindex `doc_id`.\n\n##### Inputs\n* `doc_id` is the index into the document list `all_tweets`.\n* `v` is the document vector for the tweet in `all_tweets` at index `doc_id`.\n* `planes_l` is the list of planes (the global variable created earlier).\n* `k` is the number of nearest neighbors to search for.\n* `num_universes_to_use`: to save time, we can use fewer than the total\nnumber of available universes.  By default, it's set to `N_UNIVERSES`,\nwhich is $25$ for this assignment.\n\nThe `approximate_knn` function finds a subset of candidate vectors that\nare in the same \"hash bucket\" as the input vector 'v'.  Then it performs\nthe usual k-nearest neighbors search on this subset (instead of searching\nthrough all 10,000 tweets).\n\n<details>\n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li> There are many dictionaries used in this function.  Try to print out planes_l, hash_tables, id_tables to understand how they are structured, what the keys represent, and what the values contain.</li>\n    <li> To remove an item from a list, use `.remove()` </li>\n    <li> To append to a list, use `.append()` </li>\n    <li> To add to a set, use `.add()` </li>\n</ul>\n</p>\n\n::: {#d64db8e5 .cell execution_count=33}\n``` {.python .cell-code}\n# UNQ_C21 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# This is the code used to do the fast nearest neighbor search. Feel free to go over it\ndef approximate_knn(doc_id, v, planes_l, k=1, num_universes_to_use=N_UNIVERSES):\n    \"\"\"Search for k-NN using hashes.\"\"\"\n    assert num_universes_to_use <= N_UNIVERSES\n\n    # Vectors that will be checked as possible nearest neighbor\n    vecs_to_consider_l = list()\n\n    # list of document IDs\n    ids_to_consider_l = list()\n\n    # create a set for ids to consider, for faster checking if a document ID already exists in the set\n    ids_to_consider_set = set()\n\n    # loop through the universes of planes\n    for universe_id in range(num_universes_to_use):\n\n        # get the set of planes from the planes_l list, for this particular universe_id\n        planes = planes_l[universe_id]\n\n        # get the hash value of the vector for this set of planes\n        hash_value = hash_value_of_vector(v, planes)\n\n        # get the hash table for this particular universe_id\n        hash_table = hash_tables[universe_id]\n\n        # get the list of document vectors for this hash table, where the key is the hash_value\n        document_vectors_l = hash_table[hash_value]\n\n        # get the id_table for this particular universe_id\n        id_table = id_tables[universe_id]\n\n        # get the subset of documents to consider as nearest neighbors from this id_table dictionary\n        new_ids_to_consider = id_table[hash_value]\n\n        ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n\n        # remove the id of the document that we're searching\n        if doc_id in new_ids_to_consider:\n            None\n            print(f\"removed doc_id {doc_id} of input vector from new_ids_to_search\")\n\n        # loop through the subset of document vectors to consider\n        for i, new_id in enumerate(new_ids_to_consider):\n\n            # if the document ID is not yet in the set ids_to_consider...\n            if new_id not in ids_to_consider_set:\n                # access document_vectors_l list at index i to get the embedding\n                # then append it to the list of vectors to consider as possible nearest neighbors\n                document_vector_at_i = None\n                None\n\n                # append the new_id (the index for the document) to the list of ids to consider\n                None\n\n                # also add the new_id to the set of ids to consider\n                # (use this to check if new_id is not already in the IDs to consider)\n                None\n\n        ### END CODE HERE ###\n\n    # Now run k-NN on the smaller set of vecs-to-consider.\n    print(\"Fast considering %d vecs\" % len(vecs_to_consider_l))\n\n    # convert the vecs to consider set to a list, then to a numpy array\n    vecs_to_consider_arr = np.array(vecs_to_consider_l)\n\n    # call nearest neighbors on the reduced list of candidate vectors\n    nearest_neighbor_idx_l = nearest_neighbor(v, vecs_to_consider_arr, k=k)\n\n    # Use the nearest neighbor index list as indices into the ids to consider\n    # create a list of nearest neighbors by the document ids\n    nearest_neighbor_ids = [ids_to_consider_l[idx]\n                            for idx in nearest_neighbor_idx_l]\n\n    return nearest_neighbor_ids\n```\n:::\n\n\n::: {#14684f45 .cell execution_count=34}\n``` {.python .cell-code}\n#document_vecs, ind2Tweet\ndoc_id = 0\ndoc_to_search = all_tweets[doc_id]\nvec_to_search = document_vecs[doc_id]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[34], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#document_vecs, ind2Tweet</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> doc_id <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> doc_to_search <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">all_tweets</span>[doc_id]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> vec_to_search <span style=\"color:rgb(98,98,98)\">=</span> document_vecs[doc_id]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'all_tweets' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#495cad39 .cell execution_count=35}\n``` {.python .cell-code}\n# UNQ_C22 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\n# Sample\nnearest_neighbor_ids = approximate_knn(\n    doc_id, vec_to_search, planes_l, k=3, num_universes_to_use=5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[35], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># UNQ_C22 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> \n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Sample</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> nearest_neighbor_ids <span style=\"color:rgb(98,98,98)\">=</span> approximate_knn(\n<span class=\"ansi-green-fg\">----&gt; 6</span>     doc_id, <span class=\"ansi-yellow-bg\">vec_to_search</span>, planes_l, k<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, num_universes_to_use<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'vec_to_search' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#eefed91f .cell execution_count=36}\n``` {.python .cell-code}\nprint(f\"Nearest neighbors for document {doc_id}\")\nprint(f\"Document contents: {doc_to_search}\")\nprint(\"\")\n\nfor neighbor_id in nearest_neighbor_ids:\n    print(f\"Nearest neighbor at document id {neighbor_id}\")\n    print(f\"document contents: {all_tweets[neighbor_id]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNearest neighbors for document 0\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[36], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Nearest neighbors for document </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>doc_id<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Document contents: </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span><span class=\"ansi-yellow-bg\">doc_to_search</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> neighbor_id <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> nearest_neighbor_ids:\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'doc_to_search' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n# 4 Conclusion\nCongratulations - Now you can look up vectors that are similar to the\nencoding of your tweet using LSH!\n\n",
    "supporting": [
      "assignment_files"
    ],
    "filters": [],
    "includes": {}
  }
}