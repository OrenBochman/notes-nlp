{
  "hash": "61b0d47c3122865b4f744e5d538d7c2d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Preprocessing\ndate: 2020-10-23\njupyter: python3\n---\n\n\n![course banner](img/course-banner.jpg){.column-margin}\n\n# Preprocessing\n\nIn this lab, we will be exploring how to preprocess tweets for sentiment analysis. We will provide a function for preprocessing tweets during this week's assignment, but it is still good to know what is going on under the hood. By the end of this lecture, you will see how to use the [NLTK](http://www.nltk.org) package to perform a preprocessing pipeline for Twitter datasets.\n\n## Setup\n\nYou will be doing sentiment analysis on tweets in the first two weeks of this course. To help with that, we will be using the [Natural Language Toolkit (NLTK)](http://www.nltk.org/howto/twitter.html) package, an open-source Python library for natural language processing. It has modules for collecting, handling, and processing Twitter data, and you will be acquainted with them as we move along the course.\nFor this exercise, we will use a Twitter dataset that comes with NLTK. This dataset has been manually annotated and serves to establish baselines for models quickly. Let us import them now as well as a few other libraries we will be using.\n\n::: {#8e30e4f5 .cell execution_count=1}\n``` {.python .cell-code}\nimport nltk                                # Python library for NLP\nfrom nltk.corpus import twitter_samples    # sample Twitter dataset from NLTK\nimport matplotlib.pyplot as plt            # library for visualization\nimport random                              # pseudo-random number generator\n```\n:::\n\n\n## About the Twitter dataset\n\nThe sample dataset from NLTK is separated into positive and negative tweets. It contains 5000 positive tweets and 5000 negative tweets exactly. The exact match between these classes is not a coincidence. The intention is to have a balanced dataset. That does not reflect the real distributions of positive and negative classes in live Twitter streams. It is just because balanced datasets simplify the design of most computational methods that are required for sentiment analysis. However, it is better to be aware that this balance of classes is artificial. \nThe dataset is already downloaded in the Coursera workspace. In a local computer however, you can download the data by doing:\n\n::: {#fd5a7e3b .cell execution_count=2}\n``` {.python .cell-code}\n# downloads sample twitter dataset. uncomment the line below if running on a local machine.\nnltk.download('twitter_samples')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[nltk_data] Downloading package twitter_samples to\n[nltk_data]     /home/oren/nltk_data...\n[nltk_data]   Package twitter_samples is already up-to-date!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nTrue\n```\n:::\n:::\n\n\nWe can load the text fields of the positive and negative tweets by using the module's `strings()` method like this:\n\n::: {#e9181285 .cell execution_count=3}\n``` {.python .cell-code}\n# select the set of positive and negative tweets\nall_positive_tweets = twitter_samples.strings('positive_tweets.json')\nall_negative_tweets = twitter_samples.strings('negative_tweets.json')\n```\n:::\n\n\nNext, we'll print a report with the number of positive and negative tweets. It is also essential to know the data structure of the datasets\n\n::: {#647570e5 .cell execution_count=4}\n``` {.python .cell-code}\nprint('Number of positive tweets: ', len(all_positive_tweets))\nprint('Number of negative tweets: ', len(all_negative_tweets))\nprint('\\nThe type of all_positive_tweets is: ', type(all_positive_tweets))\nprint('The type of a tweet entry is: ', type(all_negative_tweets[0]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of positive tweets:  5000\nNumber of negative tweets:  5000\n\nThe type of all_positive_tweets is:  <class 'list'>\nThe type of a tweet entry is:  <class 'str'>\n```\n:::\n:::\n\n\nWe can see that the data is stored in a list and as you might expect, individual tweets are stored as strings.\nYou can make a more visually appealing report by using Matplotlib's [pyplot](https://matplotlib.org/tutorials/introductory/pyplot.html) library. Let us see how to create a [pie chart](https://matplotlib.org/3.2.1/gallery/pie_and_polar_charts/pie_features.html#sphx-glr-gallery-pie-and-polar-charts-pie-features-py) to show the same information as above. This simple snippet will serve you in future visualizations of this kind of data.\n\n::: {#a127c233 .cell execution_count=5}\n``` {.python .cell-code}\n# Declare a figure with a custom size\nfig = plt.figure(figsize=(5, 5))\n\n# labels for the two classes\nlabels = 'Positives', 'Negative'\n\n# Sizes for each slide\nsizes = [len(all_positive_tweets), len(all_negative_tweets)] \n\n# Declare pie chart, where the slices will be ordered and plotted counter-clockwise:\nplt.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Display the chart\nplt.show()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n([<matplotlib.patches.Wedge at 0x7c448b1cba90>,\n  <matplotlib.patches.Wedge at 0x7c448b1cb9d0>],\n [Text(-1.0999999999999959, -9.616505800409723e-08, 'Positives'),\n  Text(1.0999999999999832, 1.9233011600819372e-07, 'Negative')],\n [Text(-0.5999999999999978, -5.2453668002234845e-08, '50.0%'),\n  Text(0.5999999999999908, 1.0490733600446929e-07, '50.0%')])\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n(np.float64(-1.100000000000005),\n np.float64(1.100000000000106),\n np.float64(-1.1),\n np.float64(1.1))\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-3.png){width=509 height=389}\n:::\n:::\n\n\n## Looking at raw texts\n\nBefore anything else, we can print a couple of tweets from the dataset to see how they look. Understanding the data is responsible for 80% of the success or failure in data science projects. We can use this time to observe aspects we'd like to consider when preprocessing our data.\nBelow, you will print one random positive and one random negative tweet. We have added a color mark at the beginning of the string to further distinguish the two.\n\n::: {#d8a71ffb .cell execution_count=6}\n``` {.python .cell-code}\n# print positive in greeen\nprint('\\033[92m' + all_positive_tweets[random.randint(0,5000)])\n\n# print negative in red\nprint('\\033[91m' + all_negative_tweets[random.randint(0,5000)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n@LilyTins congrats :) good news heading into the weekend!\n#BuyNotAnApologyOniTunes isn't avalible in Denmark :(... Could someone please gift it to me? im frustrated\n```\n:::\n:::\n\n\nOne observation you may have is the presence of [emoticons](https://en.wikipedia.org/wiki/Emoticon) and URLs in many of the tweets. This info will come in handy in the next steps.\n\n## Preprocess raw text for Sentiment analysis\n\nData preprocessing is one of the critical steps in any machine learning project. It includes cleaning and formatting the data before feeding into a machine learning algorithm. For NLP, the preprocessing steps are comprised of the following tasks:\n\n* Tokenizing the string\n* Lowercasing\n* Removing stop words and punctuation\n* Stemming\n\nThe videos explained each of these steps and why they are important. Let's see how we can do these to a given tweet. We will choose just one and see how this is transformed by each preprocessing step.\n\n::: {#6b7df2ae .cell execution_count=7}\n``` {.python .cell-code}\n# Our selected sample. Complex enough to exemplify each step\ntweet = all_positive_tweets[2277]\nprint(tweet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMy beautiful sunflowers on a sunny Friday morning off :) #sunflowers #favourites #happy #Friday off… https://t.co/3tfYom0N1i\n```\n:::\n:::\n\n\nLet's import a few more libraries for this purpose.\n\n::: {#61f1d5ea .cell execution_count=8}\n``` {.python .cell-code}\n# download the stopwords from NLTK\nnltk.download('stopwords')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[nltk_data] Downloading package stopwords to /home/oren/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#0bbb8a6a .cell execution_count=9}\n``` {.python .cell-code}\nimport re                                  # library for regular expression operations\nimport string                              # for string operations\nfrom nltk.corpus import stopwords          # module for stop words that come with NLTK\nfrom nltk.stem import PorterStemmer        # module for stemming\nfrom nltk.tokenize import TweetTokenizer   # module for tokenizing strings\n```\n:::\n\n\n### Remove hyperlinks,  Twitter marks and styles\n\nSince we have a Twitter dataset, we'd like to remove some substrings commonly used on the platform like the hashtag, retweet marks, and hyperlinks. We'll use the [re](https://docs.python.org/3/library/re.html) library to perform regular expression operations on our tweet. We'll define our search pattern and use the `sub()` method to remove matches by substituting with an empty character (i.e. `''`)\n\n::: {#08eeb281 .cell execution_count=10}\n``` {.python .cell-code}\nprint('\\033[92m' + tweet)\nprint('\\033[94m')\n\n# remove old style retweet text \"RT\"\ntweet2 = re.sub(r'^RT[\\s]+', '', tweet)\n\n# remove hyperlinks\ntweet2 = re.sub(r'https?:\\/\\/.*[\\r\\n]*', '', tweet2)\n\n# remove hashtags\n\n# only removing the hash # sign from the word\ntweet2 = re.sub(r'#', '', tweet2)\nprint(tweet2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMy beautiful sunflowers on a sunny Friday morning off :) #sunflowers #favourites #happy #Friday off… https://t.co/3tfYom0N1i\n\nMy beautiful sunflowers on a sunny Friday morning off :) sunflowers favourites happy Friday off… \n```\n:::\n:::\n\n\n### Tokenize the string\n\nTo tokenize means to split the strings into individual words without blanks or tabs. In this same step, we will also convert each word in the string to lower case. The [tokenize](https://www.nltk.org/api/nltk.tokenize.html#module-nltk.tokenize.casual) module from NLTK allows us to do these easily:\n\n::: {#95ac9a3d .cell execution_count=11}\n``` {.python .cell-code}\nprint()\nprint('\\033[92m' + tweet2)\nprint('\\033[94m')\n\n# instantiate tokenizer class\ntokenizer = TweetTokenizer(preserve_case=False, strip_handles=True,\n                               reduce_len=True)\n\n# tokenize tweets\ntweet_tokens = tokenizer.tokenize(tweet2)\nprint()\nprint('Tokenized string:')\nprint(tweet_tokens)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nMy beautiful sunflowers on a sunny Friday morning off :) sunflowers favourites happy Friday off… \n\n\nTokenized string:\n['my', 'beautiful', 'sunflowers', 'on', 'a', 'sunny', 'friday', 'morning', 'off', ':)', 'sunflowers', 'favourites', 'happy', 'friday', 'off', '…']\n```\n:::\n:::\n\n\n### Remove stop words and punctuations\n\nThe next step is to remove stop words and punctuation. Stop words are words that don't add significant meaning to the text. You'll see the list provided by NLTK when you run the cells below.\n\n::: {#56836498 .cell execution_count=12}\n``` {.python .cell-code}\n#Import the english stop words list from NLTK\nstopwords_english = stopwords.words('english') \nprint('Stop words\\n')\nprint(stopwords_english)\nprint('\\nPunctuation\\n')\nprint(string.punctuation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStop words\n\n['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\", \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn', \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn', \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", 'won', \"won't\", 'wouldn', \"wouldn't\"]\n\nPunctuation\n\n!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n```\n:::\n:::\n\n\nWe can see that the stop words list above contains some words that could be important in some contexts. \n\nThese could be words like _i, not, between, because, won, against_. You might need to customize the stop words list for some applications. For our exercise, we will use the entire list.\nFor the punctuation, we saw earlier that certain groupings like ':)' and '...'  should be retained when dealing with tweets because they are used to express emotions. In other contexts, like medical analysis, these should also be removed.\n\nTime to clean up our tokenized tweet!\n\n::: {#282a0f53 .cell execution_count=13}\n``` {.python .cell-code}\nprint()\nprint('\\033[92m')\nprint(tweet_tokens)\nprint('\\033[94m')\ntweets_clean = []\nfor word in tweet_tokens: # Go through every word in your tokens list\n    if (word not in stopwords_english and  # remove stopwords\n        word not in string.punctuation):  # remove punctuation\n        tweets_clean.append(word)\nprint('removed stop words and punctuation:')\nprint(tweets_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\n['my', 'beautiful', 'sunflowers', 'on', 'a', 'sunny', 'friday', 'morning', 'off', ':)', 'sunflowers', 'favourites', 'happy', 'friday', 'off', '…']\n\nremoved stop words and punctuation:\n['beautiful', 'sunflowers', 'sunny', 'friday', 'morning', ':)', 'sunflowers', 'favourites', 'happy', 'friday', '…']\n```\n:::\n:::\n\n\nPlease note that the words **happy** and **sunny** in this list are correctly spelled. \n\n### Stemming\n\nStemming is the process of converting a word to its most general form, or stem. This helps in reducing the size of our vocabulary.\nConsider the words: \n\n * **learn**\n * **learn**ing\n * **learn**ed\n * **learn**t\n \nAll these words are stemmed from its common root **learn**. However, in some cases, the stemming process produces words that are not correct spellings of the root word. For example, **happi** and **sunni**. That's because it chooses the most common stem for related words. For example, we can look at the set of words that comprises the different forms of happy:\n * **happ**y\n * **happi**ness\n * **happi**er\n \nWe can see that the prefix **happi** is more commonly used. We cannot choose **happ** because it is the stem of unrelated words like **happen**.\n \nNLTK has different modules for stemming and we will be using the [PorterStemmer](https://www.nltk.org/api/nltk.stem.html#module-nltk.stem.porter) module which uses the [Porter Stemming Algorithm](https://tartarus.org/martin/PorterStemmer/). Let's see how we can use it in the cell below.\n\n::: {#69d020f8 .cell execution_count=14}\n``` {.python .cell-code}\nprint()\nprint('\\033[92m')\nprint(tweets_clean)\nprint('\\033[94m')\n\n# Instantiate stemming class\nstemmer = PorterStemmer() \n\n# Create an empty list to store the stems\ntweets_stem = [] \nfor word in tweets_clean:\n    stem_word = stemmer.stem(word)  # stemming word\n    tweets_stem.append(stem_word)  # append to the list\nprint('stemmed words:')\nprint(tweets_stem)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\n['beautiful', 'sunflowers', 'sunny', 'friday', 'morning', ':)', 'sunflowers', 'favourites', 'happy', 'friday', '…']\n\nstemmed words:\n['beauti', 'sunflow', 'sunni', 'friday', 'morn', ':)', 'sunflow', 'favourit', 'happi', 'friday', '…']\n```\n:::\n:::\n\n\nThat's it! Now we have a set of words we can feed into to the next stage of our machine learning project.\n\n## process_tweet()\n\nAs shown above, preprocessing consists of multiple steps before you arrive at the final list of words. We will not ask you to replicate these however. In the week's assignment, you will use the function `process_tweet(tweet)` available in _utils.py_. We encourage you to open the file and you'll see that this function's implementation is very similar to the steps above.\nTo obtain the same result as in the previous code cells, you will only need to call the function `process_tweet()`. Let's do that in the next cell.\n\n::: {#df04393e .cell execution_count=15}\n``` {.python .cell-code}\nfrom utils import process_tweet # Import the process_tweet function\n\n# choose the same tweet\ntweet = all_positive_tweets[2277]\nprint()\nprint('\\033[92m')\nprint(tweet)\nprint('\\033[94m')\n\n# call the imported function\ntweets_stem = process_tweet(tweet); # Preprocess a given tweet\nprint('preprocessed tweet:')\nprint(tweets_stem) # Print the result\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\nMy beautiful sunflowers on a sunny Friday morning off :) #sunflowers #favourites #happy #Friday off… https://t.co/3tfYom0N1i\n\npreprocessed tweet:\n['beauti', 'sunflow', 'sunni', 'friday', 'morn', ':)', 'sunflow', 'favourit', 'happi', 'friday', '…']\n```\n:::\n:::\n\n\nThat's it for this lab! You now know what is going on when you call the preprocessing helper function in this week's assignment. Hopefully, this exercise has also given you some insights on how to tweak this for other types of text datasets.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}