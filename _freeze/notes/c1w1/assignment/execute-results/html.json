{
  "hash": "233e77ede4ce956049d822d058b17984",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndate: 2020-10-05\ntitle: 'Assignment 1: Logistic Regression'\nsubtitle: \"NLP with Classification & Vector Spaces\"\njupyter: python3\ncategories: \n  - NLP \n  - Coursera \n  - Lab\n  - Logistic regression\n  - Sentiment analysis task\n  - Classification & Vector Spaces\nexecute: \n    error: true\ndraft: true\n---\n\n\n![course banner](/images/Course-Logo-1-3.webp){#fig-00 .column-margin .nolightbox}\n\n::: {.callout-warning}\n## Honor code alert\n\nDue to the Coursera Honor Code, I cannot provide the solutions to the assignments. \n\n- This notebook is the original notebook provided by the course\n- It is setup to run without stopping for errors. \n- It is also likely to be out of date as the course has had some updates since I took it.\n:::\n\nWelcome to week one of this specialization. \nWe will learn about logistic regression. Concretely, we will be implementing logistic regression for sentiment analysis on tweets. \nGiven a tweet, we will decide if it has a positive sentiment or a negative one. \nSpecifically we will: \n\n* Learn how to extract features for logistic regression given some text\n* Implement logistic regression from scratch\n* Apply logistic regression on a natural language processing task\n* Test using your logistic regression\n* Perform error analysis\n\nWe will be using a data set of tweets. Hopefully we will get more than 99% accuracy.  \nRun the cell below to load in the packages.\n\n\n## Import functions and data\n\n::: {#ff36080b .cell execution_count=2}\n``` {.python .cell-code}\n# run this cell to import nltk\nimport nltk\nfrom os import getcwd\n```\n:::\n\n\n### Imported functions\n\nDownload the data needed for this assignment. Check out the [documentation for the twitter_samples dataset](http://www.nltk.org/howto/twitter.html).\n\n* twitter_samples: if you're running this notebook on your local computer, we will need to download it using:\n```Python\nnltk.download('twitter_samples')\n```\n\n* stopwords: if you're running this notebook on your local computer, we will need to download it using:\n```python\nnltk.download('stopwords')\n```\n\n#### Import some helper functions that we provided in the utils.py file:\n* `process_tweet()`: cleans the text, tokenizes it into separate words, removes stopwords, and converts words to stems.\n* `build_freqs()`: this counts how often a word in the 'corpus' (the entire set of tweets) was associated with a positive label '1' or a negative label '0', then builds the `freqs` dictionary, where each key is a (word,label) tuple, and the value is the count of its frequency within the corpus of tweets.\n\n::: {#26a59775 .cell execution_count=3}\n``` {.python .cell-code}\n# add folder, tmp2, from our local workspace containing pre-downloaded corpora files to nltk's data path\n# this enables importing of these files without downloading it again when we refresh our workspace\n\nfilePath = f\"{getcwd()}/../tmp2/\"\nnltk.data.path.append(filePath)\n```\n:::\n\n\n::: {#bdaa7397 .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nfrom nltk.corpus import twitter_samples \n\nfrom utils import process_tweet, build_freqs\n```\n:::\n\n\n### Prepare the data\n* The `twitter_samples` contains subsets of 5,000 positive tweets, 5,000 negative tweets, and the full set of 10,000 tweets.  \n    * If we used all three datasets, we would introduce duplicates of the positive tweets and negative tweets.  \n    * We will select just the five thousand positive tweets and five thousand negative tweets.\n\n::: {#316d77ed .cell execution_count=5}\n``` {.python .cell-code}\n# select the set of positive and negative tweets\nall_positive_tweets = twitter_samples.strings('positive_tweets.json')\nall_negative_tweets = twitter_samples.strings('negative_tweets.json')\n```\n:::\n\n\n* Train test split: 20% will be in the test set, and 80% in the training set.\n\n::: {#45f986ff .cell execution_count=6}\n``` {.python .cell-code}\n# split the data into two pieces, one for training and one for testing (validation set) \ntest_pos = all_positive_tweets[4000:]\ntrain_pos = all_positive_tweets[:4000]\ntest_neg = all_negative_tweets[4000:]\ntrain_neg = all_negative_tweets[:4000]\n\ntrain_x = train_pos + train_neg \ntest_x = test_pos + test_neg\n```\n:::\n\n\n* Create the numpy array of positive labels and negative labels.\n\n::: {#86b8c4ec .cell execution_count=7}\n``` {.python .cell-code}\n# combine positive and negative labels\ntrain_y = np.append(np.ones((len(train_pos), 1)), np.zeros((len(train_neg), 1)), axis=0)\ntest_y = np.append(np.ones((len(test_pos), 1)), np.zeros((len(test_neg), 1)), axis=0)\n```\n:::\n\n\n::: {#6efb28ac .cell execution_count=8}\n``` {.python .cell-code}\n# Print the shape train and test sets\nprint(\"train_y.shape = \" + str(train_y.shape))\nprint(\"test_y.shape = \" + str(test_y.shape))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrain_y.shape = (8000, 1)\ntest_y.shape = (2000, 1)\n```\n:::\n:::\n\n\n* Create the frequency dictionary using the imported `build_freqs()` function.  \n    * We highly recommend that we open `utils.py` and read the `build_freqs()` function to understand what it is doing.\n    * To view the file directory, go to the menu and click File->Open.\n\n```Python\n    for y,tweet in zip(ys, tweets):\n        for word in process_tweet(tweet):\n            pair = (word, y)\n            if pair in freqs:\n                freqs[pair] += 1\n            else:\n                freqs[pair] = 1\n```\n* Notice how the outer for loop goes through each tweet, and the inner for loop steps through each word in a tweet.\n* The `freqs` dictionary is the frequency dictionary that's being built. \n* The key is the tuple (word, label), such as (\"happy\",1) or (\"happy\",0).  The value stored for each key is the count of how many times the word \"happy\" was associated with a positive label, or how many times \"happy\" was associated with a negative label.\n\n::: {#c4df5d60 .cell execution_count=9}\n``` {.python .cell-code}\n# create frequency dictionary\nfreqs = build_freqs(train_x, train_y)\n\n# check the output\nprint(\"type(freqs) = \" + str(type(freqs)))\nprint(\"len(freqs) = \" + str(len(freqs.keys())))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntype(freqs) = <class 'dict'>\nlen(freqs) = 11337\n```\n:::\n:::\n\n\n#### Expected output\n```\ntype(freqs) = <class 'dict'>\nlen(freqs) = 11346\n```\n\n### Process tweet\nThe given function `process_tweet()` tokenizes the tweet into individual words, removes stop words and applies stemming.\n\n::: {#d4fb287b .cell execution_count=10}\n``` {.python .cell-code}\n# test the function below\nprint('This is an example of a positive tweet: \\n', train_x[0])\nprint('\\nThis is an example of the processed version of the tweet: \\n', process_tweet(train_x[0]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is an example of a positive tweet: \n #FollowFriday @France_Inte @PKuchly57 @Milipol_Paris for being top engaged members in my community this week :)\n\nThis is an example of the processed version of the tweet: \n ['followfriday', 'top', 'engag', 'member', 'commun', 'week', ':)']\n```\n:::\n:::\n\n\n#### Expected output\n```\nThis is an example of a positive tweet: \n #FollowFriday @France_Inte @PKuchly57 @Milipol_Paris for being top engaged members in my community this week :)\n \nThis is an example of the processes version: \n ['followfriday', 'top', 'engag', 'member', 'commun', 'week', ':)']\n```\n\n# Part 1: Logistic regression \n\n\n### Part 1.1: Sigmoid\nWe will learn to use logistic regression for text classification. \n* The sigmoid function is defined as: \n\n$$ h(z) = \\frac{1}{1+\\exp^{-z}} \\tag{1}$$\n\nIt maps the input 'z' to a value that ranges between 0 and 1, and so it can be treated as a probability. \n\n<div style=\"width:image width px; font-size:100%; text-align:center;\"><img src='../tmp2/sigmoid_plot.jpg' alt=\"alternate text\" width=\"width\" height=\"height\" style=\"width:300px;height:200px;\" /> Figure 1 </div>\n\n#### Instructions: Implement the sigmoid function\n* We will want this function to work if z is a scalar as well as if it is an array.\n\n<details>    \n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li><a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp.html\" > numpy.exp </a> </li>\n\n</ul>\n</p>\n</details>\n\n::: {#6ad23e8b .cell execution_count=11}\n``` {.python .cell-code}\n# UNQ_C1 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef sigmoid(z): \n    '''\n    Input:\n        z: is the input (can be a scalar or an array)\n    Output:\n        h: the sigmoid of z\n    '''\n    \n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # calculate the sigmoid of z\n    h = None\n    ### END CODE HERE ###\n    \n    return h\n```\n:::\n\n\n::: {#96011e55 .cell execution_count=12}\n``` {.python .cell-code}\n# Testing your function \nif (sigmoid(0) == 0.5):\n    print('SUCCESS!')\nelse:\n    print('Oops!')\n\nif (sigmoid(4.92) == 0.9927537604041685):\n    print('CORRECT!')\nelse:\n    print('Oops again!')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOops!\nOops again!\n```\n:::\n:::\n\n\n### Logistic regression: regression and a sigmoid\n\nLogistic regression takes a regular linear regression, and applies a sigmoid to the output of the linear regression.\n\nRegression:\n$$z = \\theta_0 x_0 + \\theta_1 x_1 + \\theta_2 x_2 + ... \\theta_N x_N$$\nNote that the $\\theta$ values are \"weights\". If we took the Deep Learning Specialization, we referred to the weights with the `w` vector.  In this course, we're using a different variable $\\theta$ to refer to the weights.\n\nLogistic regression\n$$ h(z) = \\frac{1}{1+\\exp^{-z}}$$\n$$z = \\theta_0 x_0 + \\theta_1 x_1 + \\theta_2 x_2 + ... \\theta_N x_N$$\nWe will refer to 'z' as the 'logits'.\n\n### Part 1.2 Cost function and Gradient\n\nThe cost function used for logistic regression is the average of the log loss across all training examples:\n\n$$J(\\theta) = -\\frac{1}{m} \\sum_{i=1}^m y^{(i)}\\log (h(z(\\theta)^{(i)})) + (1-y^{(i)})\\log (1-h(z(\\theta)^{(i)}))\\tag{5} $$\n* $m$ is the number of training examples\n* $y^{(i)}$ is the actual label of the i-th training example.\n* $h(z(\\theta)^{(i)})$ is the model's prediction for the i-th training example.\n\nThe loss function for a single training example is\n$$ Loss = -1 \\times \\left( y^{(i)}\\log (h(z(\\theta)^{(i)})) + (1-y^{(i)})\\log (1-h(z(\\theta)^{(i)})) \\right)$$\n\n* All the $h$ values are between 0 and 1, so the logs will be negative. That is the reason for the factor of -1 applied to the sum of the two loss terms.\n* Note that when the model predicts 1 ($h(z(\\theta)) = 1$) and the label $y$ is also 1, the loss for that training example is 0. \n* Similarly, when the model predicts 0 ($h(z(\\theta)) = 0$) and the actual label is also 0, the loss for that training example is 0. \n* However, when the model prediction is close to 1 ($h(z(\\theta)) = 0.9999$) and the label is 0, the second term of the log loss becomes a large negative number, which is then multiplied by the overall factor of -1 to convert it to a positive loss value. $-1 \\times (1 - 0) \\times log(1 - 0.9999) \\approx 9.2$ The closer the model prediction gets to 1, the larger the loss.\n\n::: {#f969a805 .cell execution_count=13}\n``` {.python .cell-code}\n# verify that when the model predicts close to 1, but the actual label is 0, the loss is a large positive value\n-1 * (1 - 0) * np.log(1 - 0.9999) # loss is about 9.2\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nnp.float64(9.210340371976294)\n```\n:::\n:::\n\n\n* Likewise, if the model predicts close to 0 ($h(z) = 0.0001$) but the actual label is 1, the first term in the loss function becomes a large number: $-1 \\times log(0.0001) \\approx 9.2$.  The closer the prediction is to zero, the larger the loss.\n\n::: {#55b32761 .cell execution_count=14}\n``` {.python .cell-code}\n# verify that when the model predicts close to 0 but the actual label is 1, the loss is a large positive value\n-1 * np.log(0.0001) # loss is about 9.2\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nnp.float64(9.210340371976182)\n```\n:::\n:::\n\n\n#### Update the weights\n\nTo update your weight vector $\\theta$, we will apply gradient descent to iteratively improve your model's predictions.  \nThe gradient of the cost function $J$ with respect to one of the weights $\\theta_j$ is:\n\n$$\\nabla_{\\theta_j}J(\\theta) = \\frac{1}{m} \\sum_{i=1}^m(h^{(i)}-y^{(i)})x_j \\tag{5}$$\n* 'i' is the index across all 'm' training examples.\n* 'j' is the index of the weight $\\theta_j$, so $x_j$ is the feature associated with weight $\\theta_j$\n\n* To update the weight $\\theta_j$, we adjust it by subtracting a fraction of the gradient determined by $\\alpha$:\n$$\\theta_j = \\theta_j - \\alpha \\times \\nabla_{\\theta_j}J(\\theta) $$\n* The learning rate $\\alpha$ is a value that we choose to control how big a single update will be.\n\n## Instructions: Implement gradient descent function\n* The number of iterations `num_iters` is the number of times that you'll use the entire training set.\n* For each iteration, you'll calculate the cost function using all training examples (there are `m` training examples), and for all features.\n* Instead of updating a single weight $\\theta_i$ at a time, we can update all the weights in the column vector:  \n$$\\mathbf{\\theta} = \\begin{pmatrix}\n\\theta_0\n\\\\\n\\theta_1\n\\\\ \n\\theta_2 \n\\\\ \n\\vdots\n\\\\ \n\\theta_n\n\\end{pmatrix}$$\n* $\\mathbf{\\theta}$ has dimensions (n+1, 1), where 'n' is the number of features, and there is one more element for the bias term $\\theta_0$ (note that the corresponding feature value $\\mathbf{x_0}$ is 1).\n* The 'logits', 'z', are calculated by multiplying the feature matrix 'x' with the weight vector 'theta'.  $z = \\mathbf{x}\\mathbf{\\theta}$\n    * $\\mathbf{x}$ has dimensions (m, n+1) \n    * $\\mathbf{\\theta}$: has dimensions (n+1, 1)\n    * $\\mathbf{z}$: has dimensions (m, 1)\n* The prediction 'h', is calculated by applying the sigmoid to each element in 'z': $h(z) = sigmoid(z)$, and has dimensions (m,1).\n* The cost function $J$ is calculated by taking the dot product of the vectors 'y' and 'log(h)'.  Since both 'y' and 'h' are column vectors (m,1), transpose the vector to the left, so that matrix multiplication of a row vector with column vector performs the dot product.\n$$J = \\frac{-1}{m} \\times \\left(\\mathbf{y}^T \\cdot log(\\mathbf{h}) + \\mathbf{(1-y)}^T \\cdot log(\\mathbf{1-h}) \\right)$$\n* The update of theta is also vectorized.  Because the dimensions of $\\mathbf{x}$ are (m, n+1), and both $\\mathbf{h}$ and $\\mathbf{y}$ are (m, 1), we need to transpose the $\\mathbf{x}$ and place it on the left in order to perform matrix multiplication, which then yields the (n+1, 1) answer we need:\n$$\\mathbf{\\theta} = \\mathbf{\\theta} - \\frac{\\alpha}{m} \\times \\left( \\mathbf{x}^T \\cdot \\left( \\mathbf{h-y} \\right) \\right)$$\n\n<details>    \n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li>use np.dot for matrix multiplication.</li>\n    <li>To ensure that the fraction -1/m is a decimal value, cast either the numerator or denominator (or both), like `float(1)`, or write `1.` for the float version of 1. </li>\n</ul>\n</p>\n</details>\n\n::: {#0a2c17fb .cell execution_count=15}\n``` {.python .cell-code}\n# UNQ_C2 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef gradientDescent(x, y, theta, alpha, num_iters):\n    '''\n    Input:\n        x: matrix of features which is (m,n+1)\n        y: corresponding labels of the input matrix x, dimensions (m,1)\n        theta: weight vector of dimension (n+1,1)\n        alpha: learning rate\n        num_iters: number of iterations we want to train your model for\n    Output:\n        J: the final cost\n        theta: your final weight vector\n    Hint: we might want to print the cost to make sure that it is going down.\n    '''\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # get 'm', the number of rows in matrix x\n    m = None\n    \n    for i in range(0, num_iters):\n        \n        # get z, the dot product of x and theta\n        z = None\n        \n        # get the sigmoid of z\n        h = None\n        \n        # calculate the cost function\n        J = None\n\n        # update the weights theta\n        theta = None\n        \n    ### END CODE HERE ###\n    J = float(J)\n    return J, theta\n```\n:::\n\n\n::: {#4b9d88b1 .cell execution_count=16}\n``` {.python .cell-code}\n# Check the function\n# Construct a synthetic test case using numpy PRNG functions\nnp.random.seed(1)\n# X input is 10 x 3 with ones for the bias terms\ntmp_X = np.append(np.ones((10, 1)), np.random.rand(10, 2) * 2000, axis=1)\n# Y Labels are 10 x 1\ntmp_Y = (np.random.rand(10, 1) > 0.35).astype(float)\n\n# Apply gradient descent\ntmp_J, tmp_theta = gradientDescent(tmp_X, tmp_Y, np.zeros((3, 1)), 1e-8, 700)\nprint(f\"The cost after training is {tmp_J:.8f}.\")\nprint(f\"The resulting vector of weights is {[round(t, 8) for t in np.squeeze(tmp_theta)]}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 10</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> tmp_Y <span style=\"color:rgb(98,98,98)\">=</span> (np<span style=\"color:rgb(98,98,98)\">.</span>random<span style=\"color:rgb(98,98,98)\">.</span>rand(<span style=\"color:rgb(98,98,98)\">10</span>, <span style=\"color:rgb(98,98,98)\">1</span>) <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">0.35</span>)<span style=\"color:rgb(98,98,98)\">.</span>astype(<span style=\"color:rgb(0,135,0)\">float</span>)\n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Apply gradient descent</span>\n<span class=\"ansi-green-fg\">---&gt; 10</span> tmp_J, tmp_theta <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">gradientDescent</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">tmp_X</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">tmp_Y</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">zeros</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">3</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1e-8</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">700</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     11</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The cost after training is </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>tmp_J<span style=\"font-weight:bold;color:rgb(175,95,135)\">:</span><span style=\"color:rgb(175,0,0)\">.8f</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">.</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">     12</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The resulting vector of weights is </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>[<span style=\"color:rgb(0,135,0)\">round</span>(t,<span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(98,98,98)\">8</span>)<span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span><span style=\"color:rgb(188,188,188)\"> </span>t<span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span><span style=\"color:rgb(188,188,188)\"> </span>np<span style=\"color:rgb(98,98,98)\">.</span>squeeze(tmp_theta)]<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\nCell <span class=\"ansi-green-fg\">In[14], line 34</span>, in <span class=\"ansi-cyan-fg\">gradientDescent</span><span class=\"ansi-blue-fg\">(x, y, theta, alpha, num_iters)</span>\n<span class=\"ansi-green-fg ansi-bold\">     31</span>     theta <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">     33</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">### END CODE HERE ###</span>\n<span class=\"ansi-green-fg\">---&gt; 34</span> J <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">float</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">J</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     35</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> J, theta\n\n<span class=\"ansi-red-fg\">TypeError</span>: float() argument must be a string or a real number, not 'NoneType'</pre>\n```\n:::\n\n:::\n:::\n\n\n#### Expected output\n```\nThe cost after training is 0.67094970.\nThe resulting vector of weights is [4.1e-07, 0.00035658, 7.309e-05]\n```\n\n## Part 2: Extracting the features\n\n* Given a list of tweets, extract the features and store them in a matrix. We will extract two features.\n    * The first feature is the number of positive words in a tweet.\n    * The second feature is the number of negative words in a tweet. \n* Then train your logistic regression classifier on these features.\n* Test the classifier on a validation set. \n\n### Instructions: Implement the extract_features function. \n* This function takes in a single tweet.\n* Process the tweet using the imported `process_tweet()` function and save the list of tweet words.\n* Loop through each word in the list of processed words\n    * For each word, check the `freqs` dictionary for the count when that word has a positive '1' label. (Check for the key (word, 1.0)\n    * Do the same for the count for when the word is associated with the negative label '0'. (Check for the key (word, 0.0).)\n\n<details>    \n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li>Make sure we handle cases when the (word, label) key is not found in the dictionary. </li>\n    <li> Search the web for hints about using the `.get()` method of a Python dictionary.  Here is an <a href=\"https://www.programiz.com/python-programming/methods/dictionary/get\" > example </a> </li>\n</ul>\n</p>\n</details>\n\n::: {#7aece062 .cell execution_count=17}\n``` {.python .cell-code}\n# UNQ_C3 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef extract_features(tweet, freqs):\n    '''\n    Input: \n        tweet: a list of words for one tweet\n        freqs: a dictionary corresponding to the frequencies of each tuple (word, label)\n    Output: \n        x: a feature vector of dimension (1,3)\n    '''\n    # process_tweet tokenizes, stems, and removes stopwords\n    word_l = process_tweet(tweet)\n    \n    # 3 elements in the form of a 1 x 3 vector\n    x = np.zeros((1, 3)) \n    \n    #bias term is set to 1\n    x[0,0] = 1 \n    \n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    \n    # loop through each word in the list of words\n    for word in word_l:\n        \n        # increment the word count for the positive label 1\n        x[0,1] += None\n        \n        # increment the word count for the negative label 0\n        x[0,2] += None\n        \n    ### END CODE HERE ###\n    assert(x.shape == (1, 3))\n    return x\n```\n:::\n\n\n::: {#b7fc2fbc .cell execution_count=18}\n``` {.python .cell-code}\n# Check your function\n\n# test 1\n# test on training data\ntmp1 = extract_features(train_x[0], freqs)\nprint(tmp1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Check your function</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> \n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># test 1</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># test on training data</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> tmp1 <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">extract_features</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">train_x</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">freqs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"color:rgb(0,135,0)\">print</span>(tmp1)\n\nCell <span class=\"ansi-green-fg\">In[16], line 25</span>, in <span class=\"ansi-cyan-fg\">extract_features</span><span class=\"ansi-blue-fg\">(tweet, freqs)</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> \n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># loop through each word in the list of words</span>\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> word <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> word_l:\n<span class=\"ansi-green-fg ansi-bold\">     23</span>     \n<span class=\"ansi-green-fg ansi-bold\">     24</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># increment the word count for the positive label 1</span>\n<span class=\"ansi-green-fg\">---&gt; 25</span>     x[<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">1</span>] <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">     27</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># increment the word count for the negative label 0</span>\n<span class=\"ansi-green-fg ansi-bold\">     28</span>     x[<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">2</span>] <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: unsupported operand type(s) for +: 'float' and 'NoneType'</pre>\n```\n:::\n\n:::\n:::\n\n\n#### Expected output\n```\n[[1.00e+00 3.02e+03 6.10e+01]]\n```\n\n::: {#146b038f .cell execution_count=19}\n``` {.python .cell-code}\n# test 2:\n# check for when the words are not in the freqs dictionary\ntmp2 = extract_features('blorb bleeeeb bloooob', freqs)\nprint(tmp2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># test 2:</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># check for when the words are not in the freqs dictionary</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> tmp2 <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">extract_features</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">blorb bleeeeb bloooob</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">freqs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"color:rgb(0,135,0)\">print</span>(tmp2)\n\nCell <span class=\"ansi-green-fg\">In[16], line 25</span>, in <span class=\"ansi-cyan-fg\">extract_features</span><span class=\"ansi-blue-fg\">(tweet, freqs)</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> \n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># loop through each word in the list of words</span>\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> word <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> word_l:\n<span class=\"ansi-green-fg ansi-bold\">     23</span>     \n<span class=\"ansi-green-fg ansi-bold\">     24</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># increment the word count for the positive label 1</span>\n<span class=\"ansi-green-fg\">---&gt; 25</span>     x[<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">1</span>] <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">     27</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># increment the word count for the negative label 0</span>\n<span class=\"ansi-green-fg ansi-bold\">     28</span>     x[<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">2</span>] <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: unsupported operand type(s) for +: 'float' and 'NoneType'</pre>\n```\n:::\n\n:::\n:::\n\n\n#### Expected output\n```\n[[1. 0. 0.]]\n```\n\n## Part 3: Training Your Model\n\nTo train the model:\n* Stack the features for all training examples into a matrix `X`. \n* Call `gradientDescent`, which you've implemented above.\n\nThis section is given to you.  Please read it for understanding and run the cell.\n\n::: {#00152e4e .cell execution_count=20}\n``` {.python .cell-code}\n# collect the features 'x' and stack them into a matrix 'X'\nX = np.zeros((len(train_x), 3))\nfor i in range(len(train_x)):\n    X[i, :]= extract_features(train_x[i], freqs)\n\n# training labels corresponding to X\nY = train_y\n\n# Apply gradient descent\nJ, theta = gradientDescent(X, Y, np.zeros((3, 1)), 1e-9, 1500)\nprint(f\"The cost after training is {J:.8f}.\")\nprint(f\"The resulting vector of weights is {[round(t, 8) for t in np.squeeze(theta)]}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> X <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>zeros((<span style=\"color:rgb(0,135,0)\">len</span>(train_x), <span style=\"color:rgb(98,98,98)\">3</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(0,135,0)\">len</span>(train_x)):\n<span class=\"ansi-green-fg\">----&gt; 4</span>     X[i, :]<span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">extract_features</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">train_x</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-yellow-bg\">i</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">freqs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># training labels corresponding to X</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> Y <span style=\"color:rgb(98,98,98)\">=</span> train_y\n\nCell <span class=\"ansi-green-fg\">In[16], line 25</span>, in <span class=\"ansi-cyan-fg\">extract_features</span><span class=\"ansi-blue-fg\">(tweet, freqs)</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> \n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># loop through each word in the list of words</span>\n<span class=\"ansi-green-fg ansi-bold\">     22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> word <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> word_l:\n<span class=\"ansi-green-fg ansi-bold\">     23</span>     \n<span class=\"ansi-green-fg ansi-bold\">     24</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># increment the word count for the positive label 1</span>\n<span class=\"ansi-green-fg\">---&gt; 25</span>     x[<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">1</span>] <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">     27</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># increment the word count for the negative label 0</span>\n<span class=\"ansi-green-fg ansi-bold\">     28</span>     x[<span style=\"color:rgb(98,98,98)\">0</span>,<span style=\"color:rgb(98,98,98)\">2</span>] <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: unsupported operand type(s) for +: 'float' and 'NoneType'</pre>\n```\n:::\n\n:::\n:::\n\n\n**Expected Output**: \n\n```\nThe cost after training is 0.24216529.\nThe resulting vector of weights is [7e-08, 0.0005239, -0.00055517]\n```\n\n# Part 4: Test your logistic regression\n\nIt is time for we to test your logistic regression function on some new input that your model has not seen before. \n\n#### Instructions: Write `predict_tweet`\nPredict whether a tweet is positive or negative.\n\n* Given a tweet, process it, then extract the features.\n* Apply the model's learned weights on the features to get the logits.\n* Apply the sigmoid to the logits to get the prediction (a value between 0 and 1).\n\n$$y_{pred} = sigmoid(\\mathbf{x} \\cdot \\theta)$$\n\n::: {#b740a4d0 .cell execution_count=21}\n``` {.python .cell-code}\n# UNQ_C4 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef predict_tweet(tweet, freqs, theta):\n    '''\n    Input: \n        tweet: a string\n        freqs: a dictionary corresponding to the frequencies of each tuple (word, label)\n        theta: (3,1) vector of weights\n    Output: \n        y_pred: the probability of a tweet being positive or negative\n    '''\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    \n    # extract the features of the tweet and store it into x\n    x = None\n    \n    # make the prediction using x and theta\n    y_pred = None\n    \n    ### END CODE HERE ###\n    \n    return y_pred\n```\n:::\n\n\n::: {#c30b6008 .cell execution_count=22}\n``` {.python .cell-code}\n# Run this cell to test your function\nfor tweet in ['I am happy', 'I am bad', 'this movie should have been great.', 'great', 'great great', 'great great great', 'great great great great']:\n    print( '%s -> %f' % (tweet, predict_tweet(tweet, freqs, theta)))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Run this cell to test your function</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> tweet <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> [<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">I am happy</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">I am bad</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">this movie should have been great.</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">great</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">great great</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">great great great</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">great great great great</span><span style=\"color:rgb(175,0,0)\">'</span>]:\n<span class=\"ansi-green-fg\">----&gt; 3</span>     <span style=\"color:rgb(0,135,0)\">print</span>( <span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">%s</span><span style=\"color:rgb(175,0,0)\"> -&gt; </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">%f</span><span style=\"color:rgb(175,0,0)\">'</span> <span style=\"color:rgb(98,98,98)\">%</span> (tweet, predict_tweet(tweet, freqs, <span class=\"ansi-yellow-bg\">theta</span>)))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'theta' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Expected Output**: \n```\nI am happy -> 0.518580\nI am bad -> 0.494339\nthis movie should have been great. -> 0.515331\ngreat -> 0.515464\ngreat great -> 0.530898\ngreat great great -> 0.546273\ngreat great great great -> 0.561561\n```\n\n::: {#cbbe98fa .cell execution_count=23}\n``` {.python .cell-code}\n# Feel free to check the sentiment of your own tweet below\nmy_tweet = 'I am learning :)'\npredict_tweet(my_tweet, freqs, theta)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Feel free to check the sentiment of your own tweet below</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> my_tweet <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">I am learning :)</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> predict_tweet(my_tweet, freqs, <span class=\"ansi-yellow-bg\">theta</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'theta' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Check performance using the test set\nAfter training your model using the training set above, check how your model might perform on real, unseen data, by testing it against the test set.\n\n#### Instructions: Implement `test_logistic_regression` \n* Given the test data and the weights of your trained model, calculate the accuracy of your logistic regression model. \n* Use your `predict_tweet()` function to make predictions on each tweet in the test set.\n* If the prediction is > 0.5, set the model's classification `y_hat` to 1, otherwise set the model's classification `y_hat` to 0.\n* A prediction is accurate when `y_hat` equals `test_y`.  Sum up all the instances when they are equal and divide by `m`.\n\n<details>\n<summary>\n    <font size=\"3\" color=\"darkgreen\"><b>Hints</b></font>\n</summary>\n<p>\n<ul>\n    <li>Use np.asarray() to convert a list to a numpy array</li>\n    <li>Use np.squeeze() to make an (m,1) dimensional array into an (m,) array </li>\n</ul>\n</p>\n</details>\n\n::: {#cdf87f82 .cell execution_count=24}\n``` {.python .cell-code}\n# UNQ_C5 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef test_logistic_regression(test_x, test_y, freqs, theta):\n    \"\"\"\n    Input: \n        test_x: a list of tweets\n        test_y: (m, 1) vector with the corresponding labels for the list of tweets\n        freqs: a dictionary with the frequency of each pair (or tuple)\n        theta: weight vector of dimension (3, 1)\n    Output: \n        accuracy: (# of tweets classified correctly) / (total # of tweets)\n    \"\"\"\n    \n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    \n    # the list for storing predictions\n    y_hat = []\n    \n    for tweet in test_x:\n        # get the label prediction for the tweet\n        y_pred = predict_tweet(tweet, freqs, theta)\n        \n        if y_pred > 0.5:\n            # append 1.0 to the list\n            None\n        else:\n            # append 0 to the list\n            None\n\n    # With the above implementation, y_hat is a list, but test_y is (m,1) array\n    # convert both to one-dimensional arrays in order to compare them using the '==' operator\n    accuracy = None\n\n    ### END CODE HERE ###\n    \n    return accuracy\n```\n:::\n\n\n::: {#0274b392 .cell execution_count=25}\n``` {.python .cell-code}\ntmp_accuracy = test_logistic_regression(test_x, test_y, freqs, theta)\nprint(f\"Logistic regression model's accuracy = {tmp_accuracy:.4f}\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> tmp_accuracy <span style=\"color:rgb(98,98,98)\">=</span> test_logistic_regression(test_x, test_y, freqs, <span class=\"ansi-yellow-bg\">theta</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Logistic regression model</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">s accuracy = </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>tmp_accuracy<span style=\"font-weight:bold;color:rgb(175,95,135)\">:</span><span style=\"color:rgb(175,0,0)\">.4f</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'theta' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n#### Expected Output: \n```0.9950```  \nPretty good!\n\n# Part 5: Error Analysis\n\nIn this part we will see some tweets that your model misclassified. Why do we think the misclassifications happened? Specifically what kind of tweets does your model misclassify?\n\n::: {#785e3e2e .cell execution_count=26}\n``` {.python .cell-code}\n# Some error analysis done for you\nprint('Label Predicted Tweet')\nfor x,y in zip(test_x,test_y):\n    y_hat = predict_tweet(x, freqs, theta)\n\n    if np.abs(y - (y_hat > 0.5)) > 0:\n        print('THE TWEET IS:', x)\n        print('THE PROCESSED TWEET IS:', process_tweet(x))\n        print('%d\\t%0.8f\\t%s' % (y, y_hat, ' '.join(process_tweet(x)).encode('ascii', 'ignore')))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLabel Predicted Tweet\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Label Predicted Tweet</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> x,y <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">zip</span>(test_x,test_y):\n<span class=\"ansi-green-fg\">----&gt; 4</span>     y_hat <span style=\"color:rgb(98,98,98)\">=</span> predict_tweet(x, freqs, <span class=\"ansi-yellow-bg\">theta</span>)\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> np<span style=\"color:rgb(98,98,98)\">.</span>abs(y <span style=\"color:rgb(98,98,98)\">-</span> (y_hat <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">0.5</span>)) <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">0</span>:\n<span class=\"ansi-green-fg ansi-bold\">      7</span>         <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">THE TWEET IS:</span><span style=\"color:rgb(175,0,0)\">'</span>, x)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'theta' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nLater in this specialization, we will see how we can use deep learning to improve the prediction performance.\n\n# Part 6: Predict with your own tweet\n\n::: {#e49e6f3c .cell execution_count=27}\n``` {.python .cell-code}\n# Feel free to change the tweet below\nmy_tweet = 'This is a ridiculously bright movie. The plot was terrible and I was sad until the ending!'\nprint(process_tweet(my_tweet))\ny_hat = predict_tweet(my_tweet, freqs, theta)\nprint(y_hat)\nif y_hat > 0.5:\n    print('Positive sentiment')\nelse: \n    print('Negative sentiment')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['ridicul', 'bright', 'movi', 'plot', 'terribl', 'sad', 'end']\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[26], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> my_tweet <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">This is a ridiculously bright movie. The plot was terrible and I was sad until the ending!</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(process_tweet(my_tweet))\n<span class=\"ansi-green-fg\">----&gt; 4</span> y_hat <span style=\"color:rgb(98,98,98)\">=</span> predict_tweet(my_tweet, freqs, <span class=\"ansi-yellow-bg\">theta</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"color:rgb(0,135,0)\">print</span>(y_hat)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> y_hat <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">0.5</span>:\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'theta' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "assignment_files"
    ],
    "filters": [],
    "includes": {}
  }
}