{
  "hash": "9d97587c8bd31e6da1e4e402806d5fe9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndate: 2021-04-12\ntitle: 'Assignment 3 Ungraded Sections - Part 1: BERT Loss Model'\nsubtitle: \"NLP with Attention Models\"\ncategories: \n  - NLP \n  - Coursera \n  - Lab\n  - NLP with Attention Models\njupyter: python3\nexecute: \n    error: true\ndraft: false\n---\n\n\n\n\n![course banner](/images/Course-Logo-4-1.webp){.column-margin .nolightbox}\n\nWelcome to the part 1 of testing the models for this week's assignment. We will perform decoding using the BERT Loss model. In this notebook we'll use an input, mask (hide) random word(s) in it and see how well we get the \"Target\" answer(s). \n\n## Colab\n\nSince this ungraded lab takes a lot of time to run on coursera, as an alternative we have a colab prepared for you.\n\n[BERT Loss Model Colab](https://drive.google.com/file/d/1EHAbMnW6u-GqYWh5r3Z8uLbz4KNpKOAv/view?usp=sharing)\n\n- If you run into a page that looks similar to the one below, with the option `Open with`, this would mean you need to download the `Colaboratory` app. You can do so by `Open with -> Connect more apps -> in the search bar write \"Colaboratory\" -> install`\n\n![](img/colab_help_1.png)\n\n- After installation it should look like this. Click on `Open with Google Colaboratory`\n\n![](img/colab_help_2.png)\n\n\n## Outline\n\n- [Overview](#0)\n- [Part 1: Getting ready](#1)\n- [Part 2: BERT Loss](#2)\n    - [2.1 Decoding](#2.1)\n\n### Overview {#0}\n\nIn this notebook you will:\n\n- Implement the Bidirectional Encoder Representation from Transformer (BERT) loss. \n- Use a pretrained version of the model you created in the assignment for inference.\n\n\n\n## Part 1: Getting ready {#1}\n\nRun the code cells below to import the necessary libraries and to define some functions which will be useful for decoding. The code and the functions are the same as the ones you previsouly ran on the graded assignment.\n\n::: {#9a65d6e8 .cell execution_count=1}\n``` {.python .cell-code}\nimport pickle\nimport string\nimport ast\nimport numpy as np\nimport trax \nfrom trax.supervised import decoding\nimport textwrap \n\nwrapper = textwrap.TextWrapper(width=70)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n2025-02-10 16:51:29.192037: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1739199089.204440  119292 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1739199089.208671  119292 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n```\n:::\n:::\n\n\n::: {#1d47369e .cell execution_count=2}\n``` {.python .cell-code}\nexample_jsons = list(map(ast.literal_eval, open('data.txt')))\n\nnatural_language_texts = [example_json['text'] for example_json in example_jsons]\n\nPAD, EOS, UNK = 0, 1, 2\n\ndef detokenize(np_array):\n    return trax.data.detokenize(\n        np_array,\n        vocab_type='sentencepiece',\n        vocab_file='sentencepiece.model',\n        vocab_dir='.')\n\n\ndef tokenize(s):\n    return next(trax.data.tokenize(\n        iter([s]),\n        vocab_type='sentencepiece',\n        vocab_file='sentencepiece.model',\n        vocab_dir='.'))\n \n    \nvocab_size = trax.data.vocab_size(\n    vocab_type='sentencepiece',\n    vocab_file='sentencepiece.model',\n    vocab_dir='.')\n\n\ndef get_sentinels(vocab_size, display=False):\n    sentinels = {}\n    for i, char in enumerate(reversed(string.ascii_letters), 1):\n        decoded_text = detokenize([vocab_size - i]) \n        # Sentinels, ex: <Z> - <a>\n        sentinels[decoded_text] = f'<{char}>'    \n        if display:\n            print(f'The sentinel is <{char}> and the decoded token is:', decoded_text)\n    return sentinels\n\n\nsentinels = get_sentinels(vocab_size, display=False)    \n\n\ndef pretty_decode(encoded_str_list, sentinels=sentinels):\n    # If already a string, just do the replacements.\n    if isinstance(encoded_str_list, (str, bytes)):\n        for token, char in sentinels.items():\n            encoded_str_list = encoded_str_list.replace(token, char)\n        return encoded_str_list\n  \n    # We need to decode and then prettyfy it.\n    return pretty_decode(detokenize(encoded_str_list))\n\n\ninputs_targets_pairs = []\n\n# here you are reading already computed input/target pairs from a file\nwith open ('inputs_targets_pairs_file.txt', 'rb') as fp:\n    inputs_targets_pairs = pickle.load(fp)  \n\n\ndef display_input_target_pairs(inputs_targets_pairs):\n    for i, inp_tgt_pair in enumerate(inputs_targets_pairs, 1):\n        inps, tgts = inp_tgt_pair\n        inps, tgts = pretty_decode(inps), pretty_decode(tgts)\n        print(f'[{i}]\\n'\n              f'inputs:\\n{wrapper.fill(text=inps)}\\n\\n'\n              f'targets:\\n{wrapper.fill(text=tgts)}\\n\\n\\n\\n')\n    \ndisplay_input_target_pairs(inputs_targets_pairs)    \n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 23</span>\n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">tokenize</span>(s):\n<span class=\"ansi-green-fg ansi-bold\">     16</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">next</span>(trax<span style=\"color:rgb(98,98,98)\">.</span>data<span style=\"color:rgb(98,98,98)\">.</span>tokenize(\n<span class=\"ansi-green-fg ansi-bold\">     17</span>         <span style=\"color:rgb(0,135,0)\">iter</span>([s]),\n<span class=\"ansi-green-fg ansi-bold\">     18</span>         vocab_type<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sentencepiece</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     19</span>         vocab_file<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sentencepiece.model</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     20</span>         vocab_dir<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">.</span><span style=\"color:rgb(175,0,0)\">'</span>))\n<span class=\"ansi-green-fg\">---&gt; 23</span> vocab_size <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">trax</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">data</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">vocab_size</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">     24</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">vocab_type</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">sentencepiece</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">     25</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">vocab_file</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">sentencepiece.model</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">vocab_dir</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">.</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     29</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">get_sentinels</span>(vocab_size, display<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg ansi-bold\">     30</span>     sentinels <span style=\"color:rgb(98,98,98)\">=</span> {}\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/data/tf_inputs.py:570</span>, in <span class=\"ansi-cyan-fg\">vocab_size</span><span class=\"ansi-blue-fg\">(vocab_type, vocab_file, vocab_dir, n_reserved_ids)</span>\n<span class=\"ansi-green-fg ansi-bold\">    550</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">vocab_size</span>(vocab_type<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">subword</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">    551</span>                vocab_file<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>,\n<span class=\"ansi-green-fg ansi-bold\">    552</span>                vocab_dir<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>,\n<span class=\"ansi-green-fg ansi-bold\">    553</span>                n_reserved_ids<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0</span>):\n<span class=\"ansi-green-fg ansi-bold\">    554</span> <span style=\"color:rgb(188,188,188)\">  </span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Returns the size of the vocabulary (number of symbols used).</span>\n<span class=\"ansi-green-fg ansi-bold\">    555</span> \n<span class=\"ansi-green-fg ansi-bold\">    556</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">  This function can be used to set the size of the final layers of a model that</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    568</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    An integer, the number of symbols used (including reserved IDs).</span>\n<span class=\"ansi-green-fg ansi-bold\">    569</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">  \"\"\"</span>\n<span class=\"ansi-green-fg\">--&gt; 570</span>   vocab <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">_get_vocab</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">vocab_type</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">vocab_file</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">vocab_dir</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    571</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> vocab<span style=\"color:rgb(98,98,98)\">.</span>vocab_size <span style=\"color:rgb(98,98,98)\">+</span> n_reserved_ids\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/data/tf_inputs.py:603</span>, in <span class=\"ansi-cyan-fg\">_get_vocab</span><span class=\"ansi-blue-fg\">(vocab_type, vocab_file, vocab_dir, extra_ids)</span>\n<span class=\"ansi-green-fg ansi-bold\">    600</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> text_encoder<span style=\"color:rgb(98,98,98)\">.</span>BertEncoder(path, do_lower_case<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n<span class=\"ansi-green-fg ansi-bold\">    602</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> vocab_type <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sentencepiece</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg\">--&gt; 603</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">t5_data</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span><span style=\"color:rgb(98,98,98)\">.</span>SentencePieceVocabulary(sentencepiece_model_file<span style=\"color:rgb(98,98,98)\">=</span>path,\n<span class=\"ansi-green-fg ansi-bold\">    604</span>                                          extra_ids<span style=\"color:rgb(98,98,98)\">=</span>extra_ids)\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/data/tf_inputs.py:53</span>, in <span class=\"ansi-cyan-fg\">t5_data</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">     51</span> module <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">     52</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">---&gt; 53</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># pylint: disable=g-import-not-at-top</span>\n<span class=\"ansi-green-fg ansi-bold\">     54</span>   module <span style=\"color:rgb(98,98,98)\">=</span> t5<span style=\"color:rgb(98,98,98)\">.</span>data\n<span class=\"ansi-green-fg ansi-bold\">     55</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">AttributeError</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> e:\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/t5/__init__.py:17</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright 2023 The T5 Authors.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Licensed under the Apache License, Version 2.0 (the \"License\");</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     12</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># See the License for the specific language governing permissions and</span>\n<span class=\"ansi-green-fg ansi-bold\">     13</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># limitations under the License.</span>\n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Import API modules.\"\"\"</span>\n<span class=\"ansi-green-fg\">---&gt; 17</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span>\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">evaluation</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Version number.</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/t5/data/__init__.py:17</span>\n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Import data modules.\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">     16</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># pylint:disable=wildcard-import,g-bad-import-order</span>\n<span class=\"ansi-green-fg\">---&gt; 17</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">dataset_providers</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">glue_utils</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">postprocessors</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/t5/data/dataset_providers.py:28</span>\n<span class=\"ansi-green-fg ansi-bold\">     25</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">collections</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">abc</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Mapping\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">re</span>\n<span class=\"ansi-green-fg\">---&gt; 28</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">seqio</span>\n<span class=\"ansi-green-fg ansi-bold\">     29</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> utils\n<span class=\"ansi-green-fg ansi-bold\">     30</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tensorflow</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">compat</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">v2</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/seqio/__init__.py:19</span>\n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Import to top-level API.\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">     17</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># pylint:disable=wildcard-import,g-bad-import-order,g-import-not-at-top</span>\n<span class=\"ansi-green-fg\">---&gt; 19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">seqio</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">dataset_providers</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">seqio</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> evaluation\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">seqio</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> experimental\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/seqio/dataset_providers.py:36</span>\n<span class=\"ansi-green-fg ansi-bold\">     33</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">typing</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Any, Callable, Iterable, List, Mapping, MutableMapping, Optional, Sequence, Set, Tuple, Type, Union\n<span class=\"ansi-green-fg ansi-bold\">     35</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">absl</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> logging\n<span class=\"ansi-green-fg\">---&gt; 36</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">clu</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span>\n<span class=\"ansi-green-fg ansi-bold\">     37</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">editdistance</span>\n<span class=\"ansi-green-fg ansi-bold\">     38</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/clu/metrics.py:66</span>\n<span class=\"ansi-green-fg ansi-bold\">     64</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">clu</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">internal</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> utils\n<span class=\"ansi-green-fg ansi-bold\">     65</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">clu</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">values</span>\n<span class=\"ansi-green-fg\">---&gt; 66</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">flax</span>\n<span class=\"ansi-green-fg ansi-bold\">     67</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span>\n<span class=\"ansi-green-fg ansi-bold\">     68</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jnp</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/flax/__init__.py:19</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright 2022 The Flax Authors.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Licensed under the Apache License, Version 2.0 (the \"License\");</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span> \n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Lint as: python 3</span>\n<span class=\"ansi-green-fg ansi-bold\">     17</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Flax API.\"\"\"</span>\n<span class=\"ansi-green-fg\">---&gt; 19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> core\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> linen\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> optim\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/flax/core/__init__.py:15</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright 2022 The Flax Authors.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Licensed under the Apache License, Version 2.0 (the \"License\");</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     12</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># See the License for the specific language governing permissions and</span>\n<span class=\"ansi-green-fg ansi-bold\">     13</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># limitations under the License.</span>\n<span class=\"ansi-green-fg\">---&gt; 15</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">axes_scan</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> broadcast\n<span class=\"ansi-green-fg ansi-bold\">     16</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">frozen_dict</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> FrozenDict, freeze, unfreeze\n<span class=\"ansi-green-fg ansi-bold\">     17</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tracers</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> current_trace, trace_level, check_trace_level\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/flax/core/axes_scan.py:22</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> lax\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">interpreters</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> partial_eval <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> pe\n<span class=\"ansi-green-fg\">---&gt; 22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> linear_util <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> lu\n<span class=\"ansi-green-fg ansi-bold\">     24</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">typing</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Union, Optional, Callable, Any\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span>\n\n<span class=\"ansi-red-fg\">ImportError</span>: cannot import name 'linear_util' from 'jax' (/home/oren/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/jax/__init__.py)</pre>\n```\n:::\n\n:::\n:::\n\n\n<a name='2'></a>\n\n## Part 2: BERT Loss\n\nNow that you created the encoder, we will not make you train it. Training it could easily cost you a few days depending on which GPUs/TPUs you are using. Very few people train the full transformer from scratch. Instead, what the majority of people do, they load in a pretrained model, and they fine tune it on a specific task. That is exactly what you are about to do. Let's start by initializing and then loading in the model. \n\nInitialize the model from the saved checkpoint.\n\n::: {#d59c4fd9 .cell execution_count=3}\n``` {.python .cell-code}\n# Initializing the model\nmodel = trax.models.Transformer(\n    d_ff = 4096,\n    d_model = 1024,\n    max_len = 2048,\n    n_heads = 16,\n    dropout = 0.1,\n    input_vocab_size = 32000,\n    n_encoder_layers = 24,\n    n_decoder_layers = 24,\n    mode='predict')\n```\n:::\n\n\n::: {#0865bde0 .cell execution_count=4}\n``` {.python .cell-code}\n# Now load in the model\n# this takes about 1 minute\nshape11 = trax.shapes.ShapeDtype((1, 1), dtype=np.int32)  # Needed in predict mode.\nmodel.init_from_file('model.pkl.gz',\n                     weights_only=True, input_signature=(shape11, shape11))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NotFoundError</span>                             Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Now load in the model</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># this takes about 1 minute</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> shape11 <span style=\"color:rgb(98,98,98)\">=</span> trax<span style=\"color:rgb(98,98,98)\">.</span>shapes<span style=\"color:rgb(98,98,98)\">.</span>ShapeDtype((<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">1</span>), dtype<span style=\"color:rgb(98,98,98)\">=</span>np<span style=\"color:rgb(98,98,98)\">.</span>int32)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># Needed in predict mode.</span>\n<span class=\"ansi-green-fg\">----&gt; 4</span> <span class=\"ansi-yellow-bg\">model</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">init_from_file</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">model.pkl.gz</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span class=\"ansi-yellow-bg\">                     </span><span class=\"ansi-yellow-bg\">weights_only</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">True</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">input_signature</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">shape11</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">shape11</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/trax/layers/base.py:334</span>, in <span class=\"ansi-cyan-fg\">Layer.init_from_file</span><span class=\"ansi-blue-fg\">(self, file_name, weights_only, input_signature)</span>\n<span class=\"ansi-green-fg ansi-bold\">    332</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> tf<span style=\"color:rgb(98,98,98)\">.</span>io<span style=\"color:rgb(98,98,98)\">.</span>gfile<span style=\"color:rgb(98,98,98)\">.</span>GFile(file_name, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">rb</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> f:\n<span class=\"ansi-green-fg ansi-bold\">    333</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> gzip<span style=\"color:rgb(98,98,98)\">.</span>GzipFile(fileobj<span style=\"color:rgb(98,98,98)\">=</span>f, compresslevel<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> gzipf:\n<span class=\"ansi-green-fg\">--&gt; 334</span>     dictionary <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pickle</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">load</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">gzipf</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    335</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># In the current checkpoint format, we store weights in a separate</span>\n<span class=\"ansi-green-fg ansi-bold\">    336</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># non-pickled file with the same name but added \".npy\".</span>\n<span class=\"ansi-green-fg ansi-bold\">    337</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(dictionary[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">flat_weights</span><span style=\"color:rgb(175,0,0)\">'</span>], <span style=\"color:rgb(0,135,0)\">int</span>):\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.10/gzip.py:321</span>, in <span class=\"ansi-cyan-fg\">GzipFile.peek</span><span class=\"ansi-blue-fg\">(self, n)</span>\n<span class=\"ansi-green-fg ansi-bold\">    319</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">errno</span>\n<span class=\"ansi-green-fg ansi-bold\">    320</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">OSError</span>(errno<span style=\"color:rgb(98,98,98)\">.</span>EBADF, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">peek() on write-only GzipFile object</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">--&gt; 321</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_buffer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">peek</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">n</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.10/_compression.py:68</span>, in <span class=\"ansi-cyan-fg\">DecompressReader.readinto</span><span class=\"ansi-blue-fg\">(self, b)</span>\n<span class=\"ansi-green-fg ansi-bold\">     66</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">readinto</span>(<span style=\"color:rgb(0,135,0)\">self</span>, b):\n<span class=\"ansi-green-fg ansi-bold\">     67</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> <span style=\"color:rgb(0,135,0)\">memoryview</span>(b) <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> view, view<span style=\"color:rgb(98,98,98)\">.</span>cast(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">B</span><span style=\"color:rgb(175,0,0)\">\"</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> byte_view:\n<span class=\"ansi-green-fg\">---&gt; 68</span>         data <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">len</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">byte_view</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     69</span>         byte_view[:<span style=\"color:rgb(0,135,0)\">len</span>(data)] <span style=\"color:rgb(98,98,98)\">=</span> data\n<span class=\"ansi-green-fg ansi-bold\">     70</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">len</span>(data)\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.10/gzip.py:488</span>, in <span class=\"ansi-cyan-fg\">_GzipReader.read</span><span class=\"ansi-blue-fg\">(self, size)</span>\n<span class=\"ansi-green-fg ansi-bold\">    484</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_new_member:\n<span class=\"ansi-green-fg ansi-bold\">    485</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># If the _new_member flag is set, we have to</span>\n<span class=\"ansi-green-fg ansi-bold\">    486</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># jump to the next member, if there is one.</span>\n<span class=\"ansi-green-fg ansi-bold\">    487</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_init_read()\n<span class=\"ansi-green-fg\">--&gt; 488</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_read_gzip_header</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>:\n<span class=\"ansi-green-fg ansi-bold\">    489</span>         <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_size <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_pos\n<span class=\"ansi-green-fg ansi-bold\">    490</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">\"</span>\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.10/gzip.py:431</span>, in <span class=\"ansi-cyan-fg\">_GzipReader._read_gzip_header</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg ansi-bold\">    430</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">_read_gzip_header</span>(<span style=\"color:rgb(0,135,0)\">self</span>):\n<span class=\"ansi-green-fg\">--&gt; 431</span>     magic <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_fp</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">2</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    432</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> magic <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">'</span>:\n<span class=\"ansi-green-fg ansi-bold\">    433</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.10/gzip.py:97</span>, in <span class=\"ansi-cyan-fg\">_PaddedFile.read</span><span class=\"ansi-blue-fg\">(self, size)</span>\n<span class=\"ansi-green-fg ansi-bold\">     94</span> read <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_read\n<span class=\"ansi-green-fg ansi-bold\">     95</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_read <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">     96</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_buffer[read:] <span style=\"color:rgb(98,98,98)\">+</span> \\\n<span class=\"ansi-green-fg\">---&gt; 97</span>        <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">file</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">size</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">-</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_length</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">+</span><span class=\"ansi-yellow-bg\">read</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/tensorflow/python/lib/io/file_io.py:116</span>, in <span class=\"ansi-cyan-fg\">FileIO.read</span><span class=\"ansi-blue-fg\">(self, n)</span>\n<span class=\"ansi-green-fg ansi-bold\">    104</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">read</span>(<span style=\"color:rgb(0,135,0)\">self</span>, n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>):\n<span class=\"ansi-green-fg ansi-bold\">    105</span> <span style=\"color:rgb(188,188,188)\">  </span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Returns the contents of a file as a string.</span>\n<span class=\"ansi-green-fg ansi-bold\">    106</span> \n<span class=\"ansi-green-fg ansi-bold\">    107</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">  Starts reading from current position in file.</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    114</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    string if in string (regular) mode.</span>\n<span class=\"ansi-green-fg ansi-bold\">    115</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">  \"\"\"</span>\n<span class=\"ansi-green-fg\">--&gt; 116</span>   <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_preread_check</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    117</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> n <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>:\n<span class=\"ansi-green-fg ansi-bold\">    118</span>     length <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>size() <span style=\"color:rgb(98,98,98)\">-</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>tell()\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/tensorflow/python/lib/io/file_io.py:77</span>, in <span class=\"ansi-cyan-fg\">FileIO._preread_check</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg ansi-bold\">     74</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_read_check_passed:\n<span class=\"ansi-green-fg ansi-bold\">     75</span>   <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> errors<span style=\"color:rgb(98,98,98)\">.</span>PermissionDeniedError(<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>,\n<span class=\"ansi-green-fg ansi-bold\">     76</span>                                      <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">File isn</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">t open for reading</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">---&gt; 77</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_read_buf <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">_pywrap_file_io</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">BufferedInputStream</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">     78</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">compat</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">path_to_str</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">__name</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1024</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">512</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-red-fg\">NotFoundError</span>: model.pkl.gz; No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n<a name='2.1'></a>\n\n### 2.1 Decoding\n\nNow you will use one of the `inputs_targets_pairs` for input and as target. Next you will use the `pretty_decode` to output the input and target. The code to perform all of this has been provided below.\n\n::: {#604016c4 .cell execution_count=5}\n``` {.python .cell-code}\n# using the 3rd example\nc4_input = inputs_targets_pairs[2][0]\nc4_target = inputs_targets_pairs[2][1]\n\nprint('pretty_decoded input: \\n\\n', pretty_decode(c4_input))\nprint('\\npretty_decoded target: \\n\\n', pretty_decode(c4_target))\nprint('\\nc4_input:\\n\\n', c4_input)\nprint('\\nc4_target:\\n\\n', c4_target)\nprint(len(c4_target))\nprint(len(pretty_decode(c4_target)))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># using the 3rd example</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> c4_input <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">inputs_targets_pairs</span>[<span style=\"color:rgb(98,98,98)\">2</span>][<span style=\"color:rgb(98,98,98)\">0</span>]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> c4_target <span style=\"color:rgb(98,98,98)\">=</span> inputs_targets_pairs[<span style=\"color:rgb(98,98,98)\">2</span>][<span style=\"color:rgb(98,98,98)\">1</span>]\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">pretty_decoded input: </span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\n</span><span style=\"color:rgb(175,0,0)\">'</span>, pretty_decode(c4_input))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'inputs_targets_pairs' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nRun the cell below to decode.\n\n### Note: This will take some time to run\n\n::: {#3a8ce6a0 .cell execution_count=6}\n``` {.python .cell-code}\n# Temperature is a parameter for sampling.\n#   # * 0.0: same as argmax, always pick the most probable token\n#   # * 1.0: sampling from the distribution (can sometimes say random things)\n#   # * values inbetween can trade off diversity and quality, try it out!\noutput = decoding.autoregressive_sample(model, inputs=np.array(c4_input)[None, :],\n                                        temperature=0.0, max_length=5) # originally max_length = 50\nprint(wrapper.fill(pretty_decode(output[0])))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Temperature is a parameter for sampling.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#   # * 0.0: same as argmax, always pick the most probable token</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#   # * 1.0: sampling from the distribution (can sometimes say random things)</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#   # * values inbetween can trade off diversity and quality, try it out!</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> output <span style=\"color:rgb(98,98,98)\">=</span> decoding<span style=\"color:rgb(98,98,98)\">.</span>autoregressive_sample(model, inputs<span style=\"color:rgb(98,98,98)\">=</span>np<span style=\"color:rgb(98,98,98)\">.</span>array(<span class=\"ansi-yellow-bg\">c4_input</span>)[<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, :],\n<span class=\"ansi-green-fg ansi-bold\">      6</span>                                         temperature<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.0</span>, max_length<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>) <span style=\"font-style:italic;color:rgb(95,135,135)\"># originally max_length = 50</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"color:rgb(0,135,0)\">print</span>(wrapper<span style=\"color:rgb(98,98,98)\">.</span>fill(pretty_decode(output[<span style=\"color:rgb(98,98,98)\">0</span>])))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'c4_input' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nAt this point the RAM is almost full, this happens because the model and the decoding is memory heavy. You can run decoding just once. Running it the second time with another example might give you an answer that makes no sense, or repetitive words. If that happens restart the runtime (see how to at the start of the notebook) and run all the cells again.\n\nYou should also be aware that the quality of the decoding is not very good because max_length was downsized from 50 to 5 so that this runs faster within this environment. The colab version uses the original max_length so check that one for the actual decoding.\n\n",
    "supporting": [
      "lab02_files"
    ],
    "filters": [],
    "includes": {}
  }
}