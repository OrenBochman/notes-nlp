{
  "hash": "8be0617ab2ddb462bdb67d02a09c1cf9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndate: 2021-04-13\ntitle: 'Assignment 3 Ungraded Sections - Part 2: T5 SQuAD Model'\nsubtitle: \"NLP with Attention Models\"\ncategories: \n  - NLP \n  - Coursera \n  - Lab\n  - NLP with Attention Models\njupyter: python3\nexecute: \n    error: true\ndraft: false\n---\n\n\n\n\n![course banner](/images/Course-Logo-4-1.webp){.column-margin .nolightbox}\n\nWelcome to the part 2 of testing the models for this week's assignment. This time we will perform decoding using the T5 SQuAD model. In this notebook we'll perform Question Answering by providing a \"Question\", its \"Context\" and see how well we get the \"Target\" answer. \n\n## Colab\n\nSince this ungraded lab takes a lot of time to run on coursera, as an alternative we have a colab prepared for you.\n\n[T5 SQuAD Model Colab](https://drive.google.com/file/d/1c-8KJkTySRGqCx_JjwjvXuRBTNTqEE0N/view?usp=sharing)\n\n- If you run into a page that looks similar to the one below, with the option `Open with`, this would mean you need to download the `Colaboratory` app. You can do so by `Open with -> Connect more apps -> in the search bar write \"Colaboratory\" -> install`\n\n![](img/colab_help_1.png)\n\n- After installation it should look like this. Click on `Open with Google Colaboratory`\n\n![](img/colab_help_2.png)\n\n\n## Outline\n\n- [Overview](#0)\n- [Part 1: Resuming the assignment (T5 SQuAD Model)](#1)\n- [Part 2: Fine-tuning on SQuAD](#2)\n    - [2.1 Loading in the data and preprocessing](#2.1)\n    - [2.2 Decoding from a fine-tuned model](#2.2)\n\n\n### Overview {#0}\n\nIn this notebook you will:\n\n* Implement the Bidirectional Encoder Representation from Transformer (BERT) loss. \n* Use a pretrained version of the model you created in the assignment for inference.\n\n\n\n## Part 1: Getting ready {#1}\n\nRun the code cells below to import the necessary libraries and to define some functions which will be useful for decoding. The code and the functions are the same as the ones you previsouly ran on the graded assignment.\n\n::: {#aa368efc .cell execution_count=1}\n``` {.python .cell-code}\nimport string\nimport t5\nimport numpy as np\nimport trax \nfrom trax.supervised import decoding\nimport textwrap \n\nwrapper = textwrap.TextWrapper(width=70)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">string</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">trax</span> \n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/t5/__init__.py:17</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright 2023 The T5 Authors.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Licensed under the Apache License, Version 2.0 (the \"License\");</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     12</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># See the License for the specific language governing permissions and</span>\n<span class=\"ansi-green-fg ansi-bold\">     13</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># limitations under the License.</span>\n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Import API modules.\"\"\"</span>\n<span class=\"ansi-green-fg\">---&gt; 17</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span>\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">evaluation</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Version number.</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/t5/data/__init__.py:17</span>\n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Import data modules.\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">     16</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># pylint:disable=wildcard-import,g-bad-import-order</span>\n<span class=\"ansi-green-fg\">---&gt; 17</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">dataset_providers</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">glue_utils</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">postprocessors</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/t5/data/dataset_providers.py:28</span>\n<span class=\"ansi-green-fg ansi-bold\">     25</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">collections</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">abc</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Mapping\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">re</span>\n<span class=\"ansi-green-fg\">---&gt; 28</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">seqio</span>\n<span class=\"ansi-green-fg ansi-bold\">     29</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">t5</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">data</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> utils\n<span class=\"ansi-green-fg ansi-bold\">     30</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tensorflow</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">compat</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">v2</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tf</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/seqio/__init__.py:19</span>\n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Import to top-level API.\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">     17</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># pylint:disable=wildcard-import,g-bad-import-order,g-import-not-at-top</span>\n<span class=\"ansi-green-fg\">---&gt; 19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">seqio</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">dataset_providers</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">seqio</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> evaluation\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">seqio</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> experimental\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/seqio/dataset_providers.py:36</span>\n<span class=\"ansi-green-fg ansi-bold\">     33</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">typing</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Any, Callable, Iterable, List, Mapping, MutableMapping, Optional, Sequence, Set, Tuple, Type, Union\n<span class=\"ansi-green-fg ansi-bold\">     35</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">absl</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> logging\n<span class=\"ansi-green-fg\">---&gt; 36</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">clu</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span>\n<span class=\"ansi-green-fg ansi-bold\">     37</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">editdistance</span>\n<span class=\"ansi-green-fg ansi-bold\">     38</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/clu/metrics.py:66</span>\n<span class=\"ansi-green-fg ansi-bold\">     64</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">clu</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">internal</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> utils\n<span class=\"ansi-green-fg ansi-bold\">     65</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">clu</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">values</span>\n<span class=\"ansi-green-fg\">---&gt; 66</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">flax</span>\n<span class=\"ansi-green-fg ansi-bold\">     67</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span>\n<span class=\"ansi-green-fg ansi-bold\">     68</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jnp</span>\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/flax/__init__.py:19</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright 2022 The Flax Authors.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Licensed under the Apache License, Version 2.0 (the \"License\");</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span> \n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Lint as: python 3</span>\n<span class=\"ansi-green-fg ansi-bold\">     17</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Flax API.\"\"\"</span>\n<span class=\"ansi-green-fg\">---&gt; 19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> core\n<span class=\"ansi-green-fg ansi-bold\">     20</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> linen\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> optim\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/flax/core/__init__.py:15</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Copyright 2022 The Flax Authors.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Licensed under the Apache License, Version 2.0 (the \"License\");</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     12</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># See the License for the specific language governing permissions and</span>\n<span class=\"ansi-green-fg ansi-bold\">     13</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># limitations under the License.</span>\n<span class=\"ansi-green-fg\">---&gt; 15</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">axes_scan</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> broadcast\n<span class=\"ansi-green-fg ansi-bold\">     16</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">frozen_dict</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> FrozenDict, freeze, unfreeze\n<span class=\"ansi-green-fg ansi-bold\">     17</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">tracers</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> current_trace, trace_level, check_trace_level\n\nFile <span class=\"ansi-green-fg\">~/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/flax/core/axes_scan.py:22</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> lax\n<span class=\"ansi-green-fg ansi-bold\">     21</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">interpreters</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> partial_eval <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> pe\n<span class=\"ansi-green-fg\">---&gt; 22</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">jax</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> linear_util <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> lu\n<span class=\"ansi-green-fg ansi-bold\">     24</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">typing</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Union, Optional, Callable, Any\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span>\n\n<span class=\"ansi-red-fg\">ImportError</span>: cannot import name 'linear_util' from 'jax' (/home/oren/work/notes/notes-nlp/.venv/lib/python3.10/site-packages/jax/__init__.py)</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4df10504 .cell execution_count=2}\n``` {.python .cell-code}\nPAD, EOS, UNK = 0, 1, 2\n\n\ndef detokenize(np_array):\n    return trax.data.detokenize(\n        np_array,\n        vocab_type='sentencepiece',\n        vocab_file='sentencepiece.model',\n        vocab_dir='.')\n\n\ndef tokenize(s):\n    return next(trax.data.tokenize(\n        iter([s]),\n        vocab_type='sentencepiece',\n        vocab_file='sentencepiece.model',\n        vocab_dir='.'))\n \n    \nvocab_size = trax.data.vocab_size(\n    vocab_type='sentencepiece',\n    vocab_file='sentencepiece.model',\n    vocab_dir='.')\n\n\ndef get_sentinels(vocab_size, display=False):\n    sentinels = {}\n    for i, char in enumerate(reversed(string.ascii_letters), 1):\n        decoded_text = detokenize([vocab_size - i]) \n        # Sentinels, ex: <Z> - <a>\n        sentinels[decoded_text] = f'<{char}>'    \n        if display:\n            print(f'The sentinel is <{char}> and the decoded token is:', decoded_text)\n    return sentinels\n\n\nsentinels = get_sentinels(vocab_size, display=False)    \n\n\ndef pretty_decode(encoded_str_list, sentinels=sentinels):\n    # If already a string, just do the replacements.\n    if isinstance(encoded_str_list, (str, bytes)):\n        for token, char in sentinels.items():\n            encoded_str_list = encoded_str_list.replace(token, char)\n        return encoded_str_list\n  \n    # We need to decode and then prettyfy it.\n    return pretty_decode(detokenize(encoded_str_list))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 20</span>\n<span class=\"ansi-green-fg ansi-bold\">     12</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">tokenize</span>(s):\n<span class=\"ansi-green-fg ansi-bold\">     13</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">next</span>(trax<span style=\"color:rgb(98,98,98)\">.</span>data<span style=\"color:rgb(98,98,98)\">.</span>tokenize(\n<span class=\"ansi-green-fg ansi-bold\">     14</span>         <span style=\"color:rgb(0,135,0)\">iter</span>([s]),\n<span class=\"ansi-green-fg ansi-bold\">     15</span>         vocab_type<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sentencepiece</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     16</span>         vocab_file<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sentencepiece.model</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     17</span>         vocab_dir<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">.</span><span style=\"color:rgb(175,0,0)\">'</span>))\n<span class=\"ansi-green-fg\">---&gt; 20</span> vocab_size <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">trax</span><span style=\"color:rgb(98,98,98)\">.</span>data<span style=\"color:rgb(98,98,98)\">.</span>vocab_size(\n<span class=\"ansi-green-fg ansi-bold\">     21</span>     vocab_type<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sentencepiece</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     22</span>     vocab_file<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sentencepiece.model</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     23</span>     vocab_dir<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">.</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">     26</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">get_sentinels</span>(vocab_size, display<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n<span class=\"ansi-green-fg ansi-bold\">     27</span>     sentinels <span style=\"color:rgb(98,98,98)\">=</span> {}\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'trax' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Part 2: Fine-tuning on SQuAD {#2}\n\nNow let's try to fine tune on SQuAD and see what becomes of the model.For this, we need to write a function that will create and process the SQuAD `tf.data.Dataset`. Below is how T5 pre-processes SQuAD dataset as a text2text example. Before we jump in, we will have to first load in the data. \n\n\n### 2.1 Loading in the data and preprocessing {#2.1}\n\nYou first start by loading in the dataset. The text2text example for a SQuAD example looks like:\n\n```json\n{\n  'inputs': 'question: <question> context: <article>',\n  'targets': '<answer_0>',\n}\n```\n\nThe squad pre-processing function takes in the dataset and processes it using the sentencePiece vocabulary you have seen above. It generates the features from the vocab and encodes the string features. It takes on question, context, and answer, and returns \"question: Q context: C\" as input and \"A\" as target.\n\n::: {#5804babb .cell execution_count=3}\n``` {.python .cell-code}\n# Retrieve Question, C, A and return \"question: Q context: C\" as input and \"A\" as target.\ndef squad_preprocess_fn(dataset, mode='train'):\n    return t5.data.preprocessors.squad(dataset)\n```\n:::\n\n\n::: {#83286088 .cell execution_count=4}\n``` {.python .cell-code}\n# train generator, this takes about 1 minute\ntrain_generator_fn, eval_generator_fn = trax.data.tf_inputs.data_streams(\n  'squad/plain_text:1.0.0',\n  data_dir='data/',\n  bare_preprocess_fn=squad_preprocess_fn,\n  input_name='inputs',\n  target_name='targets'\n)\n\ntrain_generator = train_generator_fn()\nnext(train_generator)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># train generator, this takes about 1 minute</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> train_generator_fn, eval_generator_fn <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">trax</span><span style=\"color:rgb(98,98,98)\">.</span>data<span style=\"color:rgb(98,98,98)\">.</span>tf_inputs<span style=\"color:rgb(98,98,98)\">.</span>data_streams(\n<span class=\"ansi-green-fg ansi-bold\">      3</span>   <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">squad/plain_text:1.0.0</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">      4</span>   data_dir<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">data/</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">      5</span>   bare_preprocess_fn<span style=\"color:rgb(98,98,98)\">=</span>squad_preprocess_fn,\n<span class=\"ansi-green-fg ansi-bold\">      6</span>   input_name<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">inputs</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">      7</span>   target_name<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">targets</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> )\n<span class=\"ansi-green-fg ansi-bold\">     10</span> train_generator <span style=\"color:rgb(98,98,98)\">=</span> train_generator_fn()\n<span class=\"ansi-green-fg ansi-bold\">     11</span> <span style=\"color:rgb(0,135,0)\">next</span>(train_generator)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'trax' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f900869e .cell execution_count=5}\n``` {.python .cell-code}\n#print example from train_generator\n(inp, out) = next(train_generator)\nprint(inp.decode('utf8').split('context:')[0])\nprint()\nprint('context:', inp.decode('utf8').split('context:')[1])\nprint()\nprint('target:', out.decode('utf8'))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#print example from train_generator</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> (inp, out) <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span class=\"ansi-yellow-bg\">train_generator</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(inp<span style=\"color:rgb(98,98,98)\">.</span>decode(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">utf8</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>split(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">context:</span><span style=\"color:rgb(175,0,0)\">'</span>)[<span style=\"color:rgb(98,98,98)\">0</span>])\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"color:rgb(0,135,0)\">print</span>()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'train_generator' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### 2.2 Decoding from a fine-tuned model {#2.2}\n\nYou will now use an existing model that we trained for you. You will initialize, then load in your model, and then try with your own input. \n\n::: {#748c8889 .cell execution_count=6}\n``` {.python .cell-code}\n# Initialize the model \nmodel = trax.models.Transformer(\n    d_ff = 4096,\n    d_model = 1024,\n    max_len = 2048,\n    n_heads = 16,\n    dropout = 0.1,\n    input_vocab_size = 32000,\n    n_encoder_layers = 24,\n    n_decoder_layers = 24,\n    mode='predict')  # Change to 'eval' for slow decoding.\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Initialize the model </span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> model <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">trax</span><span style=\"color:rgb(98,98,98)\">.</span>models<span style=\"color:rgb(98,98,98)\">.</span>Transformer(\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     d_ff <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">4096</span>,\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     d_model <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">1024</span>,\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     max_len <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">2048</span>,\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     n_heads <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">16</span>,\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     dropout <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.1</span>,\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     input_vocab_size <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">32000</span>,\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     n_encoder_layers <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">24</span>,\n<span class=\"ansi-green-fg ansi-bold\">     10</span>     n_decoder_layers <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">24</span>,\n<span class=\"ansi-green-fg ansi-bold\">     11</span>     mode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">predict</span><span style=\"color:rgb(175,0,0)\">'</span>)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># Change to 'eval' for slow decoding.</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'trax' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2fa06781 .cell execution_count=7}\n``` {.python .cell-code}\n# load in the model\n# this will take a minute\nshape11 = trax.shapes.ShapeDtype((1, 1), dtype=np.int32)\nmodel.init_from_file('model_squad.pkl.gz',\n                     weights_only=True, input_signature=(shape11, shape11))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># load in the model</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># this will take a minute</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> shape11 <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">trax</span><span style=\"color:rgb(98,98,98)\">.</span>shapes<span style=\"color:rgb(98,98,98)\">.</span>ShapeDtype((<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">1</span>), dtype<span style=\"color:rgb(98,98,98)\">=</span>np<span style=\"color:rgb(98,98,98)\">.</span>int32)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> model<span style=\"color:rgb(98,98,98)\">.</span>init_from_file(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">model_squad.pkl.gz</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">      5</span>                      weights_only<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, input_signature<span style=\"color:rgb(98,98,98)\">=</span>(shape11, shape11))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'trax' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5b23cd0e .cell execution_count=8}\n``` {.python .cell-code}\n# create inputs\n# a simple example \n# inputs = 'question: She asked him where is john? context: John was at the game'\n\n# an extensive example\ninputs = 'question: What are some of the colours of a rose? context: A rose is a woody perennial flowering plant of the genus Rosa, in the family Rosaceae, or the flower it bears.There are over three hundred species and tens of thousands of cultivars. They form a group of plants that can be erect shrubs, climbing, or trailing, with stems that are often armed with sharp prickles. Flowers vary in size and shape and are usually large and showy, in colours ranging from white through yellows and reds. Most species are native to Asia, with smaller numbers native to Europe, North America, and northwestern Africa. Species, cultivars and hybrids are all widely grown for their beauty and often are fragrant.'\n```\n:::\n\n\n::: {#b9859905 .cell execution_count=9}\n``` {.python .cell-code}\n# tokenizing the input so we could feed it for decoding\nprint(tokenize(inputs))\ntest_inputs = tokenize(inputs) \n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># tokenizing the input so we could feed it for decoding</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">tokenize</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">inputs</span><span class=\"ansi-yellow-bg\">)</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> test_inputs <span style=\"color:rgb(98,98,98)\">=</span> tokenize(inputs) \n\nCell <span class=\"ansi-green-fg\">In[2], line 13</span>, in <span class=\"ansi-cyan-fg\">tokenize</span><span class=\"ansi-blue-fg\">(s)</span>\n<span class=\"ansi-green-fg ansi-bold\">     12</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">tokenize</span>(s):\n<span class=\"ansi-green-fg\">---&gt; 13</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">next</span>(<span class=\"ansi-yellow-bg\">trax</span><span style=\"color:rgb(98,98,98)\">.</span>data<span style=\"color:rgb(98,98,98)\">.</span>tokenize(\n<span class=\"ansi-green-fg ansi-bold\">     14</span>         <span style=\"color:rgb(0,135,0)\">iter</span>([s]),\n<span class=\"ansi-green-fg ansi-bold\">     15</span>         vocab_type<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sentencepiece</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     16</span>         vocab_file<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sentencepiece.model</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     17</span>         vocab_dir<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">.</span><span style=\"color:rgb(175,0,0)\">'</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'trax' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nRun the cell below to decode.\n\n### Note: This will take some time to run\n\n::: {#81122138 .cell execution_count=10}\n``` {.python .cell-code}\n# Temperature is a parameter for sampling.\n#   # * 0.0: same as argmax, always pick the most probable token\n#   # * 1.0: sampling from the distribution (can sometimes say random things)\n#   # * values inbetween can trade off diversity and quality, try it out!\noutput = decoding.autoregressive_sample(model, inputs=np.array(test_inputs)[None, :],\n                                        temperature=0.0, max_length=5) # originally max_length=10\nprint(wrapper.fill(pretty_decode(output[0])))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Temperature is a parameter for sampling.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#   # * 0.0: same as argmax, always pick the most probable token</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#   # * 1.0: sampling from the distribution (can sometimes say random things)</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#   # * values inbetween can trade off diversity and quality, try it out!</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> output <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">decoding</span><span style=\"color:rgb(98,98,98)\">.</span>autoregressive_sample(model, inputs<span style=\"color:rgb(98,98,98)\">=</span>np<span style=\"color:rgb(98,98,98)\">.</span>array(test_inputs)[<span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>, :],\n<span class=\"ansi-green-fg ansi-bold\">      6</span>                                         temperature<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.0</span>, max_length<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>) <span style=\"font-style:italic;color:rgb(95,135,135)\"># originally max_length=10</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"color:rgb(0,135,0)\">print</span>(wrapper<span style=\"color:rgb(98,98,98)\">.</span>fill(pretty_decode(output[<span style=\"color:rgb(98,98,98)\">0</span>])))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'decoding' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nYou should also be aware that the quality of the decoding is not very good because max_length was downsized from 10 to 5 so that this runs faster within this environment. The colab version uses the original max_length so check that one for the actual decoding.\n\n",
    "supporting": [
      "lab03_files"
    ],
    "filters": [],
    "includes": {}
  }
}