{
  "hash": "687c46e8a0de78e4278ebbf9a15ee513",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndate: 2020-10-25\ntitle: \"N-grams Corpus preprocessing\"\nsubtitle: \"Probabilistic Models\"\ncategories: \n  - NLP \n  - Coursera \n  - Notes\n  - Probabilistic Models\njupyter: python3\n---\n\n\n::: {.column-margin .nolightbox}\n![course banner](/images/Course-Logo-2-3.webp)\n:::\n\nThe input corpus in this week's assignment is a continuous text that needs some preprocessing so that we can start calculating the n-gram probabilities.\n\nSome common preprocessing steps for the language models include:\n- lowercasing the text\n- remove special characters\n- split text to list of sentences\n- split sentence into list words\n\nCan we note the similarities and differences among the preprocessing steps shown during the Course 1 of this specialization?\n\n::: {#06b8c687 .cell execution_count=1}\n``` {.python .cell-code}\nimport nltk               # NLP toolkit\nimport re                 # Library for Regular expression operations\n\n#nltk.download('punkt')    # Download the Punkt sentence tokenizer \nnltk.download('punkt_tab')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[nltk_data] Downloading package punkt_tab to /home/oren/nltk_data...\n[nltk_data]   Unzipping tokenizers/punkt_tab.zip.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nTrue\n```\n:::\n:::\n\n\n### Lowercase {#lowercase}\n\nWords at the beginning of a sentence and names start with a capital letter. However, when counting words, we want to treat them the same as if they appeared in the middle of a sentence. \n\nWe can do that by converting the text to lowercase using [str.lowercase]\n(https://docs.python.org/3/library/stdtypes.html?highlight=split#str.lower).\n\n::: {#e0e0f0b2 .cell execution_count=2}\n``` {.python .cell-code}\n# change the corpus to lowercase\ncorpus = \"Learning% makes 'me' happy. I am happy be-cause I am learning! :)\"\ncorpus = corpus.lower()\n\n# note that word \"learning\" will now be the same regardless of its position in the sentence\nprint(corpus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlearning% makes 'me' happy. i am happy be-cause i am learning! :)\n```\n:::\n:::\n\n\n### Remove special characters {#special-characters}\n\nSome of the characters may need to be removed from the corpus before we start processing the text to find n-grams. \n\nOften, the special characters such as double quotes '\"' or dash '-' are removed, and the interpunction such as full stop '.' or question mark '?' are left in the corpus.\n\n::: {#8fb6b8cb .cell execution_count=3}\n``` {.python .cell-code}\n# remove special characters\ncorpus = \"learning% makes 'me' happy. i am happy be-cause i am learning! :)\"\ncorpus = re.sub(r\"[^a-zA-Z0-9.?! ]+\", \"\", corpus)\nprint(corpus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlearning makes me happy. i am happy because i am learning! \n```\n:::\n:::\n\n\nNote that this process gets rid of the happy face made with punctuations :). Remember that for sentiment analysis, this emoticon was very important. However, we will not consider it here.\n\n\n### Text splitting {#text-splitting}\n\nIn the assignment, the sentences in the corpus are separated by a special delimiter \\n. We will need to split the corpus into an array of sentences using this delimiter. \nOne way to do that is by using the [str.split](https://docs.python.org/3/library/stdtypes.html?highlight=split#str.split) method.\n\n\nThe following examples illustrate how to use this method. The code shows:\n- how to split a string containing a date into an array of date parts\n- how to split a string with time into an array containing hours, minutes and seconds \n\nAlso, note what happens if there are several back-to-back delimiters like between \"May\" and \"9\".\n\n::: {#1bf95ada .cell execution_count=4}\n``` {.python .cell-code}\n# split text by a delimiter to array\ninput_date=\"Sat May  9 07:33:35 CEST 2020\"\n\n# get the date parts in array\ndate_parts = input_date.split(\" \")\nprint(f\"date parts = {date_parts}\")\n\n#get the time parts in array\ntime_parts = date_parts[4].split(\":\")\nprint(f\"time parts = {time_parts}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndate parts = ['Sat', 'May', '', '9', '07:33:35', 'CEST', '2020']\ntime parts = ['07', '33', '35']\n```\n:::\n:::\n\n\n This text splitting is more complicated than the tokenization process used for sentiment analysis.\n\n\n### Sentence tokenizing {#sentence-tokenizing}\n\nOnce we have a list of sentences, the next step is to split each sentence into a list of words.\n\nThis process could be done in several ways, even using the str.split method described above, but we will use the NLTK library [nltk](https://www.nltk.org/) to help us with that.\n\nIn the code assignment, we will use the method [word_tokenize](https://www.nltk.org/api/nltk.tokenize.html#nltk.tokenize.punkt.PunktLanguageVars.word_tokenize) to split your sentence into a list of words. Let us try the method in an example.\n\n::: {#5cd37d33 .cell execution_count=5}\n``` {.python .cell-code}\n# tokenize the sentence into an array of words\n\nsentence = 'i am happy because i am learning.'\ntokenized_sentence = nltk.word_tokenize(sentence)\nprint(f'{sentence} -> {tokenized_sentence}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ni am happy because i am learning. -> ['i', 'am', 'happy', 'because', 'i', 'am', 'learning', '.']\n```\n:::\n:::\n\n\nNow that the sentence is tokenized, we can work with each word in the sentence separately. This will be useful later when creating and counting N-grams. In the following code example, we will see how to find the length of each word.\n\n::: {#97980c67 .cell execution_count=6}\n``` {.python .cell-code}\n# find length of each word in the tokenized sentence\nsentence = ['i', 'am', 'happy', 'because', 'i', 'am', 'learning', '.']\nword_lengths = [(word, len(word)) for word in sentence] # Create a list with the word lengths using a list comprehension\nprint(f' Lengths of the words: \\n{word_lengths}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Lengths of the words: \n[('i', 1), ('am', 2), ('happy', 5), ('because', 7), ('i', 1), ('am', 2), ('learning', 8), ('.', 1)]\n```\n:::\n:::\n\n\nThe previous result produces a list of pairs. This is not equivalent to a dictionary.\n\n## N-grams {#n-grams}\n\n### Sentence to n-gram {#sentence-to-ngram}\n\nThe next step is to build n-grams from the tokenized sentences. \n\nA sliding window of size n-words can generate the n-grams. The window scans the list of words starting at the sentence beginning, moving by a step of one word until it reaches the end of the sentence.\n\nHere is an example method that prints all trigrams in the given sentence.\n\n::: {#50ce19dd .cell execution_count=7}\n``` {.python .cell-code}\ndef sentence_to_trigram(tokenized_sentence):\n    \"\"\"\n    Prints all trigrams in the given tokenized sentence.\n    \n    Args:\n        tokenized_sentence: The words list.\n    \n    Returns:\n        No output\n    \"\"\"\n    # note that the last position of i is 3rd to the end\n    for i in range(len(tokenized_sentence) - 3 + 1):\n        # the sliding window starts at position i and contains 3 words\n        trigram = tokenized_sentence[i : i + 3]\n        print(trigram)\n\ntokenized_sentence = ['i', 'am', 'happy', 'because', 'i', 'am', 'learning', '.']\n\nprint(f'List all trigrams of sentence: {tokenized_sentence}\\n')\nsentence_to_trigram(tokenized_sentence)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList all trigrams of sentence: ['i', 'am', 'happy', 'because', 'i', 'am', 'learning', '.']\n\n['i', 'am', 'happy']\n['am', 'happy', 'because']\n['happy', 'because', 'i']\n['because', 'i', 'am']\n['i', 'am', 'learning']\n['am', 'learning', '.']\n```\n:::\n:::\n\n\n<a name=\"ngram-prefix\"></a>\n### Prefix of an n-gram\n\nAs we saw in the lecture, the n-gram probability is often calculated based on the (n-1)-gram counts. The prefix is needed in the formula to calculate the probability of an n-gram.\n\n\\begin{equation*}\nP(w_n|w_1^{n-1})=\\frac{C(w_1^n)}{C(w_1^{n-1})}\n\\end{equation*}\n\nThe following code shows how to get an (n-1)-gram  prefix from n-gram on an example of getting trigram from a 4-gram.\n\n::: {#5d038aba .cell execution_count=8}\n``` {.python .cell-code}\n# get trigram prefix from a 4-gram\nfourgram = ['i', 'am', 'happy','because']\ntrigram = fourgram[0:-1] # Get the elements from 0, included, up to the last element, not included.\nprint(trigram)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['i', 'am', 'happy']\n```\n:::\n:::\n\n\n### Start and end of sentence word $<s>$ and $</s>$ {#start-end-of-sentence}\n\nWe could see in the lecture that we must add some special characters at the beginning and the end of each sentence: \n\n* $<s>$  at beginning\n* $</s>$ at the end\n\nFor n-grams, we must prepend n-1 of characters at the begining of the sentence. \n\nLet us have a look at how we can implement this in code.\n\n::: {#d7e71424 .cell execution_count=9}\n``` {.python .cell-code}\n# when working with trigrams, we need to prepend 2 <s> and append one </s>\nn = 3\ntokenized_sentence = ['i', 'am', 'happy', 'because', 'i', 'am', 'learning', '.']\ntokenized_sentence = [\"<s>\"] * (n - 1) + tokenized_sentence + [\"</s>\"]\nprint(tokenized_sentence)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['<s>', '<s>', 'i', 'am', 'happy', 'because', 'i', 'am', 'learning', '.', '</s>']\n```\n:::\n:::\n\n\nThat's all for the lab for \"N-gram\" lesson of week 3.\n\n",
    "supporting": [
      "lab01_files"
    ],
    "filters": [],
    "includes": {}
  }
}